[[getting-started-apm-server]]
== Self manage APM Server

++++
<titleabbrev>Self manage APM Server</titleabbrev>
++++

TIP: The easiest way to get started with Elastic APM is by using our
{ess-product}[hosted {es} Service] on {ecloud}.
The {es} Service is available on AWS, GCP, and Azure.
See <<apm-quick-start>> to get started in minutes.

// TODO: MOVE THIS
IMPORTANT: Starting in version 8.0.0, {fleet} uses the APM integration to set up and manage APM index templates,
{ilm-init} policies, and ingest pipelines. APM Server will only send data to {es} _after_ the APM integration has been installed.

The APM Server receives performance data from your APM agents,
validates and processes it, and then transforms the data into {es} documents.
If you're on this page, then you've chosen to self-manage the Elastic Stack,
and you now must decide how to run and configure the APM Server.
There are two options, and the components required are different for each:

* **<<setup-apm-server-binary,APM Server binary>>**
* **<<setup-fleet-managed-apm,Fleet-managed APM Server>>**
// * **<<setup-apm-server-ea,Standalone Elastic Agent-managed APM Server>>**

[float]
[[setup-apm-server-binary]]
=== APM Server binary

Install, configure, and run the APM Server binary wherever you need it.

image::./images/bin-ov.png[APM Server binary overview]

**Pros**:

- Simplest self-managed option
- No addition component knowledge required
- YAML configuration simplifies automation

**Supported outputs**:

- {es}
- {ess}
- {ls}
- Kafka
- Redis
- File
- Console

**Required components**:

- APM agents
- APM Server
- {stack}

**Configuration method**: YAML

[float]
[[setup-fleet-managed-apm]]
=== Fleet-managed APM Server

Fleet is a web-based UI in {kib} that is used to centrally manage {agent}s.
In this deployment model, use {agent} to spin up APM Server instances that can be centrally-managed in a custom-curated user interface.

NOTE: Fleet-managed APM Server does not have full feature parity with the APM Server binary method of running Elastic APM.

image::./images/fm-ov.png[APM Server fleet overview]

// (outputs, stable APIs)
// not the best option for a simple test setup or if only interested in centrally running APM Server

**Pros**:

- Conveniently manage one, some, or many different integrations from one central {fleet} UI.

**Supported outputs**:

- {es}
- {ess}

**Required components**:

- APM agents
- APM Server
- {agent}
- Fleet Server
- {stack}

**Configuration method**: {kib} UI

// [float]
// [[setup-apm-server-ea]]
// === Standalone Elastic Agent-managed APM Server
// // I really don't know how to sell this option
// Instead of installing and configuring the APM Server binary, let {agent} orchestrate it for you.
// Install {agent} and manually configure the agent locally on the system where it's installed.
// You are responsible for managing and upgrading {agent}. This approach is recommended for advanced users only.

// **Pros**:

// - Easily add integrations for other data sources
// useful if EA already in place for other integrations, and customers want to customize setup rather than using Fleet for configuration
// // TODO:
// // maybe get some more hints on this one from the EA team to align with highlighting the same pros & cons.

// **Available on Elastic Cloud**: ❌

// This supports all of the same outputs as binary
// see https://github.com/elastic/apm-server/issues/10467
// **Supported outputs**:

// **Configuration method**: YAML

// image::./images/ea-ov.png[APM Server ea overview]

// @simitt's notes for how to include EA-managed in the decision tree:
// ****
// If we generally describe Standalone Elastic Agent managed APM Server then we should also add it to this diagram:
// Do you want to use other integrations?
// -> yes: Would you like to use the comfort of Fleet UI based management? -> yes: Fleet managed APM Server; -> no: Standalone Elastic Agent managed APM Server
// -> no: What is your prefered way of configuration? -> yaml: APM Server binary; -> Kibana UI: Fleet managed APM Server
// ****

// Components required:

// [options="header"]
// |====
// | Installation method                         | APM Server | Elastic Agent | Fleet Server
// | APM Server binary                           | ✔️          |               |
// // | Standalone Elastic Agent-managed APM Server | ✔️          | ✔️             |
// | Fleet-managed APM Server                    | ✔️          | ✔️             | ✔️
// |====

[float]
=== Help me decide

Use the decision tree below to help determine which method of configuring and running the APM Server is best for your use case.

[subs=attributes+]
include::{docdir}/diagrams/apm-decision-tree.asciidoc[APM Server decision tree]


=== APM Server binary

This guide will explain how to set up and configure the APM Server binary.

[float]
==== Prerequisites

// tag::prereq[]
First, see the https://www.elastic.co/support/matrix[Elastic Support Matrix] for information about supported operating systems and product compatibility.

You'll need:

* *{es}* for storing and indexing data.
* *{kib}* for visualizing with the APM UI.

We recommend you use the same version of {es}, {kib}, and APM Server.
See {stack-ref}/installing-elastic-stack.html[Installing the {stack}]
for more information about installing these products.
// end::prereq[]

image::images/apm-architecture-diy.png[Install Elastic APM yourself]

// *******************************************************
// STEP 1
// *******************************************************

[[installing]]
==== Step 1: Install

NOTE: *Before you begin*: If you haven't installed the {stack}, do that now.
See {stack-ref}/installing-elastic-stack.html[Learn how to install the
{stack} on your own hardware].

To download and install {beatname_uc}, use the commands below that work with your system.
If you use `apt` or `yum`, you can <<setup-repositories,install {beatname_uc} from our repositories>>
to update to the newest version more easily.

ifeval::["{release-state}"!="unreleased"]
See our https://www.elastic.co/downloads/apm[download page]
for other installation options, such as 32-bit images.
endif::[]

[[deb]]
*deb:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of APM Server has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

["source","sh",subs="attributes"]
----------------------------------------------------------------------
curl -L -O {downloads}/apm-server-{version}-amd64.deb
sudo dpkg -i apm-server-{version}-amd64.deb
----------------------------------------------------------------------

endif::[]

[[rpm]]
*RPM:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of APM Server has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

["source","sh",subs="attributes"]
----------------------------------------------------------------------
curl -L -O {downloads}/apm-server-{version}-x86_64.rpm
sudo rpm -vi apm-server-{version}-x86_64.rpm
----------------------------------------------------------------------

endif::[]

[[linux]]
*Other Linux:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of APM Server has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

["source","sh",subs="attributes"]
------------------------------------------------
curl -L -O {downloads}/apm-server-{version}-linux-x86_64.tar.gz
tar xzvf apm-server-{version}-linux-x86_64.tar.gz
------------------------------------------------
endif::[]

[[mac]]
*Mac:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of APM Server has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

["source","sh",subs="attributes"]
------------------------------------------------
curl -L -O {downloads}/apm-server-{version}-darwin-x86_64.tar.gz
tar xzvf apm-server-{version}-darwin-x86_64.tar.gz
------------------------------------------------

endif::[]

[[installing-on-windows]]
*Windows:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of APM Server has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

. Download the APM Server Windows zip file from the
https://www.elastic.co/downloads/apm/apm-server[downloads page].

. Extract the contents of the zip file into `C:\Program Files`.

. Rename the `apm-server-<version>-windows` directory to `APM-Server`.

. Open a PowerShell prompt as an Administrator (right-click the PowerShell icon and select *Run As Administrator*).
If you are running Windows XP, you may need to download and install PowerShell.

. From the PowerShell prompt, run the following commands to install APM Server as a Windows service:
+
[source,shell]
----------------------------------------------------------------------
PS > cd 'C:\Program Files\APM-Server'
PS C:\Program Files\APM-Server> .\install-service.ps1
----------------------------------------------------------------------

NOTE: If script execution is disabled on your system,
you need to set the execution policy for the current session to allow the script to run.
For example: `PowerShell.exe -ExecutionPolicy UnRestricted -File .\install-service.ps1`.

endif::[]

[[docker]]
*Docker:*

See <<running-on-docker, Running on Docker>> for deploying Docker containers.

// *******************************************************
// STEP 2
// *******************************************************

[[apm-server-configuration]]
==== Step 2: Set up and configure

// This content is reused in the upgrading guide
// tag::why-apm-integration[]
Starting in version 8.0.0, {fleet} uses the APM integration to set up and manage APM index templates,
{ilm-init} policies, and ingest pipelines. APM Server will only send data to {es} _after_ the APM integration has been installed.
// end::why-apm-integration[]

[float]
===== Install the APM integration

// This content is reused in the upgrading guide
// tag::install-apm-integration[]
[%collapsible%open]
.**If you have an internet connection**
====
An internet connection is required to install the APM integration via the {fleet} UI in {kib}.

// lint ignore elastic-agent
. Open {kib} and select **Add integrations** > **Elastic APM**.
. Click **APM integration**.
. Click **Add Elastic APM**.
. Click **Save and continue**.
. Click **Add Elastic Agent later**. You do not need to run an {agent} to complete the setup.
====

// tag::install-apm-integration-no-internet[]
[%collapsible]
.**If you don't have an internet connection**
====
If your environment has network traffic restrictions, there are other ways to install the APM integration.
See {fleet-guide}/air-gapped.html[Air-gapped environments] for more information.

Option 1: Update `kibana.yml`::
+
Update `kibana.yml` to include the following, then restart {kib}.
+
[source,yaml]
----
xpack.fleet.packages:
- name: apm
  version: latest
----
+
See {kibana-ref}/settings.html[Configure Kibana] to learn more about how to edit the Kibana configuration file.

Option 2: Use the {fleet} API::
+
Use the {fleet} API to install the APM integration. To be successful, this needs to be run against the {kib}
API, not the {es} API.
+
["source","yaml",subs="attributes"]
----
POST kbn:/api/fleet/epm/packages/apm/{version}
{ "force": true }
----
+
See {kibana-ref}/api.html[Kibana API] to learn more about how to use the Kibana APIs.
====
// end::install-apm-integration-no-internet[]
// end::install-apm-integration[]

[float]
===== Configure APM

Configure APM by editing the `apm-server.yml` configuration file.
The location of this file varies by platform--see the <<directory-layout>> for help locating it.

A minimal configuration file might look like this:

[source,yaml]
----
apm-server:
  host: "localhost:8200" <1>
output.elasticsearch:
  hosts: ["localhost:9200"] <2>
  username: "elastic" <3>
  password: "changeme"
----
<1> The `host:port` APM Server listens on.
<2> The {es} `host:port` to connect to.
<3> This example uses basic authentication.
The user provided here needs the privileges required to publish events to {es}.
To create a dedicated user for this role, see <<privileges-to-publish-events>>.

All available configuration options are outlined in
{apm-guide-ref}/configuring-howto-apm-server.html[configuring APM Server].

// *******************************************************
// STEP 3
// *******************************************************

[[apm-server-starting]]
==== Step 3: Start

In a production environment, you would put APM Server on its own machines,
similar to how you run {es}.
You _can_ run it on the same machines as {es}, but this is not recommended,
as the processes will be competing for resources.

To start APM Server, run:

[source,bash]
----------------------------------
./apm-server -e
----------------------------------

NOTE: The `-e` <<global-flags,global flag>> enables logging to stderr and disables syslog/file output.
Remove this flag if you've enabled logging in the configuration file.
For Linux systems, see <<running-with-systemd,APM Server status and logs>>.

You should see APM Server start up.
It will try to connect to {es} on localhost port `9200` and expose an API to agents on port `8200`.
You can change the defaults in `apm-server.yml` or by supplying a different address on the command line:

[source,bash]
----------------------------------
./apm-server -e -E output.elasticsearch.hosts=ElasticsearchAddress:9200 -E apm-server.host=localhost:8200
----------------------------------

[float]
[[running-deb-rpm]]
===== Debian Package / RPM

For Debian package and RPM installations, we recommend the `apm-server` process runs as a non-root user.
Therefore, these installation methods create an `apm-server` user which you can use to start the process.
In addition, {beatname_uc} will only start if the configuration file is
<<config-file-ownership,owned by the user running the process>>.

To start the APM Server in this case, run:

[source,bash]
----------------------------------
sudo -u apm-server apm-server [<argument...>]
----------------------------------

By default, APM Server loads its configuration file from `/etc/apm-server/apm-server.yml`.
See the <<directory-layout,deb & rpm default paths>> for a full directory layout.

// *******************************************************
// STEP 4
// *******************************************************

[[next-steps]]
==== Step 4: Next steps

// Use a tagged region to pull APM Agent information from the APM Overview
If you haven't already, you can now install APM Agents in your services!

* {apm-go-ref-v}/introduction.html[Go agent]
* {apm-ios-ref-v}/intro.html[iOS agent]
* {apm-java-ref-v}/intro.html[Java agent]
* {apm-dotnet-ref-v}/intro.html[.NET agent]
* {apm-node-ref-v}/intro.html[Node.js agent]
* {apm-php-ref-v}/intro.html[PHP agent]
* {apm-py-ref-v}/getting-started.html[Python agent]
* {apm-ruby-ref-v}/introduction.html[Ruby agent]
* {apm-rum-ref-v}/intro.html[JavaScript Real User Monitoring (RUM) agent]

Once you have at least one {apm-agent} sending data to APM Server,
you can start visualizing your data in the {kibana-ref}/xpack-apm.html[{apm-app}].

If you're migrating from Jaeger, see <<jaeger-integration>>.

// Shared APM & YUM
include::{docdir}/repositories.asciidoc[]

// Shared docker
include::{docdir}/shared-docker.asciidoc[]


=== Fleet-managed APM Server

This guide will explain how to set up and configure a Fleet-managed APM Server.

[float]
==== Prerequisites

You need {es} for storing and searching your data, and {kib} for visualizing and managing it.
When setting these components up, you need:

include::{ingest-docs-root}/docs/en/ingest-management/tab-widgets/prereq.asciidoc[tag=self-managed]

==== Step 1: Set up Fleet

Use {fleet} in {kib} to get APM data into the {stack}.
The first time you use {fleet}, you'll need to set it up and add a
{fleet-server}:

include::{ingest-docs-root}/docs/en/ingest-management/tab-widgets/add-fleet-server/content.asciidoc[tag=self-managed]

For more information, refer to {fleet-guide}/fleet-server.html[{fleet-server}].

==== Step 2: Add and configure the APM integration

include::{obs-repo-dir}/observability/tab-widgets/add-apm-integration/content.asciidoc[tag=self-managed]

****
An internet connection is required to install the APM integration via the Fleet UI in Kibana.

--
include::{docdir}/getting-started-apm-server.asciidoc[tag=install-apm-integration-no-internet]
--
****

==== Step 3: Install APM agents

APM agents are written in the same language as your service.
To monitor a new service, you must install the agent and configure it with a service name,
APM Server host, and Secret token.

* **Service name**: The APM integration maps an instrumented service's name–defined in each {apm-agent}'s configuration–
to the index that its data is stored in {es}.
Service names are case-insensitive and must be unique.
For example, you cannot have a service named `Foo` and another named `foo`.
Special characters will be removed from service names and replaced with underscores (`_`).

* **APM Server URL**: The host and port that APM Server listens for events on.
This should match the host and port defined when setting up the APM integration.

* **Secret token**: Authentication method for {apm-agent} and APM Server communication.
This should match the secret token defined when setting up the APM integration.

TIP: You can edit your APM integration settings if you need to change the APM Server URL
or secret token to match your APM agents.

include::{tab-widget-dir}/install-agents-widget.asciidoc[]

==== Step 4: View your data

Back in {kib}, under {observability}, select APM.
You should see application performance monitoring data flowing into the {stack}!

[role="screenshot"]
image::./images/kibana-apm-sample-data.png[{apm-app} with data]
