:span-name-type-sheet: https://docs.google.com/spreadsheets/d/1SmWeX5AeqUcayrArUauS_CxGgsjwRgMYH4ZY8yQsMhQ/edit#gid=644582948
:span-spec: https://github.com/elastic/apm/blob/main/tests/agents/json-specs/span_types.json

[[data-model]]
== Data Model

Elastic APM agents capture different types of information from within their instrumented applications.
These are known as events, and can be `spans`, `transactions`, `errors`, or `metrics`.

* <<data-model-spans>>
* <<data-model-transactions>>
* <<data-model-errors>>
* <<data-model-metrics>>

Events can contain additional <<data-model-metadata,metadata>> which further enriches your data.

[[data-model-spans]]
=== Spans

*Spans* contain information about the execution of a specific code path.
They measure from the start to the end of an activity,
and they can have a parent/child relationship with other spans.

Agents automatically instrument a variety of libraries to capture these spans from within your application,
but you can also use the Agent API for custom instrumentation of specific code paths.

Among other things, spans can contain:

* A `transaction.id` attribute that refers to its parent <<data-model-transactions,transaction>>.
* A `parent.id` attribute that refers to its parent span or transaction.
* Its start time and duration.
* A `name`, `type`, `subtype`, and `action`—see the {span-name-type-sheet}[span name/type alignment]
sheet for span name patterns and examples by {apm-agent}.
In addition, some APM agents test against a public {span-spec}[span type/subtype spec].
* An optional `stack trace`. Stack traces consist of stack frames,
which represent a function call on the call stack.
They include attributes like function name, file name and path, line number, etc.

TIP: Most agents limit keyword fields, like `span.id`, to 1024 characters,
and non-keyword fields, like `span.start.us`, to 10,000 characters.

[float]
[[data-model-dropped-spans]]
==== Dropped spans

For performance reasons, APM agents can choose to sample or omit spans purposefully.
This can be useful in preventing edge cases, like long-running transactions with over 100 spans,
that would otherwise overload both the Agent and the APM Server.
When this occurs, the {apm-app} will display the number of spans dropped.

To configure the number of spans recorded per transaction, see the relevant Agent documentation:

* Go: {apm-go-ref-v}/configuration.html#config-transaction-max-spans[`ELASTIC_APM_TRANSACTION_MAX_SPANS`]
* iOS: _Not yet supported_
* Java: {apm-java-ref-v}/config-core.html#config-transaction-max-spans[`transaction_max_spans`]
* .NET: {apm-dotnet-ref-v}/config-core.html#config-transaction-max-spans[`TransactionMaxSpans`]
* Node.js: {apm-node-ref-v}/configuration.html#transaction-max-spans[`transactionMaxSpans`]
* PHP: {apm-php-ref-v}/configuration-reference.html#config-transaction-max-spans[`transaction_max_spans`]
* Python: {apm-py-ref-v}/configuration.html#config-transaction-max-spans[`transaction_max_spans`]
* Ruby: {apm-ruby-ref-v}/configuration.html#config-transaction-max-spans[`transaction_max_spans`]

[float]
[[data-model-missing-spans]]
==== Missing spans

Agents stream spans to the APM Server separately from their transactions.
Because of this, unforeseen errors may cause spans to go missing.
Agents know how many spans a transaction should have;
if the number of expected spans does not equal the number of spans received by the APM Server,
the {apm-app} will calculate the difference and display a message.

[float]
==== Data streams

Spans are stored with transactions in the following data streams:

include::./data-streams.asciidoc[tag=traces-data-streams]

See <<apm-data-streams>> to learn more.

[float]
==== Example span document

This example shows what span documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====
[source,json]
----
include::./data/elasticsearch/generated/spans.json[]
----
====

[[data-model-transactions]]
=== Transactions

*Transactions* are a special kind of <<data-model-spans,span>> that have additional attributes associated with them.
They describe an event captured by an Elastic {apm-agent} instrumenting a service.
You can think of transactions as the highest level of work you’re measuring within a service.
As an example, a transaction might be a:

* Request to your server
* Batch job
* Background job
* Custom transaction type

Agents decide whether to sample transactions or not,
and provide settings to control sampling behavior.
If sampled, the <<data-model-spans,spans>> of a transaction are sent and stored as separate documents.
Within one transaction there can be 0, 1, or many spans captured.

A transaction contains:

* The timestamp of the event
* A unique id, type, and name
* Data about the environment in which the event is recorded:
** Service - environment, framework, language, etc.
** Host - architecture, hostname, IP, etc.
** Process - args, PID, PPID, etc.
** URL - full, domain, port, query, etc.
** <<data-model-user,User>> - (if supplied) email, ID, username, etc.
* Other relevant information depending on the agent. Example: The JavaScript RUM agent captures transaction marks,
which are points in time relative to the start of the transaction with some label.

In addition, agents provide options for users to capture custom <<data-model-metadata, metadata>>.
Metadata can be indexed - <<data-model-labels,`labels`>>, or not-indexed - <<data-model-custom,`custom`>>.

Transactions are grouped by their `type` and `name` in the APM UI's
{kibana-ref}/transactions.html[Transaction overview].
If you're using a supported framework, APM agents will automatically handle the naming for you.
If you're not, or if you wish to override the default,
all agents have API methods to manually set the `type` and `name`.

* `type` should be a keyword of specific relevance in the service's domain,
e.g. `request`, `backgroundjob`, etc.
* `name` should be a generic designation of a transaction in the scope of a single service,
e.g. `GET /users/:id`, `UsersController#show`, etc.

TIP: Most agents limit keyword fields (e.g. `labels`) to 1024 characters,
non-keyword fields (e.g. `span.db.statement`) to 10,000 characters.

[float]
==== Data streams

Transactions are stored with spans in the following data streams:

include::./data-streams.asciidoc[tag=traces-data-streams]

See <<apm-data-streams>> to learn more.

[float]
==== Example transaction document

This example shows what transaction documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====
[source,json]
----
include::./data/elasticsearch/generated/transactions.json[]
----
====

[[data-model-errors]]
=== Errors

An error event contains at least
information about the original `exception` that occurred
or about a `log` created when the exception occurred.
For simplicity, errors are represented by a unique ID.

An Error contains:

* Both the captured `exception` and the captured `log` of an error can contain a `stack trace`,
which is helpful for debugging.
* The `culprit` of an error indicates where it originated.
* An error might relate to the <<data-model-transactions,transaction>> during which it happened,
via the `transaction.id`.
* Data about the environment in which the event is recorded:
** Service - environment, framework, language, etc.
** Host - architecture, hostname, IP, etc.
** Process - args, PID, PPID, etc.
** URL - full, domain, port, query, etc.
** <<data-model-user,User>> - (if supplied) email, ID, username, etc.

In addition, agents provide options for users to capture custom <<data-model-metadata,metadata>>.
Metadata can be indexed - <<data-model-labels,`labels`>>, or not-indexed - <<data-model-custom,`custom`>>.

TIP: Most agents limit keyword fields (e.g. `error.id`) to 1024 characters,
non-keyword fields (e.g. `error.exception.message`) to 10,000 characters.

Errors are stored in error indices.

[float]
==== Data streams

Errors are stored in the following data streams:

include::./data-streams.asciidoc[tag=logs-data-streams]

See <<apm-data-streams>> to learn more.

[float]
==== Example error document

This example shows what error documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====
[source,json]
----
include::./data/elasticsearch/generated/errors.json[]
----
====

[[data-model-metrics]]
=== Metrics

**Metrics** measure the state of a system by gathering information on a regular interval. There are two types of APM metrics:

* **System metrics**: Basic infrastructure and application metrics.
* **Calculated metrics**: Aggregated trace event metrics used to power visualizations in the {apm-app}.

[float]
==== System metrics

APM agents automatically pick up basic host-level metrics,
including system and process-level CPU and memory metrics.
Agent specific metrics are also available,
like {apm-java-ref-v}/metrics.html[JVM metrics] in the Java Agent,
and {apm-go-ref-v}/metrics.html[Go runtime] metrics in the Go Agent.

Infrastructure and application metrics are important sources of information when debugging production systems,
which is why we've made it easy to filter metrics for specific hosts or containers in the {kib} {kibana-ref}/metrics.html[metrics overview].

TIP: Most agents limit keyword fields to 1024 characters,
non-keyword fields (e.g. `system.memory.total`) to 10,000 characters.

Metrics are stored in metric indices.

For a full list of tracked metrics, see the relevant agent documentation:

* {apm-go-ref-v}/metrics.html[Go]
* {apm-java-ref-v}/metrics.html[Java]
* {apm-node-ref-v}/metrics.html[Node.js]
* {apm-py-ref-v}/metrics.html[Python]
* {apm-ruby-ref-v}/metrics.html[Ruby]

[float]
===== Example system metric document

This example shows what system metric documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====

This example contains JVM metrics produced by the {apm-java-agent}.
and contains two related metrics: `jvm.gc.time` and `jvm.gc.count`. These are accompanied by various fields describing
the environment in which the metrics were captured: service name, host name, Kubernetes pod UID, container ID, process ID, and more.
These fields make it possible to search and aggregate across various dimensions, such as by service, host, and Kubernetes pod.

[source,json]
----
include::./data/elasticsearch/metricset.json[]
----
====

[float]
==== Calculated metrics

APM agents and APM Server calculate metrics from trace events to power visualizations in the {apm-app}.

Calculated metrics are an implementation detail and while we aim for stability for these data models,
the dimensions and concrete limits for aggregations are subject to change within minor version updates.

These metrics are described below.

[float]
===== Breakdown metrics

To power the {apm-app-ref}/transactions.html[Time spent by span type] graph,
agents collect summarized metrics about the timings of spans and transactions,
broken down by span type.

*`span.self_time.count`* and *`span.self_time.sum.us`*::
+
--
These metrics measure the "self-time" for a span type, and optional subtype,
within a transaction group. Together these metrics can be used to calculate
the average duration and percentage of time spent on each type of operation
within a transaction group.

These metric documents can be identified by searching for `metricset.name: span_breakdown`.

You can filter and group by these dimensions:

* `transaction.name`: The name of the enclosing transaction group, for example `GET /`
* `transaction.type`: The type of the enclosing transaction, for example `request`
* `span.type`: The type of the span, for example `app`, `template` or `db`
* `span.subtype`: The sub-type of the span, for example `mysql` (optional)
--

[float]
===== Example breakdown metric document

This example shows what breakdown metric documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====

[source,json]
----
include::./data/elasticsearch/span_breakdown.json[]
----
====

[float]
===== Transaction metrics

To power {kibana-ref}/xpack-apm.html[{apm-app}] visualizations,
APM Server aggregates transaction events into latency distribution metrics.

*`transaction.duration.summary`* and *`transaction.duration.histogram`*::
+
--
These metrics represent the latency summary and latency distribution of transaction groups,
used to power transaction-oriented visualizations and analytics in Elastic APM.

These metric documents can be identified by searching for `metricset.name: transaction`.

You can filter and group by these dimensions (some of which are optional, for example `container.id`):

* `agent.name`: The name of the {apm-agent} that instrumented the transaction, for example `java`
* `cloud.account.id`: The cloud account id of the service that served the transaction
* `cloud.account.name`: The cloud account name of the service that served the transaction
* `cloud.availability_zone`: The cloud availability zone hosting the service instance that served the transaction
* `cloud.machine.type`: The cloud machine type or instance type of the service that served the transaction
* `cloud.project.id`: The cloud project identifier of the service that served the transaction
* `cloud.project.name`: The cloud project name of the service that served the transaction
* `cloud.provider`: The cloud provider hosting the service instance that served the transaction
* `cloud.region`: The cloud region hosting the service instance that served the transaction
* `cloud.service.name`: The cloud service name of the service that served the transaction
* `container.id`: The container ID of the service that served the transaction
* `event.outcome`: The outcome of the transaction, for example `success`
* `faas.coldstart`: Whether the _serverless_ service that served the transaction had a cold start
* `faas.id`: The unique identifier of the invoked serverless function
* `faas.name`: The name of the lambda function
* `faas.trigger.type`: The trigger type that the lambda function was executed by of the service that served the transaction
* `faas.version`: The version of the lambda function
* `host.hostname`: The detected hostname of the service that served the transaction
* `host.name`: The user-defined name of the host or the detected hostname of the service that served the transaction
* `host.os.platform`: The platform name of the service that served the transaction, for example `linux`
* `kubernetes.pod.name`: The name of the Kubernetes pod running the service that served the transaction
* `labels`: Key-value object containing string labels set globally by the APM agents.
* `metricset.interval`: A string with the aggregation interval the metricset represents.
* `numeric_labels`: Key-value object containing numeric labels set globally by the APM agents.
* `service.environment`: The environment of the service that served the transaction
* `service.language.name`: The language name of the service that served the transaction, for example `Go`
* `service.language.version`: The language version of the service that served the transaction
* `service.name`: The name of the service that served the transaction
* `service.node.name`: The name of the service instance that served the transaction
* `service.runtime.name`: The runtime name of the service that served the transaction, for example `jRuby`
* `service.runtime.version`: The runtime version that served the transaction
* `service.version`: The version of the service that served the transaction
* `transaction.name`: The name of the transaction, for example `GET /`
* `transaction.result`: The result of the transaction, for example `HTTP 2xx`
* `transaction.root`: A boolean flag indicating whether the transaction is the root of a trace
* `transaction.type`: The type of the transaction, for example `request`
--

The `@timestamp` field of these documents holds the start of the aggregation interval.

[float]
===== Example transaction document

This example shows what transaction documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====

[source,json]
----
include::./data/elasticsearch/transaction_metric.json[]
----
====

[float]
===== Service-transaction metrics

To power {kibana-ref}/xpack-apm.html[{apm-app}] visualizations,
APM Server aggregates transaction events into service-transaction metrics.
Service-transaction metrics are similar to transaction metrics, but they usually
have a much lower cardinality as they have significantly fewer dimensions.
The UI uses them when fewer details of the transactions are needed.

*`transaction.duration.summary`* and *`transaction.duration.histogram`*::
+
--
These metrics represent the latency summary and latency distribution of service transaction groups,
used to power service-oriented visualizations and analytics in Elastic APM.

These metric documents can be identified by searching for `metricset.name: service_transaction`.

You can filter and group by these dimensions:

* `agent.name`: The name of the {apm-agent} that instrumented the operation, for example `java`
* `labels`: Key-value object containing string labels set globally by the APM agents.
* `metricset.interval`: A string with the aggregation interval the metricset represents.
* `numeric_labels`: Key-value object containing numeric labels set globally by the APM agents.
* `service.environment`: The environment of the service that made the request
* `service.language.name`: The language name of the service that served the transaction, for example `Go`
* `service.name`: The name of the service that made the request
* `transaction.type`: The type of the enclosing transaction, for example `request`
--

The `@timestamp` field of these documents holds the start of the aggregation interval.

[float]
===== Example service-transaction document

This example shows what service-transaction documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====

[source,json]
----
include::./data/elasticsearch/service_transaction_metric.json[]
----
====

[float]
===== Service-destination metrics

To power {kibana-ref}/xpack-apm.html[{apm-app}] visualizations,
APM Server aggregates span events into service-destination metrics.

*`span.destination.service.response_time.count`* and *`span.destination.service.response_time.sum.us`*::
+
--
These metrics measure the count and total duration of requests from one service to another service.
These are used to calculate the throughput and latency of requests to backend services such as databases in
{kibana-ref}/service-maps.html[Service maps].

These metric documents can be identified by searching for `metricset.name: service_destination`.

You can filter and group by these dimensions:

* `agent.name`: The name of the {apm-agent} that instrumented the operation, for example `java`
* `event.outcome`: The outcome of the operation, for example `success`
* `labels`: Key-value object containing string labels set globally by the APM agents.
* `metricset.interval`: A string with the aggregation interval the metricset represents.
* `numeric_labels`: Key-value object containing numeric labels set globally by the APM agents.
* `service.environment`: The environment of the service that made the request
* `service.language.name`: The language name of the service that served the transaction, for example `Go`
* `service.name`: The name of the service that made the request
* `service.target.name`: The target service name, for example `customer_db`
* `service.target.type`: The target service type, for example `mysql`
* `span.destination.service.resource`: The destination service resource, for example `mysql`
* `span.name`: The name of the operation, for example `SELECT FROM table_name`.
--

The `@timestamp` field of these documents holds the start of the aggregation interval.

[float]
===== Example service-destination document

This example shows what service-destination documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====

[source,json]
----
include::./data/elasticsearch/service_destination_metric.json[]
----
====

[float]
===== Service-summary metrics

To power {kibana-ref}/xpack-apm.html[{apm-app}] visualizations,
APM Server aggregates transaction, error, log, and metric events into service-summary metrics.

These metric documents can be identified by searching for `metricset.name: service_summary`.

You can filter and group by these dimensions:

* `agent.name`: The name of the {apm-agent} that instrumented the operation, for example `java`
* `labels`: Key-value object containing string labels set globally by the APM agents.
* `metricset.interval`: A string with the aggregation interval the metricset represents.
* `numeric_labels`: Key-value object containing numeric labels set globally by the APM agents.
* `service.environment`: The environment of the service that made the request
* `service.language.name`: The language name of the service that served the transaction, for example `Go`
* `service.name`: The name of the service that made the request

The `@timestamp` field of these documents holds the start of the aggregation interval.

[float]
===== Example service-summary document

This example shows what service-summary documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====

[source,json]
----
include::./data/elasticsearch/service_summary_metric.json[]
----
====

[float]
==== Data streams

Metrics are stored in the following data streams:

include::./data-streams.asciidoc[tag=metrics-data-streams]

See <<apm-data-streams>> to learn more.

[float]
==== Aggregated metrics: limits and overflows

For all aggregated metrics, namely transaction, service-transaction, service-destination, and service-summary metrics,
there are limits on the number of unique groups tracked at any given time.

[float]
===== Limits

Note that all the below limits may change in the future with further improvements.

* For all the following metrics, they share a limit of 1000 services per GB of APM Server.
** For transaction metrics, there is an additional limit of 5000 total transaction groups per GB of APM Server,
and each service may only consume up to 10% of the transaction groups,
which is 500 transaction groups per service per GB of APM Server.
** For service-transaction metrics, there is an additional limit of 1000 total service transaction groups per GB of APM Server,
and each service may only consume up to 10% of the service transaction groups,
which is 100 service transaction groups per service per GB of APM Server.
** For service-destination metrics, there is an additional limit of a constant 10000 total service destination groups,
and each service may only consume up to 10% of the service destination groups,
which is 1000 service destination groups per service.
** For service-summary metrics, there is no additional limit.

In the above, a service is defined as a combination of `service.name`, `service.environment`, `service.language.name` and `agent.name`.

[float]
===== Overflows

When a dimension has a high cardinality and exceeds the limit, the metrics will be aggregated
under a dedicated overflow bucket.

For example, when `transaction.name` has a lot of unique values and reaches the limit
of unique transaction groups tracked, any transactions with new `transaction.name` will be aggregated under
`transaction.name`: `_other`.

Another example of how the transaction group limit may be reached is if `transaction.name` contains just a few unique values,
but the service is deployed on a lot of different hosts. As `host.name` is part of the aggregation key for transaction metrics,
the max transaction group limit is reached for a service that has 100 instances, 10 different transaction names, and
4 transaction results per transaction name when connected to an APM Server with 8GB of RAM.
Once this limit is reached, any new combinations of `transaction.name`, `transaction.result`, and
`host.name` for that service will be aggregated under `transaction.name`: `_other`.

This issue can be resolved by increasing memory available to APM Server, or by ensuring that the dimensions do not use values
that are based on parameters that can change. For example, user ids, product ids, order numbers, query parameters, etc.,
should be stripped away from the dimensions.

// This heading is linked to from the APM UI section in Kibana
[[data-model-metadata]]
=== Metadata

Metadata can enrich your events and make application performance monitoring even more useful.
Let's explore the different types of metadata that Elastic APM offers.

[float]
[[data-model-labels]]
==== Labels

Labels add *indexed* information to transactions, spans, and errors.
Indexed means the data is searchable and aggregatable in {es}.
Add additional key-value pairs to define multiple labels.

* Indexed: Yes
* {es} type: {ref}/object.html[object]
* {es} field: `labels`
* Applies to: <<data-model-transactions>> | <<data-model-spans>> | <<data-model-errors>>

Label values can be a string, boolean, or number, although some agents only support string values at this time.
Because labels for a given key, regardless of agent used, are stored in the same place in {es},
all label values of a given key must have the same data type.
Multiple data types per key will throw an exception, for example: `{foo: bar}` and `{foo: 42}` is not allowed.

IMPORTANT: Avoid defining too many user-specified labels.
Defining too many unique fields in an index is a condition that can lead to a
{ref}/mapping.html#mapping-limit-settings[mapping explosion].

[float]
===== Agent API reference

* Go: {apm-go-ref-v}/api.html#context-set-label[`SetLabel`]
* Java: {apm-java-ref-v}/public-api.html#api-transaction-add-tag[`setLabel`]
* .NET: {apm-dotnet-ref-v}/public-api.html#api-transaction-tags[`Labels`]
* Node.js: {apm-node-ref-v}/agent-api.html#apm-set-label[`setLabel`] | {apm-node-ref-v}/agent-api.html#apm-add-labels[`addLabels`]
* PHP: {apm-php-ref}/public-api.html#api-transaction-interface-set-label[`Transaction` `setLabel`] | {apm-php-ref}/public-api.html#api-span-interface-set-label[`Span` `setLabel`]
* Python: {apm-py-ref-v}/api.html#api-label[`elasticapm.label()`]
* Ruby:  {apm-ruby-ref-v}/api.html#api-agent-set-label[`set_label`]
* Rum: {apm-rum-ref-v}/agent-api.html#apm-add-labels[`addLabels`]

[float]
[[data-model-custom]]
==== Custom context

Custom context adds *non-indexed*,
custom contextual information to transactions and errors.
Non-indexed means the data is not searchable or aggregatable in {es},
and you cannot build dashboards on top of the data.
This also means you don't have to worry about {ref}/mapping.html#mapping-limit-settings[mapping explosions],
as these fields are not added to the mapping.

Non-indexed information is useful for providing contextual information to help you
quickly debug performance issues or errors.

* Indexed: No
* {es} type: {ref}/object.html[object]
* {es} fields: `transaction.custom` | `error.custom`
* Applies to: <<data-model-transactions>> | <<data-model-errors>>

IMPORTANT: Setting a circular object, a large object, or a non JSON serializable object can lead to errors.

[float]
===== Agent API reference

* Go: {apm-go-ref-v}/api.html#context-set-custom[`SetCustom`]
* iOS: _coming soon_
* Java: {apm-java-ref-v}/public-api.html#api-transaction-add-custom-context[`addCustomContext`]
* .NET: _coming soon_
* Node.js: {apm-node-ref-v}/agent-api.html#apm-set-custom-context[`setCustomContext`]
* PHP: _coming soon_
* Python: {apm-py-ref-v}/api.html#api-set-custom-context[`set_custom_context`]
* Ruby: {apm-ruby-ref-v}/api.html#api-agent-set-custom-context[`set_custom_context`]
* Rum: {apm-rum-ref-v}/agent-api.html#apm-set-custom-context[`setCustomContext`]

[float]
[[data-model-user]]
==== User context

User context adds *indexed* user information to transactions and errors.
Indexed means the data is searchable and aggregatable in {es}.

* Indexed: Yes
* {es} type: {ref}/keyword.html[keyword]
* {es} fields: `user.email` | `user.name` | `user.id`
* Applies to: <<data-model-transactions>> | <<data-model-errors>>

[float]
===== Agent API reference

* Go: {apm-go-ref-v}/api.html#context-set-username[`SetUsername`] | {apm-go-ref-v}/api.html#context-set-user-id[`SetUserID`] |
{apm-go-ref-v}/api.html#context-set-user-email[`SetUserEmail`]
* iOS: _coming soon_
* Java: {apm-java-ref-v}/public-api.html#api-transaction-set-user[`setUser`]
* .NET _coming soon_
* Node.js: {apm-node-ref-v}/agent-api.html#apm-set-user-context[`setUserContext`]
* PHP: _coming soon_
* Python: {apm-py-ref-v}/api.html#api-set-user-context[`set_user_context`]
* Ruby: {apm-ruby-ref-v}/api.html#api-agent-set-user[`set_user`]
* Rum: {apm-rum-ref-v}/agent-api.html#apm-set-user-context[`setUserContext`]
