// tag::go[]

1. Start a transaction with
{apm-go-ref}/api.html#tracer-api-start-transaction[`StartTransaction`] or a span with
{apm-go-ref}/api.html#transaction-start-span[`StartSpan`].

2. Get the active TraceContext.

3. Send the TraceContext to the receiving service.

Example:

[source,go]
----
transaction := apm.DefaultTracer.StartTransaction("GET /", "request") <1>
traceContext := transaction.TraceContext() <2>

// Send TraceContext to receiving service
traceparent := apmhttp.FormatTraceparentHeader(traceContext)) <3>
tracestate := traceContext.State.String()
----
<1> Start a transaction
<2> Get TraceContext from current Transaction
<3> Format the TraceContext or tracestate as a traceparent header.
// end::go[]

// ***************************************************
// ***************************************************

// tag::java[]

1. Start a transaction with {apm-java-ref}/public-api.html#api-start-transaction[`startTransaction`],
or a span with {apm-java-ref}/public-api.html#api-span-start-span[`startSpan`].

2. Inject the `traceparent` header into the request object with
{apm-java-ref}/public-api.html#api-transaction-inject-trace-headers[`injectTraceHeaders`]

Example of manually instrumenting an RPC framework:

[source,java]
----
// Hook into a callback provided by the RPC framework that is called on outgoing requests
public Response onOutgoingRequest(Request request) throws Exception {
  Span span = ElasticApm.currentSpan() <1>
          .startSpan("external", "http", null)
          .setName(request.getMethod() + " " + request.getHost());
  try (final Scope scope = transaction.activate()) {
      span.injectTraceHeaders((name, value) -> request.addHeader(name, value)); <2>
      return request.execute();
  } catch (Exception e) {
      span.captureException(e);
      throw e;
  } finally {
      span.end(); <3>
  }
}
----
<1> Create a span representing an external call
<2> Inject the `traceparent` header into the request object
<3> End the span

// end::java[]

// ***************************************************
// ***************************************************

// tag::net[]

1. Serialize the distributed tracing context of the active transaction or span with
{apm-dotnet-ref}/public-api.html#api-current-transaction[`CurrentTransaction`] or
{apm-dotnet-ref}/public-api.html#api-current-span[`CurrentSpan`].

2. Send the serialized context the receiving service.

Example:

[source,csharp]
----
string outgoingDistributedTracingData =
    (Agent.Tracer.CurrentSpan?.OutgoingDistributedTracingData
        ?? Agent.Tracer.CurrentTransaction?.OutgoingDistributedTracingData)?.SerializeToString();
// Now send `outgoingDistributedTracingData` to the receiving service
----

// end::net[]

// ***************************************************
// ***************************************************

// tag::node[]

1. Start a transaction with {apm-node-ref}/agent-api.html#apm-start-transaction[`apm.startTransaction()`],
or a span with {apm-node-ref}/agent-api.html#apm-start-span[`apm.startSpan()`].

2. Get the serialized `traceparent` string of the started transaction/span with
{apm-node-ref}/agent-api.html#apm-current-traceparent[`currentTraceparent`].

3. Encode the `traceparent` and send it to the receiving service inside your regular request.

Example using raw UDP to communicate between two services, A and B:

[source,js]
----
agent.startTransaction('my-service-a-transaction'); <1>
const traceparent = agent.currentTraceparent; <2>
sendMetadata(`traceparent: ${traceparent}\n`); <3>
----
<1> Start a transaction
<2> Get the current `traceparent`
<3> Send the `traceparent` as a header to service B.

// end::node[]

// ***************************************************
// ***************************************************

// tag::php[]

1. On the client side (i.e., the side sending the request) get the current distributed tracing context.

2. Serialize the current distributed tracing context to a format supported by the request's transport and send it to the server side (i.e., the side receiving the request).

Example:

[source,php]
----
$distDataAsString = ElasticApm::getSerializedCurrentDistributedTracingData(); <1>
----
<1> Get the current distributed tracing data serialized as string

// end::php[]

// ***************************************************
// ***************************************************

// tag::python[]

1. Start a transaction with {apm-py-ref}/api.html#client-api-begin-transaction[`begin_transaction()`].

2. Get the `trace_parent` of the active transaction.

3. Send the `trace_parent` to the receiving service.

Example:

[source,python]
----
client.begin_transaction('new-transaction')<1>

elasticapm.get_trace_parent_header('new-transaction') <2>

# Send `trace_parent_str` to another service
----
<1> Start a new transaction
<2> Return the string representation of the current transaction's TraceParent object
// end::python[]

// ***************************************************
// ***************************************************

// tag::ruby[]

1. Start a span with {apm-ruby-ref}/api.html#api-agent-with_span[`with_span`].

2. Get the active `TraceContext`.

3. Send the `TraceContext` to the receiving service.

[source,ruby]
----
ElasticAPM.with_span "Name" do |span| <1>
  header = span.trace_context.traceparent.to_header <2>
  # send the TraceContext Header to a receiving service...
end
----
<1> Start a span
<2> Get the `TraceContext`

// end::ruby[]
