// tag::go[]

// end::go[]

// ***************************************************
// ***************************************************

// tag::java[]

1. Start a transaction with {}/public-api.html#api-start-transaction[`startTransaction`],
or a span with {}/public-api.html#api-span-start-span[`startSpan`].

2. Inject the `traceparent` header into the request object with
{}/public-api.html#api-transaction-inject-trace-headers[`injectTraceHeaders`]

Example of manually instrumenting an RPC framework:

[source,java]
----
// Hook into a callback provided by the RPC framework that is called on outgoing requests
public Response onOutgoingRequest(Request request) throws Exception {
  Span span = ElasticApm.currentSpan() <1>
          .startSpan("external", "http", null)
          .setName(request.getMethod() + " " + request.getHost());
  try (final Scope scope = transaction.activate()) {
      span.injectTraceHeaders((name, value) -> request.addHeader(name, value)); <2>
      return request.execute();
  } catch (Exception e) {
      span.captureException(e);
      throw e;
  } finally {
      span.end(); <3>
  }
}
----
<1> Create a span representing an external call
<2> Inject the `traceparent` header into the request object
<3> End the span

// end::java[]

// ***************************************************
// ***************************************************

// tag::net[]

// end::net[]

// ***************************************************
// ***************************************************

// tag::node[]

1. Start a transaction with {}apm-start-transaction[`apm.startTransaction()`],
or a span with {}apm-start-span[`apm.startSpan()`].

2. Get the serialized `traceparent` string of the started transaction/span with {}apm-current-traceparent[``].

3. Encode the `traceparent` and send it to the receiving service inside your regular request.

Example using raw UDP to communicate between two services, A and B:

[source,js]
----
agent.startTransaction('my-service-a-transaction'); <1>
const traceparent = agent.currentTraceparent; <2>
sendMetadata(`traceparent: ${traceparent}\n`); <3>
----
<1> Start a transaction
<2> Get the current `traceparent`
<3> Send the `traceparent` as a header to service B.

// end::node[]

// ***************************************************
// ***************************************************

// tag::python[]


// end::python[]

// ***************************************************
// ***************************************************

// tag::ruby[]

// end::ruby[]

// ***************************************************
// ***************************************************

// tag::rum[]

// end::rum[]
