[[open-telemetry]]
== OpenTelemetry integration

:ot-what:       https://opentelemetry.io/docs/concepts/what-is-opentelemetry/
:ot-spec:       https://github.com/open-telemetry/opentelemetry-specification/blob/master/README.md
:ot-grpc:       https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlpgrpc
:ot-http:       https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlphttp
:ot-contrib:    https://github.com/open-telemetry/opentelemetry-collector-contrib
:ot-resource:   {ot-contrib}/tree/main/processor/resourceprocessor
:ot-attr:       {ot-contrib}/blob/main/processor/attributesprocessor
:ot-repo:       https://github.com/open-telemetry/opentelemetry-collector
:ot-pipelines:  https://opentelemetry.io/docs/collector/configuration/#service
:ot-extension:  {ot-repo}/blob/master/extension/README.md
:ot-scaling:    {ot-repo}/blob/master/docs/performance.md

:ot-collector:  https://opentelemetry.io/docs/collector/getting-started/
:ot-dockerhub:  https://hub.docker.com/r/otel/opentelemetry-collector-contrib

{ot-what}[OpenTelemetry] is a set of APIs, SDKs, tooling, and integrations that enable the capture and management of
telemetry data from your services and applications. For more information about the
OpenTelemetry project, see the {ot-spec}[spec].

[float]
== OpenTelemetry and the {stack}

image::./images/apm-otel-architecture.png[Architecture of Elastic APM with OpenTelemetry]

Elastic integrates with OpenTelemetry, allowing you to reuse your existing instrumentation
to easily send observability data to the {stack}.
There are four ways to integrate OpenTelemetry with the {stack}:

**Elastic OpenTelemetry Bridge**

To unlock the full power of the {stack}, use the Elastic APM OpenTelemetry Bridge,
currently supported by the Java, Python, and Node.js agents.

The Elastic OpenTelemetry bridge translates calls to the OpenTelemetry API to Elastic APM API calls.
This allows you to reuse your existing instrumentation to create Elastic APM transactions and spans.

<<open-telemetry-with-elastic,Get started>>.

**OpenTelemetry agent**

The {stack} natively supports the OpenTelemetry protocol (OTLP).
This means trace data and metrics collected from your applications and infrastructure can
be sent directly to the {stack}.

<<instrument-apps-otel,Get started>>.

**OpenTelemetry collector**

The {stack} natively supports the OpenTelemetry protocol (OTLP).
This means trace data and metrics collected from your applications and infrastructure can
be sent directly to the {stack}.

<<connect-open-telemetry-collector,Get started>>.

**Lambda collector exporter**

AWS Lambda functions can be instrumented with OpenTelemetry and monitored with Elastic {observability}.

<<open-telemetry-aws-lambda,Get started>>.

include::./otel-with-elastic.asciidoc[]

include::./otel-direct.asciidoc[]

include::./otel-lambda.asciidoc[]

include::./otel-metrics.asciidoc[]

include::./otel-limitations.asciidoc[]

include::./otel-attrs.asciidoc[]


// IGNORE BELOW THIS LINE
// ****************************************************************************************************************************
// This is used in the obs-docs repo and will be removed in a future PR

// tag::otel-get-started[]
To export traces and metrics to APM Server, instrument your services and applications
with the OpenTelemetry API, SDK, or both. For example, if you are a Java developer, you need to instrument your Java app with the
https://github.com/open-telemetry/opentelemetry-java-instrumentation[OpenTelemetry agent for Java].
See the https://opentelemetry.io/docs/instrumentation/[OpenTelemetry Instrumentation guides] to download the
OpenTelemetry Agent or SDK for your language.

Define the following environment variables to configure the OpenTelemetry agent and enable communication with Elastic APM.

[source,bash]
----
export OTEL_RESOURCE_ATTRIBUTES=service.name=checkoutService,service.version=1.1,deployment.environment=production
export OTEL_EXPORTER_OTLP_ENDPOINT=https://apm_server_url:8200
export OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer an_apm_secret_token"
export OTEL_METRICS_EXPORTER="otlp" \
export OTEL_LOGS_EXPORTER="otlp" \
java -javaagent:/path/to/opentelemetry-javaagent-all.jar \
     -classpath lib/*:classes/ \
     com.mycompany.checkout.CheckoutServiceServer
----

|===

| `OTEL_RESOURCE_ATTRIBUTES` | Fields that describe the service and the environment that the service runs in. See
{apm-guide-ref}/open-telemetry.html#open-telemetry-resource-attributes[Resource attributes] for more information.

| `OTEL_EXPORTER_OTLP_ENDPOINT` | APM Server URL. The host and port that APM Server listens for events on.

| `OTEL_EXPORTER_OTLP_HEADERS` | Authorization header that includes the Elastic APM Secret token or API key: `"Authorization=Bearer an_apm_secret_token"` or `"Authorization=ApiKey an_api_key"`.

For information on how to format an API key, see
{apm-guide-ref}/api-key.html[API keys].

Please note the required space between `Bearer` and `an_apm_secret_token`, and `APIKey` and `an_api_key`.

| `OTEL_EXPORTER_OTLP_CERTIFICATE` | The trusted certificate used to verify the TLS credentials of the client. (optional)

|===
// end::otel-get-started[]