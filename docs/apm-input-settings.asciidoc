// tag::NAME-setting[]
|
[id="input-{input-type}-NAME-setting"]
`NAME`

| (TYPE) DESCRIPTION.

*Default:* `DEFAULT`

OPTIONAL INFO AND EXAMPLE
// end::NAME-setting[]

// =============================================================================

// These settings are shared across the docs for multiple inputs. Copy and use
// the above template to add a shared setting. Replace values in all caps.
// Use an include statement // to pull the tagged region into your source file:
// include::input-shared-settings.asciidoc[tag=NAME-setting]

// tag::host-setting[]
|
[id="input-{input-type}-host-setting"]
Host

| (text) Defines the host and port the server is listening on.

Use `"unix:/path/to.sock"` to listen on a Unix domain socket.

*Default:* `127.0.0.1:8200`
// end::host-setting[]

// =============================================================================

// tag::url-setting[]
|
[id="input-{input-type}-url-setting"]
URL

| The publicly reachable server URL. For deployments on {ecloud} or ECK, the default is unchangeable.
// end::url-setting[]

// =============================================================================

// tag::max_header_bytes-setting[]
|
[id="input-{input-type}-max_header_bytes-setting"]
Maximum size of a request's header

| (int) Maximum permitted size of a request's header accepted by the server to be processed (in Bytes).

*Default:* `1048576` Bytes
// end::max_header_bytes-setting[]

// =============================================================================

// tag::idle_timeout-setting[]
|
[id="input-{input-type}-idle_timeout-setting"]
Idle time before underlying connection is closed

| (text) Maximum amount of time to wait for the next incoming request before underlying connection is closed.

*Default:* `45s` (45 seconds)
// end::idle_timeout-setting[]

// =============================================================================

// tag::read_timeout-setting[]
|
[id="input-{input-type}-read_timeout-setting"]
Maximum duration for reading an entire request

| (text) Maximum permitted duration for reading an entire request.

*Default:* `3600s` (3600 seconds)
// end::read_timeout-setting[]

// =============================================================================

// tag::shutdown_timeout-setting[]
|
[id="input-{input-type}-shutdown_timeout-setting"]
Maximum duration before releasing resources when shutting down

| (text) Maximum duration in seconds before releasing resources when shutting down the server.

*Default:* `30s` (30 seconds)
// end::shutdown_timeout-setting[]

// =============================================================================

// tag::write_timeout-setting[]
|
[id="input-{input-type}-write_timeout-setting"]
Maximum duration for writing a response

| (text) Maximum permitted duration for writing a response.

*Default:* `30s` (30 seconds)
// end::write_timeout-setting[]

// =============================================================================

// tag::max_event_bytes-setting[]
|
[id="input-{input-type}-max_event_bytes-setting"]
Maximum size per event

| (int) Maximum permitted size of an event accepted by the server to be processed (in Bytes).

*Default:* `307200` Bytes
// end::max_event_bytes-setting[]

// =============================================================================

// tag::max_connections-setting[]
|
[id="input-{input-type}-max_connections-setting"]
Simultaneously accepted connections

| (int) Maximum number of TCP connections to accept simultaneously. `0` means unlimited.

*Default:* `0` (unlimited)
// end::max_connections-setting[]

// =============================================================================

// tag::response_headers-setting[]
|
[id="input-{input-type}-response_headers-setting"]
Custom HTTP response headers

| (text) Custom HTTP headers to add to HTTP responses. Useful for security policy compliance.

// end::response_headers-setting[]

// =============================================================================

// tag::capture_personal_data-setting[]
|
[id="input-{input-type}-capture_personal_data-setting"]
Capture personal data

| (bool) Capture personal data such as IP or User Agent.
If true, APM Server captures the IP of the instrumented service and its User Agent if any.

*Default:* `true`
// end::capture_personal_data-setting[]

// =============================================================================

// tag::default_service_environment-setting[]
|
[id="input-{input-type}-default_service_environment-setting"]
Default Service Environment

| (text) The default service environment for events without a defined service environment.

*Default:* none

// end::default_service_environment-setting[]

// =============================================================================

// tag::golang_xpvar-setting[]
|
[id="input-{input-type}-golang_xpvar-setting"]
Enable APM Server Golang expvar support

| (bool) When set to `true`, the server exposes https://golang.org/pkg/expvar/[Golang expvar] under `/debug/vars`.

*Default:* `false`

// end::golang_xpvar-setting[]

// =============================================================================

// tag::enable_rum-setting[]
|
[id="input-{input-type}-enable_rum-setting"]
Enable RUM

| (bool) Enables and disables Real User Monitoring (RUM).

*Default:* `false` (disabled)
// end::enable_rum-setting[]

// =============================================================================

// tag::rum_allow_origins-setting[]
|
[id="input-{input-type}-rum_allow_origins-setting"]
Allowed Origins

| (text) A list of permitted origins for RUM support.
User-agents send an Origin header that will be validated against this list.
This is done automatically by modern browsers as part of the https://www.w3.org/TR/cors/[CORS specification].
An origin is made of a protocol scheme, host and port, without the URL path.

*Default:* `["*"]` (allows everything)
// end::rum_allow_origins-setting[]

// =============================================================================

// tag::rum_allow_headers-setting[]
|
[id="input-{input-type}-rum_allow_headers-setting"]
Access-Control-Allow-Headers

| (text) By default, HTTP requests made from the RUM agent to the APM integration are limited in the HTTP headers they are allowed to have.
If any other headers are added, the request will be rejected by the browser due to Cross-Origin Resource Sharing (CORS) restrictions.
If you need to add extra headers to these requests, use this configuration to allow additional headers.

The default list of values includes `"Content-Type"`, `"Content-Encoding"`, and `"Accept"`.
Configured values are appended to the default list and used as the value for the
`Access-Control-Allow-Headers` header.
// end::rum_allow_headers-setting[]

// =============================================================================

// tag::rum_response_headers-setting[]
|
[id="input-{input-type}-rum_response_headers-setting"]
Custom HTTP response headers

| (text) Custom HTTP headers to add to RUM responses. For example, for security policy compliance. Headers set here are in addition to those set in the "Custom HTTP response headers", but only apply to RUM responses.

*Default:* none
// end::rum_response_headers-setting[]

// =============================================================================

// tag::rum_library_frame_pattern-setting[]
|
[id="input-{input-type}-rum_library_frame_pattern-setting"]
Library Frame Pattern

| (text) RegExp to be matched against a stack trace frame's `file_name` and `abs_path` attributes.
If the RegExp matches, the stack trace frame is considered to be a library frame.
When source mapping is applied, the `error.culprit` is set to reflect the _function_ and the _filename_
of the first non-library frame.
This aims to provide an entry point for identifying issues.

*Default:* `"node_modules\|bower_components\|~"`
// end::rum_library_frame_pattern-setting[]

// =============================================================================

// tag::rum_exclude_from_grouping-setting[]
|
[id="input-{input-type}-rum_exclude_from_grouping-setting"]
Exclude from grouping

| (text) RegExp to be matched against a stack trace frame's `file_name`.
If the RegExp matches, the stack trace frame is excluded from being used for calculating error groups.

*Default:* `"^/webpack"` (excludes stack trace frames that have a filename starting with `/webpack`)
// end::rum_exclude_from_grouping-setting[]

// =============================================================================

// tag::tls_enabled-setting[]
|
[id="input-{input-type}-tls_enabled-setting"]
Enable TLS

| (bool) Enable TLS.

*Default:* `false`
// end::tls_enabled-setting[]

// =============================================================================

// tag::tls_certificate-setting[]
|
[id="input-{input-type}-tls_certificate-setting"]
File path to server certificate

| (text) The path to the file containing the certificate for server authentication. Required when TLS is enabled.

*Default:* none
// end::tls_certificate-setting[]

// =============================================================================

// tag::tls_key-setting[]
|
[id="input-{input-type}-tls_key-setting"]
File path to server certificate key

| (text) The path to the file containing the Server certificate key. Required when TLS is enabled.

*Default:* none
// end::tls_key-setting[]

// =============================================================================

// tag::tls_supported_protocols-setting[]
|
[id="input-{input-type}-tls_supported_protocols-setting"]
Supported protocol versions

| (array) A list of allowed TLS protocol versions.

*Default:* `["TLSv1.1", "TLSv1.2", "TLSv1.3"]`
// end::tls_supported_protocols-setting[]

// =============================================================================

// tag::tls_cipher_suites-setting[]
|
[id="input-{input-type}-tls_cipher_suites-setting"]
Cipher suites for TLS connections

| (text) The list of cipher suites to use. The first entry has the highest priority.
If this option is omitted, the Go crypto library’s https://golang.org/pkg/crypto/tls/[default suites] are used (recommended).
Note that TLS 1.3 cipher suites are not individually configurable in Go, so they are not included in this list.
// end::tls_cipher_suites-setting[]

// =============================================================================

// tag::tls_curve_types-setting[]
|
[id="input-{input-type}-tls_curve_types-setting"]
Curve types for ECDHE based cipher suites

| (text) The list of curve types for ECDHE (Elliptic Curve Diffie-Hellman ephemeral key exchange).

*Default:* none
// end::tls_curve_types-setting[]

// =============================================================================

// tag::api_key_enabled-setting[]
|
[id="input-{input-type}-api_key_enabled-setting"]
API key for agent authentication

| (bool) Enable or disable API key authorization between APM Server and APM agents.

*Default:* `false` (disabled)
// end::api_key_enabled-setting[]

// =============================================================================

// tag::api_key_limit-setting[]
|
[id="input-{input-type}-api_key_limit-setting"]
Number of keys

| (int) Each unique API key triggers one request to {es}.
This setting restricts the number of unique API keys are allowed per minute.
The minimum value for this setting should be the number of API keys configured in your monitored services.

*Default:* `100`
// end::api_key_limit-setting[]

// =============================================================================

// tag::secret_token-setting[]
|
[id="input-{input-type}-secret_token-setting"]
Secret token

| (text) Authorization token for sending APM data.
The same token must also be set in each {apm-agent}.
This token is not used for RUM endpoints.

*Default:* No secret token set
// end::secret_token-setting[]

// =============================================================================

// tag::anonymous_enabled-setting[]
|
[id="input-{input-type}-anonymous_enabled-setting"]
Anonymous Agent access

| (bool) Enable or disable anonymous authentication. RUM agents do not support authentication, so disabling anonymous access will effectively disable RUM agents.

*Default:* `true` (enabled)
// end::anonymous_enabled-setting[]

// =============================================================================

// tag::anonymous_allow_agent-setting[]
|
[id="input-{input-type}-anonymous_allow_agent-setting"]
Allowed Anonymous agents

| (array) A list of permitted {apm-agent} names for anonymous authentication.
Names in this list must match the agent's `agent.name`.

*Default:* `[rum-js, js-base, iOS/swift]` (only RUM and iOS/Swift agent events are accepted)
// end::anonymous_allow_agent-setting[]

// =============================================================================

// tag::anonymous_allow_service-setting[]
|
[id="input-{input-type}-anonymous_allow_service-setting"]
Allowed Anonymous services

| (array) A list of permitted service names for anonymous authentication.
Names in this list must match the agent's `service.name`.
This can be used to limit the number of service-specific indices or data streams created.

*Default:* Not set (any service name is accepted)
// end::anonymous_allow_service-setting[]

// =============================================================================

// tag::anonymous_rate_limit_ip_limit-setting[]
|
[id="input-{input-type}-anonymous_rate_limit_ip_limit-setting"]
Anonymous Rate limit (IP limit)

| (int) The number of unique IP addresses to track in a least recently used (LRU) cache.
IP addresses in the cache will be rate limited according to the `anonymous_rate_limit_event_limit` setting.
Consider increasing this default if your application has many concurrent clients.

*Default:* `10000`
// end::anonymous_rate_limit_ip_limit-setting[]

// =============================================================================

// tag::anonymous_rate_limit_event_limit-setting[]
|
[id="input-{input-type}-anonymous_rate_limit_event_limit-setting"]
Anonymous Event rate limit (event limit)

| (int) The maximum amount of events allowed to be sent to the APM Server anonymous auth endpoint per IP per second.

*Default:* `10`
// end::anonymous_rate_limit_event_limit-setting[]

// =============================================================================

// tag::tail_sampling_enabled-setting[]
|
[id="input-{input-type}-tail_sampling_enabled"]
Enable Tail-based sampling

| (bool) Enable and disable tail-based sampling.

*Default:* `false`
// end::tail_sampling_enabled-setting[]

// =============================================================================

// tag::tail_sampling_interval-setting[]
|
[id="input-{input-type}-tail_sampling_interval"]
Interval

| (duration) Synchronization interval for multiple APM Servers.
Should be in the order of tens of seconds or low minutes.

*Default:* `1m`
// end::tail_sampling_interval-setting[]

// =============================================================================

// tag::tail_sampling_policies-setting[]
|
[id="input-{input-type}-tail_sampling_policies"]
Policies

| (`[]policy`) Criteria used to match a root transaction to a sample rate.
Order is important; the first policy on the list that an event matches is the winner.
Each policy list must conclude with a default policy that only specifies a sample rate.
The default policy is used to catch remaining trace events that don’t match a stricter policy.

Required when tail-based sampling is enabled.

// end::tail_sampling_policies-setting[]

// =============================================================================

// tag::sample_rate-setting[]
|
[id="input-{input-type}-sample_rate"]
Sample rate

`sample_rate`

| (int) The sample rate to apply to trace events matching this policy.
Required in each policy.

// end::sample_rate-setting[]

// =============================================================================

// tag::trace_name-setting[]
|
[id="input-{input-type}-trace_name"]
Trace name

`trace.name`

| (string) The trace name for events to match a policy.

// end::trace_name-setting[]

// =============================================================================

// tag::trace_outcome-setting[]
|
[id="input-{input-type}-trace_outcome"]
Trace outcome

`trace.outcome`

| (string) The trace outcome for events to match a policy.
Trace outcome can be `success`, `failure`, or `unknown`.

// end::trace_outcome-setting[]

// =============================================================================

// tag::service_name-setting[]
|
[id="input-{input-type}-service_name"]
Service name

`service.name`

| (string) The service name for events to match a policy.

// end::service_name-setting[]

// =============================================================================

// tag::service_env-setting[]
|
[id="input-{input-type}-service_env"]
Service Environment

`service.environment`

| (string) The service environment for events to match a policy.

// end::service_env-setting[]

// =============================================================================
