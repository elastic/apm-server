[[agent-server-ssl]]
=== SSL input settings

You can specify the following options in the `apm-server.ssl` section of the +{beatname_lc}.yml+ config file.
They apply to SSL/TLS communication between the APM Server and APM Agents.

[float]
==== `enabled`

The `enabled` setting can be used to enable the ssl configuration by setting
it to `true`. The default value is `false`.

[float]
==== `certificate`

The path to the file containing the certificate for Server authentication.
Required if `apm-server.ssl.enabled` is `true`.

[float]
==== `key`

The path to the file containing the Server certificate key.
Required if `apm-server.ssl.enabled` is `true`.

[float]
==== `key_passphrase`

The passphrase used to decrypt an encrypted key stored in the configured `key` file.
We recommend saving the `key_passphrase` in the APM Server <<keystore>>.

[float]
==== `supported_protocols`

This setting is a list of allowed protocol versions:
`SSLv3`, `TLSv1.0`, `TLSv1.1`, `TLSv1.2` and `TLSv1.3`. We do not recommend using `SSLv3` or `TLSv1.0`.
The default value is `[TLSv1.1, TLSv1.2, TLSv1.3]`.

[float]
==== `cipher_suites`

The list of cipher suites to use. The first entry has the highest priority.
If this option is omitted, the Go crypto library's https://golang.org/pkg/crypto/tls/[default suites]
are used (recommended). Note that TLS 1.3 cipher suites are not
individually configurable in Go, so they are not included in this list.

include::{libbeat-dir}/shared-ssl-config.asciidoc[tag=cipher_suites]

[float]
==== `curve_types`

The list of curve types for ECDHE (Elliptic Curve Diffie-Hellman ephemeral key exchange).

[float]
==== `certificate_authorities`

The list of root certificates for verifying client certificates.
If `certificate_authorities` is empty or not set, the trusted certificate authorities of the host system are used.
If `certificate_authorities` is set, `client_authentication` will be automatically set to `required`.
Sending client certificates is currently only supported by the RUM agent through the browser
and by the Jaeger agent.

[float]
==== `client_authentication`

This configures what types of client authentication are supported. The valid options
are `none`, `optional`, and `required`. The default is `none`.
If `certificate_authorities` has been specified, this setting will automatically change to `required`.
This option only needs to be configured when the agent is expected to provide a client certificate.
Sending client certificates is currently only supported by the RUM agent through the browser
and by the Jaeger agent.

* `none` - Disables client authentication.
* `optional` - When a client certificate is given, the server will verify it.
* `required` - Requires clients to provide a valid certificate.
