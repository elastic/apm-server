[[secure-agent-communication]]
== Secure communication with APM agents

Communication between APM agents and {agent} can be both encrypted and authenticated.
It is strongly recommended to use both TLS encryption and authentication as secrets are sent as plain text.

* <<agent-tls,TLS encryption>>
* <<api-key,API key authentication>>
* <<secret-token,Secret token authentication>>

As soon as an authenticated communication is enabled,
requests without a valid token or API key will be denied.
If both API keys and a secret token are enabled, APM agents can choose whichever mechanism they support.

In some use-cases, like when an {apm-agent} is running on the client side,
authentication is not possible. See <<anonymous-auth>> for more information.

[[agent-tls]]
=== {apm-agent} TLS communication

TLS is disabled by default.
When TLS is enabled for APM Server inbound communication, agents will verify the identity
of the APM Server by authenticating its certificate.

Enable TLS in the <<input-apm,APM integration settings>>; a certificate and corresponding private key are required.
The certificate and private key can either be issued by a trusted certificate authority (CA)
or be <<agent-self-sign,self-signed>>.

[float]
[[agent-self-sign]]
=== Use a self-signed certificate

[float]
[[agent-self-sign-1]]
==== Step 1: Create a self-signed certificate

The {es} distribution offers the `certutil` tool for the creation of self-signed certificates:

1. Create a CA: `./bin/elasticsearch-certutil ca --pem`. You'll be prompted to enter the desired
location of the output zip archive containing the certificate and the private key.
2. Extract the contents of the CA archive.
3. Create the self-signed certificate: `./bin/elasticsearch-certutil cert --ca-cert
<path-to-ca-crt>/ca.crt --ca-key <path-to-ca-key>/ca.key --pem --name localhost`
4. Extract the certificate and key from the resulted zip archive.

[float]
[[agent-self-sign-2]]
==== Step 2: Configure the APM integration

Configure the APM integration to point to the extracted certificate and key.

[float]
[[agent-self-sign-3]]
==== Step 3: Configure APM agents

When the APM server uses a certificate that is not chained to a publicly-trusted certificate
(e.g. self-signed), additional configuration is required in the {apm-agent}:

* *Go agent*: certificate pinning through {apm-go-ref}/configuration.html#config-server-cert[`ELASTIC_APM_SERVER_CERT`]
* *Python agent*: certificate pinning through {apm-py-ref}/configuration.html#config-server-cert[`server_cert`]
* *Ruby agent*: certificate pinning through {apm-ruby-ref}/configuration.html#config-ssl-ca-cert[`server_ca_cert`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-server-cert[`ServerCert`]
* *Node.js agent*: custom CA setting through {apm-node-ref}/configuration.html#server-ca-cert-file[`serverCaCertFile`]
* *Java agent*: adding the certificate to the JVM `trustStore`.
See {apm-java-ref}/ssl-configuration.html#ssl-server-authentication[APM Server authentication] for more details.

We do not recommend disabling {apm-agent} verification of the server's certificate, but it is possible:

* *Go agent*: {apm-go-ref}/configuration.html#config-verify-server-cert[`ELASTIC_APM_VERIFY_SERVER_CERT`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-verify-server-cert[`VerifyServerCert`]
* *Java agent*: {apm-java-ref}/config-reporter.html#config-verify-server-cert[`verify_server_cert`]
* *PHP agent*: {apm-php-ref-v}/configuration-reference.html#config-verify-server-cert[`verify_server_cert`]
* *Python agent*: {apm-py-ref}/configuration.html#config-verify-server-cert[`verify_server_cert`]
* *Ruby agent*: {apm-ruby-ref}/configuration.html#config-verify-server-cert[`verify_server_cert`]
* *Node.js agent*: {apm-node-ref}/configuration.html#validate-server-cert[`verifyServerCert`]

[float]
[[agent-client-cert]]
=== Client certificate authentication

APM Server does not require agents to provide a certificate for authentication,
and there is no dedicated support for SSL/TLS client certificate authentication in Elasticâ€™s backend agents.

[[api-key]]
=== API keys

IMPORTANT: API keys are sent as plain-text,
so they only provide security when used in combination with <<agent-tls,TLS>>.

Enable API key authorization in the <<input-apm,APM integration settings>>.
When enabled, API keys are used to authorize requests to the APM Server.

You can assign one or more unique privileges to each API key:

* *Agent configuration* (`config_agent:read`): Required for agents to read
{kibana-ref}/agent-configuration.html[Agent configuration remotely].
* *Ingest* (`event:write`): Required for ingesting agent events.

To secure the communication between APM Agents and the APM Server with API keys,
make sure <<agent-tls,TLS>> is enabled, then complete these steps:

. <<enable-api-key,Enable API keys>>
. <<create-api-key-user,Create an API key user>>
. <<create-an-api-key,Create an API key in {kib}>>
. <<agent-api-key,Set the API key in your APM agents>>

[[enable-api-key]]
[float]
=== Enable API keys

Enable API key authorization in the <<input-apm,APM integration settings>>.
You should also set a limit on the number of unique API keys that APM Server allows per minute;
this value should be the number of unique API keys configured in your monitored services.

[[create-api-key-user]]
[float]
=== Create an API key user in {kib}

API keys can only have the same or lower access rights than the user that creates them.
Instead of using a superuser account to create API keys, you can create a role with the minimum required
privileges.

The user creating an {apm-agent} API key must have at least the `manage_own_api_key` cluster privilege
and the APM application-level privileges that it wishes to grant.
In addition, when creating an API key from the {apm-app},
you'll need the appropriate {kib} Space and Feature privileges.

The example below uses the {kib} {kibana-ref}/role-management-api.html[role management API]
to create a role named `apm_agent_key_role`.

[source,js]
----
POST /_security/role/apm_agent_key_role
{
   "cluster": [ "manage_own_api_key" ],
   "applications": [
      {
         "application":"apm",
         "privileges":[
            "event:write",
            "config_agent:read"
         ],
         "resources":[ "*" ]
      },
      {
         "application":"kibana-.kibana",
         "privileges":[ "feature_apm.all" ],
         "resources":[ "space:default" ] <1>
      }
   ]
}
----
<1> This example assigns privileges for the default space.

Assign the newly created `apm_agent_key_role` role to any user that wishes to create {apm-agent} API keys.

[[create-an-api-key]]
[float]
=== Create an API key in the {apm-app}

The {apm-app} has a built-in workflow that you can use to easily create and view {apm-agent} API keys.
Only API keys created in the {apm-app} will show up here.

Using a superuser account, or a user with the role created in the previous step,
open {kib} and navigate to **{observability}** > **APM** > **Settings** > **Agent keys**.
Enter a name for your API key and select at least one privilege.

For example, to create an API key that can be used to ingest APM events
and read agent central configuration, select `config_agent:read` and `event:write`.

// lint ignore apm-agent
Click **Create APM Agent key** and copy the Base64 encoded API key.
You will need this for the next step, and you will not be able to view it again.

[role="screenshot"]
image::images/apm-ui-api-key.png[{apm-app} API key]

[[agent-api-key]]
[float]
=== Set the API key in your APM agents

You can now apply your newly created API keys in the configuration of each of your APM agents.
See the relevant agent documentation for additional information:

// Not relevant for RUM and iOS
* *Go agent*: {apm-go-ref}/configuration.html#config-api-key[`ELASTIC_APM_API_KEY`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-api-key[`ApiKey`]
* *Java agent*: {apm-java-ref}/config-reporter.html#config-api-key[`api_key`]
* *Node.js agent*: {apm-node-ref}/configuration.html#api-key[`apiKey`]
* *PHP agent*: {apm-php-ref-v}/configuration-reference.html#config-api-key[`api_key`]
* *Python agent*: {apm-py-ref}/configuration.html#config-api-key[`api_key`]
* *Ruby agent*: {apm-ruby-ref}/configuration.html#config-api-key[`api_key`]

[[secret-token]]
=== Secret token

IMPORTANT: Secret tokens are sent as plain-text,
so they only provide security when used in combination with <<agent-tls,TLS>>.

Define a secret token in the <<input-apm,APM integration settings>>.
When defined, secret tokens are used to authorize requests to the APM Server.
Both the {apm-agent} and APM integration must be configured with the same secret token for the request to be accepted.

To secure the communication between APM agents and the APM Server with a secret token:

. Make sure <<agent-tls,TLS>> is enabled
. <<create-secret-token,Create a secret token>>
. <<configure-secret-token,Configure the secret token in your APM agents>>

NOTE: Secret tokens are not applicable for the RUM Agent,
as there is no way to prevent them from being publicly exposed.

[float]
[[create-secret-token]]
=== Create a secret token

Create or update a secret token in {fleet}.

include::./input-apm.asciidoc[tag=edit-integration-settings]
+
. Navigate to **Agent authorization** > **Secret token** and set the value of your token.
. Click **Save integration**. The APM Server will restart before the change takes effect.

[[configure-secret-token]]
[float]
=== Configure the secret token in your APM agents

Each Elastic {apm-agent} has a configuration option to set the value of the secret token:

* *Go agent*: {apm-go-ref}/configuration.html#config-secret-token[`ELASTIC_APM_SECRET_TOKEN`]
* *iOS agent*: {apm-ios-ref-v}/configuration.html#secretToken[`secretToken`]
* *Java agent*: {apm-java-ref}/config-reporter.html#config-secret-token[`secret_token`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-secret-token[`ELASTIC_APM_SECRET_TOKEN`]
* *Node.js agent*: {apm-node-ref}/configuration.html#secret-token[`Secret Token`]
* *PHP agent*: {apm-php-ref-v}/configuration-reference.html#config-secret-token[`secret_token`]
* *Python agent*: {apm-py-ref}/configuration.html#config-secret-token[`secret_token`]
* *Ruby agent*: {apm-ruby-ref}/configuration.html#config-secret-token[`secret_token`]

In addition to setting the secret token, ensure the configured server URL uses `HTTPS` instead of `HTTP`:

* *Go agent*: {apm-go-ref}/configuration.html#config-server-url[`ELASTIC_APM_SERVER_URL`]
* *Java agent*: {apm-java-ref}/config-reporter.html#config-server-urls[`server_urls`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-server-url[`ServerUrl`]
* *Node.js agent*: {apm-node-ref}/configuration.html#server-url[`serverUrl`]
* *PHP agent*: {apm-php-ref-v}/configuration-reference.html#config-server-url[`server_url`]
* *Python agent*: {apm-py-ref}/[`server_url`]
* *Ruby agent*: {apm-ruby-ref}/configuration.html#config-server-url[`server_url`]


[[anonymous-auth]]
=== Anonymous authentication

Elastic APM agents can send unauthenticated (anonymous) events to the APM Server.
An event is considered to be anonymous if no authentication token can be extracted from the incoming request.
By default, these anonymous requests are rejected and an authentication error is returned.

In some cases, however, it makes sense to allow anonymous requests -- for
example, when using the Real User Monitoring (RUM) agent running in a browser,
or the iOS/Swift agent running in a user application,
it is not possible to hide or protect a secret token or API key.
Thus, enabling anonymous authentication is required to ingest client-side APM data.

[float]
[[anonymous-auth-config]]
=== Configuring anonymous authentication

There are a few configuration variables that can mitigate the impact of malicious requests to an
unauthenticated APM Server endpoint.

Use the **Allowed anonymous agents** and **Allowed anonymous services** configs to ensure that the
`agent.name` and `service.name` of each incoming request match a specified list.

Additionally, the APM Server can rate-limit unauthenticated requests based on the client IP address
(`client.ip`) of the request.
This allows you to specify the maximum number of requests allowed per unique IP address, per second.

[float]
[[derive-client-ip]]
=== Deriving an incoming request's `client.ip` address

The remote IP address of an incoming request might be different
from the end-user's actual IP address, for example, because of a proxy. For this reason,
the APM Server attempts to derive the IP address of an incoming request from HTTP headers.
The supported headers are parsed in the following order:

1. `Forwarded`
2. `X-Real-Ip`
3. `X-Forwarded-For`

If none of these headers are present, the remote address for the incoming request is used.

[float]
[[derive-client-ip-concerns]]
==== Using a reverse proxy or load balancer

HTTP headers are easily modified;
it's possible for anyone to spoof the derived `client.ip` value by changing or setting,
for example, the value of the `X-Forwarded-For` header.
For this reason, if any of your clients are not trusted,
we recommend setting up a reverse proxy or load balancer in front of the APM Server.

Using a proxy allows you to clear any existing IP-forwarding HTTP headers,
and replace them with one set by the proxy.
This prevents malicious users from cycling spoofed IP addresses to bypass the
APM Server's rate limiting feature.
