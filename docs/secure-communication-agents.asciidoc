[[secure-communication-agents]]
== Secure communication with APM Agents

To secure the communication between APM Agents and the APM Server:

. <<secret-token,Set a secret token in your Agents and Server>>
. <<ssl-setup,Enable SSL/TLS from APM Server>>
. <<https-in-agents,Enable HTTPS from your APM Agents>>

[[secret-token]]
[float]
=== Secret token

You can configure a secret token to authorize requests to the APM Server.
This ensures that only your agents are able to send data to your APM servers.
Both the agents and the APM servers have to be configured with the same secret token.
In addition, *secret tokens only provide security when used in combination with SSL/TLS*.

**APM Server configuration**

Here's how you set the secret token in APM Server:

[source,yaml]
----
apm-server.secret_token: <secret-token>
----

We recommend saving the token in the APM Server <<keystore>>.

IMPORTANT: Secret tokens are not applicable for the RUM Agent,
as there is no way to prevent them from being publicly exposed.

**Agent specific configuration**

* *Go Agent*: {apm-go-ref}/configuration.html#config-secret-token[ELASTIC_APM_SECRET_TOKEN]
* *Java Agent*: {apm-java-ref}/config-reporter.html#config-secret-token[secret_token]
* *.NET Agent*: {apm-dotnet-ref}/config-reporter.html#config-secret-token[ELASTIC_APM_SECRET_TOKEN]
* *Node.js Agent*: {apm-node-ref}/configuration.html#secret-token[Secret Token]
* *Python Agent*: {apm-python-ref}/configuration.html#config-secret-token[secret_token]
* *Ruby Agent*: {apm-ruby-ref}/configuration.html#config-secret-token[secret_token]

[[ssl-setup]]
[float]
=== SSL/TLS communication from APM Server

To enable SSL/TLS, you need both a private key, and a certificate issued by a certification authority (CA).
You can then specify the path to those files in your configuration properties:
`apm-server.ssl.key` and `apm-server.ssl.certificate` respectively.
This will make APM Server serve HTTPS requests instead of HTTP.

Example of a basic output config with secure communication enabled:

[source,yaml]
----
apm-server.ssl.key: "/etc/pki/key.pem"
apm-server.ssl.certificate: "/etc/pki/client.pem"
output.elasticsearch.ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]
----

A full list of configuration options is available below in <<agent-server-ssl>>.

[[https-in-agents]]
[float]
=== HTTPS communication from APM Agents

To enable secure communication in your Agents, you simply need to update the configured server URL to use HTTPS instead of HTTP.

* *Go Agent*: {apm-go-ref}/configuration.html#config-server-url[]
* *Java Agent*: {apm-java-ref}/config-reporter.html#config-server-urls[]
* *.NET Agent*: {apm-dotnet-ref}/config-reporter.html#config-server-urls[]
* *Node.js Agent*: {apm-node-ref}/configuration.html#server-url[]
* *Python Agent*: {apm-python-ref}/configuration.html#config-server-url[]
* *Ruby Agent*: {apm-ruby-ref}/configuration.html#config-server-url[]

Some Agents also allow you to specify a custom certificate authority for connecting to APM Server.
This allows you to enable both encryption and verify that you are sending data to the correct APM Server.

* *Go Agent*: {apm-go-ref}/configuration.html#config-server-cert[]
// * *.NET Agent*: {apm-dotnet-ref}/
* *Python Agent*: {apm-python-ref}/configuration.html#config-server-cert[]
* *Ruby Agent*: {apm-ruby-ref}/configuration.html#config-ssl-ca-cert[]

Agents that don't allow you specify a custom certificate will allow you to
disable verification of the SSL certificate.
This ensures encryption, but does not verify that you are sending data to the correct APM Server.

* *Java Agent*: {apm-java-ref}/config-reporter.html#config-verify-server-cert[]
* *Node.js Agent*: {apm-node-ref}/configuration.html#validate-server-cert[]

Additionally, there are optional SSL/TLS settings for APM Server inputs.
A full list is available in <<agent-server-ssl>>.





// For 7.2 Silvia worked the work

// Up until 7.2 we only supported SSL certificate and key

// From 7.2 we support a lot more options which are aligned with the options that we also have for Server to ES to Kib.

// Generally we don't support SSL by default. We support TLS since SSL is broken (SSL is the predesccor of TLS) You can still configure it but it's off by default since 7.0. Since the community still talks about SSL we call all of these options SSL

// You need to enable it to use it. The two things taht you need to configure is the certificate and the key (bare minimum).
// Cert - path to where the cert file is loaded
// Key - certificate key path

// I can play around with it test/system/config create certs and run this script. The script will create a couple of certificates and keys and one password protected key and it's used in the automated system tests. Tests should be found. (should we point to this?)


// None of the agents support this!!!!!
// Client - Python Agent
// You have a CA for your company.

// When the Python Agent talks to APM Server, it presents this certificate signed with companies CA. How should the server trust this? It needs to know that your company is a valid CA

// client_authen - none, optional, or req. By default optional. In beats by default it is set to none.
// Does the client need to present certificate to the server or not?
// Req -> Agents need to present a certificate (not supported)
// Optional -> if you don't present it's fine, we don't verify. If you do, it needs to be valid (signed by trusted or configured CA)
// required --> needs to validate certificate signed by one of the trusted CAs

// As soon as you apply a `certificate_auth` then client auth will automatically be set to required!!!


// `key_passphrase` - can protect the key with this.

// ` supported ptortocols` last version of ssl was ssl3. The last version of TLS was 1.3, but we don't support it yet as it's expirimental in go. SSL v3, 1.0, 1.1, 1.2. We don't recommend v3 or 1.0


// You don't have to configure cipher suites. If you don't configure them, the default are used. Here the APM Server acts as server side for SSL. For most of the Beats docs, the docs describe when the beats is acting as the client (so reverse). It only makes slight differences, but they are there.

// Same goes for `curve_types`. Depending on which cyper suits you have, you can have some based on curved alogrytyhms. Then you can definte which curve types should be used for the cipher suites.



// ssl.verifcation_mode
// Server or client sends the certificate so that the other side can verify. We have "full" and "none". If you use none your suceptible to man in the middle attacks.
// This configures that the receiving client needs to validate the certificate of the server. If you set this to none then you have SSL enabled, but everyone can send anything but another APM Server can say "hey I'm the APM Server". Use case for setting this to none is testing.