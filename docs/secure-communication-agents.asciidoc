[[secure-communication-agents]]
== Secure communication with APM Agents

There are two ways to secure the communication between APM Agents and the APM Server.
Both options can be enabled in parallel,
allowing Elastic APM agents to chose whichever mechanism they support.

As soon as secure communication is enabled, requests without a valid token will be denied by APM Server.
As RUM endpoints cannot be secured, they are exempt from this rule.

* <<api-key,API keys>>
* <<secret-token,Secret token>>

[[api-key]]
=== API Keys

// Most operations require the `manage_security` cluster privilege,
// and you must ensure that `apm-server.api_key` or `output.elasticsearch` are configured appropriately.
// If you modify or delete apm privileges, APM Server might reject all requests.
// APM Server will create security privileges for the `apm` application; you can freely query them.
// If you modify or delete apm privileges, APM Server might reject all requests.
// Check the Elastic Security API documentation for details.

You can configure an API key to authorize requests to the APM Server.
API keys are sent as plain-text,
so they only provide security when used in combination with SSL/TLS.
When you set an API key in each of your agents,
you ensure that only your agents are able to send data to your APM servers.

To secure the communication between APM Agents and the APM Server with API keys:

. <<ssl-setup-api,Enable SSL/TLS>>
. <<configure-api-key,Configure API keys>>
. <<create-api-key,Create an API key with APM Server>>
. <<set-api-key,Set the API key in your APM Agents>>

NOTE: API Keys are not applicable for the RUM Agent,
as there is no way to prevent them from being publicly exposed.

[[ssl-setup-api]]
[float]
=== SSL/TLS communication in APM Server

// Use the shared ssl short description
include::./ssl-input-short.asciidoc[]

[[configure-api-key]]
[float]
=== Configure API keys

// TO DO

[[create-api-key]]
[float]
=== Create an API key

APM Server provides a command line interface for creating API keys.
Keys created using this method can only be used for Agent/Server communication.

While it is possible to CURL {es} directly to create API keys,
using this method is not recommended.
The command line tool uses safeguards, which ensure that the required privileges exist before creating an API key.
If they do not exist, the CLI tool will create the privileges.
Regardless, the user that creates the API key will need to have the privileges they wish to give to the API key.

The available commands are:

include::{libbeat-dir}/command-reference.asciidoc[tag=api-key-subcommands]

For API keys, we created dedicated privileges. There are three unique privileges.
If no privileges are specified, the created key has all privileges. 

*Agent configuration*::
Required for agents to read configuration remotely.
`--agent-config` gives the `config_agent:read` privilege to the created key.

*Ingest*::
Required for ingesting events.
`--ingest` gives the `event:write` privilege to the created key.

*Sourcemap*::
Required for uploading sourcemaps.
`--sourcemap` gives the `sourcemap:write` privilege to the created key.

Create an API key with the `create` subcommand.
The following example creates an API key with a `name` of `java-001`,
and the Agent configuration and ingest privileges.

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey create --ingest --agent-config --name java-001
-----

The response will look similar to this:

[source,console-result,subs="attributes,callouts"]
--------------------------------------------------
Name ........... java-001
Expiration ..... never
Id ............. qT4tz28B1g59zC3uAXfW
API Key ........ rH55zKd5QT6wvs3UbbkxOA (won't be shown again)
Credentials .... cVQ0dHoyOEIxZzVDZ3dnMzVWJia3hPQQ==
--------------------------------------------------

You should always verify the privileges of an API key after creating it.
Verification can be done using the `verify` subcommand.
The following example verifies that the `java-001` API key has the request privileges.

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey verify --agent-config --ingest --credentials cVQ0dHoyOEIxZzVDZ3dnMzVWJia3hPQQ==  
-----

If your API key has the right privileges, the response will look similar to this:

[source,console-result,subs="attributes,callouts"]
--------------------------------------------------
Authorized for privilege "event:write"...:          Yes
Authorized for privilege "config_agent:read"...:    Yes
--------------------------------------------------

To invalidate an API key, use the `invalidate` subcommand.
The following example invalidates the `java-001` API key.

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey invalidate --name java-001
-----

The response will look similar to this:

[source,console-result,subs="attributes,callouts"]
--------------------------------------------------
Invalidated keys ... qT4tz28B1g59zC3uAXfW
Error count ........ 0
--------------------------------------------------

A full list of `apikey` subcommands, flags, and additional examples,
is available in the <<apikey-command,API key command reference>>

[[set-api-key]]
[float]
=== Set the API key in your APM Agents

You can now set your newly created API keys in the configuration of your APM Agents.
See the relevant Agent documentation for additional information:

// Agent meta: https://github.com/elastic/apm/issues/183

// GOOD DOCS:
* *Go Agent*: {apm-go-ref}/configuration.html#config-api-key[`ELASTIC_APM_API_KEY`]
// MERGED: https://github.com/elastic/apm-agent-go/pull/698

// No issue or docs yet
// * *Java Agent*: {apm-java-ref}/config-reporter.html#config-api-key[`api_key`]

// No issue or docs yet
// * *.NET Agent*: {apm-dotnet-ref}/config-reporter.html#[`API_KEY`]

// No issue or docs yet
// * *Node.js Agent*: {apm-node-ref}/configuration.html[`api_key`]

// No docs yet
// * *Python Agent*: {apm-py-ref}/configuration.html#config-api-key[`api_key`]
// WIP

// No docs yet
// * *Ruby Agent*: {apm-ruby-ref}/configuration.html#config-api-key[`api_key`]
// MERGED: https://github.com/elastic/apm-agent-ruby/pull/655


[float]
[[api-key-settings]]
=== API key settings

You can specify the following options in the `apm-server.api_key` section of the +{beatname_lc}.yml+ config file.
They apply to API key communication between the APM Server and APM Agents.

// To do!
// These will become links, but the relevant docs haven't been merged yet.
These are different from the API key settings used for the Elasticsearch output and monitoring.

[float]
==== api_key.enabled
Enable API key authorization by setting enabled to true. By default API key support is disabled.
Agents include a valid API key in the following format: Authorization: ApiKey <token>.
The key must be the base64 encoded representation of the API key's "id:key".
api_key.enabled: false

[float]
==== api_key.limit
Restrict how many unique API keys are allowed per minute. Should be set to at least the amount of different
API keys configured in your monitored services. Every unique API key triggers one request to Elasticsearch.
api_key.limit: 100

[float]
==== api_key.elasticsearch.hosts
API keys need to be fetched from Elasticsearch. If nothing is configured, configuration settings from the
output section will be reused.
Note that configuration needs to point to a secured Elasticsearch cluster that is able to serve API key requests.
api_key.elasticsearch.hosts: ["localhost:9200"]

[float]
==== api_key.elasticsearch.protocol
api_key.elasticsearch.protocol: "http"

[float]
==== api_key.elasticsearch.path
Optional HTTP Path.
api_key.elasticsearch.path: ""

[float]
==== api_key.elasticsearch.proxy_url
Proxy server url.
api_key.elasticsearch.proxy_url: ""
api_key.elasticsearch.proxy_disable: false

[float]
==== api_key.elasticsearch.timeout
Configure http request timeout before failing an request to Elasticsearch.
api_key.elasticsearch.timeout: 10s

[float]
==== api_key.elasticsearch.ssl.enabled
Enable custom SSL settings. Set to false to ignore custom SSL settings for secure communication.
api_key.elasticsearch.ssl.enabled: true

[float]
==== api_key.elasticsearch.ssl.verification_mode
Optional SSL configuration options. SSL is off by default, change the `protocol` option if you want to enable `https`.
Configure SSL verification mode. If `none` is configured, all server hosts and certificates will be accepted.
In this mode, SSL based connections are susceptible to man-in-the-middle attacks. Use only for testing. Default is `full`.
api_key.elasticsearch.ssl.verification_mode: full

[float]
==== api_key.elasticsearch.ssl.supported_protocols
List of supported/valid TLS versions. By default all TLS versions 1.0 up to 1.2 are enabled.
api_key.elasticsearch.ssl.supported_protocols: [TLSv1.0, TLSv1.1, TLSv1.2]

[float]
==== api_key.elasticsearch.ssl.certificate_authorities
List of root certificates for HTTPS server verifications.
api_key.elasticsearch.ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]

[float]
==== api_key.elasticsearch.ssl.certificate
Certificate for SSL client authentication.
api_key.elasticsearch.ssl.certificate: "/etc/pki/client/cert.pem"

[float]
==== api_key.elasticsearch.ssl.key
Client Certificate Key
api_key.elasticsearch.ssl.key: "/etc/pki/client/cert.key"

[float]
==== api_key.elasticsearch.ssl.key_passphrase
Optional passphrase for decrypting the Certificate Key.
It is recommended to use the provided keystore instead of entering the passphrase in plain text.
api_key.elasticsearch.ssl.key_passphrase: ''

[float]
==== api_key.elasticsearch.ssl.cipher_suites
Configure cipher suites to be used for SSL connections.
api_key.elasticsearch.ssl.cipher_suites: []

[float]
==== api_key.elasticsearch.ssl.curve_types
Configure curve types for ECDHE based cipher suites.
api_key.elasticsearch.ssl.curve_types: []

[float]
==== api_key.elasticsearch.ssl.renegotiation
Configure what types of renegotiation are supported. Valid options are `never`, `once`, and `freely`. Default is `never`.
api_key.elasticsearch.ssl.renegotiation: never

[[secret-token]]
=== Secret token

You can configure a secret token to authorize requests to the APM Server.
This ensures that only your agents are able to send data to your APM servers.
Both the agents and the APM servers have to be configured with the same secret token,
and secret tokens only provide security when used in combination with SSL/TLS.

To secure the communication between APM Agents and the APM Server with a secret token:

. <<ssl-setup-token,Enable SSL/TLS in APM Server>>
. <<set-secret-token,Set a secret token in your Agents and Server>>
. <<https-in-agents,Enable HTTPS in your APM Agents>>

NOTE: Secret tokens are not applicable for the RUM Agent,
as there is no way to prevent them from being publicly exposed.

[[ssl-setup-token]]
[float]
=== SSL/TLS communication in APM Server

// Use the shared ssl short description
include::./ssl-input-short.asciidoc[]

[[set-secret-token]]
[float]
=== Set a secret token

**APM Server configuration**

Here's how you set the secret token in APM Server:

[source,yaml]
----
apm-server.secret_token: <secret-token>
----

We recommend saving the token in the APM Server <<keystore>>.

IMPORTANT: Secret tokens are not applicable for the RUM Agent,
as there is no way to prevent them from being publicly exposed.

**Agent specific configuration**

Each Agent has a configuration for setting the value of the secret token:

* *Go Agent*: {apm-go-ref}/configuration.html#config-secret-token[`ELASTIC_APM_SECRET_TOKEN`]
* *Java Agent*: {apm-java-ref}/config-reporter.html#config-secret-token[`secret_token`]
* *.NET Agent*: {apm-dotnet-ref}/config-reporter.html#config-secret-token[`ELASTIC_APM_SECRET_TOKEN`]
* *Node.js Agent*: {apm-node-ref}/configuration.html#secret-token[`Secret Token`]
* *Python Agent*: {apm-py-ref}/configuration.html#config-secret-token[`secret_token`]
* *Ruby Agent*: {apm-ruby-ref}/configuration.html#config-secret-token[`secret_token`]

[[https-in-agents]]
[float]
=== HTTPS communication in APM Agents

To enable secure communication in your Agents, you need to update the configured server URL to use `HTTPS` instead of `HTTP`.

* *Go Agent*: {apm-go-ref}/configuration.html#config-server-url[`ELASTIC_APM_SERVER_URL`]
* *Java Agent*: {apm-java-ref}/config-reporter.html#config-server-urls[`server_urls`]
* *.NET Agent*: {apm-dotnet-ref}/config-reporter.html#config-server-urls[`ServerUrls`]
* *Node.js Agent*: {apm-node-ref}/configuration.html#server-url[`serverUrl`]
* *Python Agent*: {apm-py-ref}/[`server_url`]
* *Ruby Agent*: {apm-ruby-ref}/configuration.html#config-server-url[`server_url`]

Some Agents also allow you to specify a custom certificate authority for connecting to APM Server.

* *Go Agent*: {apm-go-ref}/configuration.html#config-server-cert[`ELASTIC_APM_SERVER_CERT`]
// * *.NET Agent*: {apm-dotnet-ref}/
* *Python Agent*: {apm-py-ref}/configuration.html#config-server-cert[`ELASTIC_APM_SERVER_CERT`]
* *Ruby Agent*: {apm-ruby-ref}/configuration.html#config-ssl-ca-cert[`server_ca_certedit`]

Most Agents that don't allow you specify a custom certificate will allow you to
disable verification of the SSL certificate.
This ensures encryption, but does not verify that you are sending data to the correct APM Server.

* *Java Agent*: {apm-java-ref}/config-reporter.html#config-verify-server-cert[`verify_server_cert`]
* *Node.js Agent*: {apm-node-ref}/configuration.html#validate-server-cert[`verifyServerCert`]
