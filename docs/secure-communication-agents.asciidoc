[[secure-communication-agents]]
== Secure communication with APM agents

Communication between APM agents and APM Server can be both encrypted and authenticated.
Encryption is achievable through <<ssl-setup>>.

Authentication can be achieved in two main ways:

* <<api-key,API keys>>
* <<secret-token,Secret token>>

Both options can be enabled at the same time,
allowing Elastic APM agents to chose whichever mechanism they support.
In addition, since both mechanisms involve sending a secret as plain text,
they should be used in combination with SSL/TLS encryption.

As soon as an authenticated communication is enabled, requests without a valid token or API key will be denied by APM Server.
As RUM endpoints cannot be secured through these mechanisms, they are exempt from this rule.

In addition, there is a less straightforward and more restrictive way to authenticate clients through
<<ssl-client-authentication,SSL/TLS client authentication>>, which is currently a mainstream option only
for the RUM agent (through the browser) and the Jaeger agent.

[[ssl-setup]]
=== SSL/TLS communication

// Use the shared ssl short description
include::./ssl-input.asciidoc[]

[[api-key]]
=== API keys

You can configure API keys to authorize requests to the APM Server.

NOTE: API keys are sent as plain-text,
so they only provide security when used in combination with <<ssl-setup,SSL/TLS>>.

By enabling `apm-server.auth.api_key.enabled: true`, you ensure that only agents with a valid API Key
are able to successfully use APM Server's API (except for RUM endpoints).

To secure the communication between APM Agents and the APM Server with API keys:

. Make sure <<ssl-setup,SSL/TLS>> is enabled
. <<configure-api-key,Enable and configure API keys>>
. <<create-api-key,Create an API key with APM Server>>
. <<set-api-key,Set the API key in your APM Agents>>

NOTE: API Keys are not applicable for the RUM Agent,
as there is no way to prevent them from being publicly exposed.

[[configure-api-key]]
[float]
=== Enable and configure API keys

API keys are disabled by default. You can change this, and additional settings,
in the `apm-server.auth.api_key` section of the +{beatname_lc}.yml+ configuration file.

At a minimum, you must enable API keys,
and should set a limit on the number of unique API keys that APM Server allows per minute.
Here's an example `apm-server.auth.api_key` config using 50 unique API keys:

[source,yaml]
----
apm-server.auth.api_key.enabled: true <1>
apm-server.auth.api_key.limit: 50 <2>
----
<1> Enables API keys
<2> Restricts the number of unique API keys that {es} allows each minute.
This value should be the number of unique API keys configured in your monitored services.

All other configuration options are described in <<api-key-settings>>.

[[create-api-key]]
[float]
=== Create and validate an API key

APM Server provides a command line interface for creating, retrieving, invalidating, and verifying API keys.
Keys created using this method can only be used for Agent/Server communication.

[[create-api-key-subcommands]]
[float]
==== `apikey` subcommands

include::{libbeat-dir}/command-reference.asciidoc[tag=apikey-subcommands]

[[create-api-key-privileges]]
[float]
==== Privileges

There are three unique privileges you can assign to each API keys.
If privileges are not specified at creation time, the created key will have all privileges.

* *Agent configuration*: Required for agents to read
{kibana-ref}/agent-configuration.html[Agent configuration remotely].
`--agent-config` gives the `config_agent:read` privilege to the created key.
* *Ingest*: Required for ingesting Agent events.
`--ingest` gives the `event:write` privilege to the created key.
* *Sourcemap*: Required for <<sourcemaps,uploading sourcemaps>>.
`--sourcemap` gives the `sourcemap:write` privilege to the created key.

[[create-api-key-workflow]]
[float]
==== API key workflow example

Create an API key with the `create` subcommand.

The following example creates an API key with a `name` of `java-001`,
and gives the "agent configuration" and "ingest" privileges.

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey create --ingest --agent-config --name java-001
-----

The response will look similar to this:

[source,console-result]
--------------------------------------------------
Name ........... java-001
Expiration ..... never
Id ............. qT4tz28B1g59zC3uAXfW
API Key ........ rH55zKd5QT6wvs3UbbkxOA (won't be shown again)
Credentials .... cVQ0dHoyOEIxZzU5ekMzdUFYZlc6ckg1NXpLZDVRVDZ3dnMzVWJia3hPQQ== (won't be shown again)
--------------------------------------------------

You should always verify the privileges of an API key after creating it.
Verification can be done using the `verify` subcommand.

The following example verifies that the `java-001` API key has the "agent configuration" and "ingest" privileges.

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey verify --agent-config --ingest --credentials cVQ0dHoyOEIxZzU5ekMzdUFYZlc6ckg1NXpLZDVRVDZ3dnMzVWJia3hPQQ==
-----

If the API key has the requested privileges, the response will look similar to this:

[source,console-result]
--------------------------------------------------
Authorized for privilege "event:write"...:          Yes
Authorized for privilege "config_agent:read"...:    Yes
--------------------------------------------------

To invalidate an API key, use the `invalidate` subcommand.
Due to {es} caching, there may be a delay between when this subcommand is executed and when it takes effect.

The following example invalidates the `java-001` API key.

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey invalidate --name java-001
-----

The response will look similar to this:

[source,console-result]
--------------------------------------------------
Invalidated keys ... qT4tz28B1g59zC3uAXfW
Error count ........ 0
--------------------------------------------------

A full list of `apikey` subcommands and flags is available in the <<apikey-command,API key command reference>>.

[[create-api-key-workflow-es]]
[float]
==== Alternate API key workflow example

Instead of using the APM Server CLI, it is possible to create API keys using the Elasticsearch
{ref}/security-api-create-api-key.html[create API key API].

This example creates an API key named `java-002`:

[source,kibana]
----
POST /_security/api_key
{
  "name": "java-002", <1>
  "expiration": "1d", <2>
  "role_descriptors": {
    "apm": {
      "applications": [
        {
          "application": "apm",
          "privileges": ["sourcemap:write", "event:write", "config_agent:read"], <3>
          "resources": ["*"]
        }
      ]
    }
  }
}
----
<1> The name of the API key
<2> The expiration time of the API key
<3> Any assigned privileges

The response will look similar to this:

[source,console-result]
----
{
  "id" : "GnrUT3QB7yZbSNxKET6d",
  "name" : "java-002",
  "expiration" : 1599153532262,
  "api_key" : "RhHKisTmQ1aPCHC_TPwOvw"
}
----

The `credential` string, which is what agents use to communicate with APM Server,
is a base64 encoded representation of the API key's `id:api_key`.
It can be created like this:

[source,console-result]
--------------------------------------------------
echo -n GnrUT3QB7yZbSNxKET6d:RhHKisTmQ1aPCHC_TPwOvw | base64
--------------------------------------------------

You can verify your API key has been base64-encoded correctly with the
{ref}/security-api-authenticate.html[Authenticate API]:

["source","sh",subs="attributes"]
-----
curl -H "Authorization: ApiKey R0gzRWIzUUI3eVpiU054S3pYSy06bXQyQWl4TlZUeEcyUjd4cUZDS0NlUQ==" localhost:9200/_security/_authenticate
-----

If the API key has been encoded correctly, you'll see a response similar to the following:

[source,console-result]
----
{
   "username":"1325298603",
   "roles":[],
   "full_name":null,
   "email":null,
   "metadata":{
      "saml_nameid_format":"urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
      "saml(http://saml.elastic-cloud.com/attributes/principal)":[
         "1325298603"
      ],
      "saml_roles":[
         "superuser"
      ],
      "saml_principal":[
         "1325298603"
      ],
      "saml_nameid":"_7b0ab93bbdbc21d825edf7dca9879bd8d44c0be2",
      "saml(http://saml.elastic-cloud.com/attributes/roles)":[
         "superuser"
      ]
   },
   "enabled":true,
   "authentication_realm":{
      "name":"_es_api_key",
      "type":"_es_api_key"
   },
   "lookup_realm":{
      "name":"_es_api_key",
      "type":"_es_api_key"
   }
}
----

You can then use the APM Server CLI to verify that the API key has the requested privileges:

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey verify --credentials R25yVVQzUUI3eVpiU054S0VUNmQ6UmhIS2lzVG1RMWFQQ0hDX1RQd092dw==
-----

If the API key has the requested privileges, the response will look similar to this:

[source,console-result]
----
Authorized for privilege "config_agent:read"...:  Yes
Authorized for privilege "event:write"...:        Yes
Authorized for privilege "sourcemap:write"...:    Yes
----

[[set-api-key]]
[float]
=== Set the API key in your APM agents

You can now apply your newly created API keys in the configuration of each of your APM agents.
See the relevant agent documentation for additional information:

* *Go agent*: {apm-go-ref}/configuration.html#config-api-key[`ELASTIC_APM_API_KEY`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-api-key[`ApiKey`]
* *Java agent*: {apm-java-ref}/config-reporter.html#config-api-key[`api_key`]
* *Node.js agent*: {apm-node-ref}/configuration.html#api-key[`apiKey`]
* *PHP agent*: {apm-php-ref-v}/configuration-reference.html#config-api-key[`api_key`]
* *Python agent*: {apm-py-ref}/configuration.html#config-api-key[`api_key`]
* *Ruby agent*: {apm-ruby-ref}/configuration.html#config-api-key[`api_key`]

[float]
[[api-key-settings]]
=== API key configuration options

[float]
[[api-key-auth-settings]]
==== `auth.api_key.*` configuration options

You can specify the following options in the `apm-server.auth.api_key.*` section of the
+{beatname_lc}.yml+ configuration file.
They apply to API key communication between the APM Server and APM Agents.

NOTE: These settings are different from the API key settings used for Elasticsearch output and monitoring.

[float]
===== `enabled`

Enable API key authorization by setting `enabled` to `true`.
By default, `enabled` is set to `false`, and API key support is disabled.

TIP: Not using Elastic APM agents?
When enabled, third-party APM agents must include a valid API key in the following format:
`Authorization: ApiKey <token>`. The key must be the base64 encoded representation of the API key's `id:name`.

[float]
===== `limit`

Each unique API key triggers one request to Elasticsearch.
This setting restricts the number of unique API keys are allowed per minute.
The minimum value for this setting should be the number of API keys configured in your monitored services.
The default `limit` is `100`.

[float]
==== `auth.api_key.elasticsearch.*` configuration options

All of the `auth.api_key.elasticsearch.*` configurations are optional.
If none are set, configuration settings from the `apm-server.output` section will be reused.

[float]
===== `elasticsearch.hosts`

API keys are fetched from Elasticsearch.
This configuration needs to point to a secured Elasticsearch cluster that is able to serve API key requests.


[float]
===== `elasticsearch.protocol`

The name of the protocol Elasticsearch is reachable on.
The options are: `http` or `https`. The default is `http`.
If nothing is configured, configuration settings from the `output` section will be reused.

[float]
===== `elasticsearch.path`

An optional HTTP path prefix that is prepended to the HTTP API calls.
If nothing is configured, configuration settings from the `output` section will be reused.

[float]
===== `elasticsearch.proxy_url`

The URL of the proxy to use when connecting to the Elasticsearch servers.
The value may be either a complete URL or a "host[:port]", in which case the "http"scheme is assumed.
If nothing is configured, configuration settings from the `output` section will be reused.

[float]
===== `elasticsearch.timeout`

The http request timeout in seconds for the Elasticsearch request.
If nothing is configured, configuration settings from the `output` section will be reused.

[float]
==== `auth.api_key.elasticsearch.ssl.*` configuration options

SSL is off by default. Set `elasticsearch.protocol` to `https` if you want to enable `https`.

[float]
===== `elasticsearch.ssl.enabled`

Enable custom SSL settings.
Set to false to ignore custom SSL settings for secure communication.

[float]
===== `elasticsearch.ssl.verification_mode`

Configure SSL verification mode.
If `none` is configured, all server hosts and certificates will be accepted.
In this mode, SSL based connections are susceptible to man-in-the-middle attacks.
**Use only for testing**. Default is `full`.

[float]
===== `elasticsearch.ssl.supported_protocols`

List of supported/valid TLS versions.
By default, all TLS versions from 1.0 to 1.2 are enabled.

[float]
===== `elasticsearch.ssl.certificate_authorities`

List of root certificates for HTTPS server verifications.

[float]
===== `elasticsearch.ssl.certificate`

The path to the certificate for SSL client authentication.

[float]
===== `elasticsearch.ssl.key`

The client certificate key used for client authentication.
This option is required if certificate is specified.

[float]
===== `elasticsearch.ssl.key_passphrase`

An optional passphrase used to decrypt an encrypted key stored in the configured key file.
It is recommended to use the provided keystore instead of entering the passphrase in plain text.

[float]
===== `elasticsearch.ssl.cipher_suites`

The list of cipher suites to use. The first entry has the highest priority.
If this option is omitted, the Go crypto library’s default suites are used (recommended).

[float]
===== `elasticsearch.ssl.curve_types`

The list of curve types for ECDHE (Elliptic Curve Diffie-Hellman ephemeral key exchange).

[float]
===== `elasticsearch.ssl.renegotiation`

Configure what types of renegotiation are supported.
Valid options are `never`, `once`, and `freely`. Default is `never`.

* `never` - Disables renegotiation.
* `once` - Allows a remote server to request renegotiation once per connection.
* `freely` - Allows a remote server to repeatedly request renegotiation.

[float]
[[api-key-settings-legacy]]
==== `api_key.*` configuration options

deprecated::[7.14.0, Replaced by `auth.api_key.*`. See <<api-key-auth-settings>>]

In versions prior to 7.14.0, API Key authorization was known as `apm-server.api_key`. In 7.14.0 this was renamed `apm-server.auth.api_key`.
The old configuration will continue to work until 8.0.0, and the new configuration will take precedence.

[[secret-token]]
=== Secret token

You can configure a secret token to authorize requests to the APM Server.
This ensures that only your agents are able to send data to your APM servers.
Both the agents and the APM servers have to be configured with the same secret token.

NOTE: Secret tokens are sent as plain-text,
so they only provide security when used in combination with <<ssl-setup,SSL/TLS>>.

To secure the communication between APM agents and the APM Server with a secret token:

. Make sure <<ssl-setup,SSL/TLS>> is enabled
. <<set-secret-token,Set a secret token in your agents and Server>>
. <<https-in-agents,Enable HTTPS in your APM agents>>

NOTE: Secret tokens are not applicable for the RUM Agent,
as there is no way to prevent them from being publicly exposed.

[[set-secret-token]]
[float]
=== Set a secret token

**APM Server configuration**

NOTE: {ess} and {ece} deployments provision a secret token when the deployment is created.
The secret token can be found and reset in the {ecloud} console under **Deployments** -- **APM & Fleet**.

Here's how you set the secret token in APM Server:

[source,yaml]
----
apm-server.auth.secret_token: <secret-token>
----

We recommend saving the token in the APM Server <<keystore>>.

IMPORTANT: Secret tokens are not applicable for the RUM agent,
as there is no way to prevent them from being publicly exposed.

**Agent specific configuration**

Each Agent has a configuration for setting the value of the secret token:

* *Go agent*: {apm-go-ref}/configuration.html#config-secret-token[`ELASTIC_APM_SECRET_TOKEN`]
* *Java agent*: {apm-java-ref}/config-reporter.html#config-secret-token[`secret_token`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-secret-token[`ELASTIC_APM_SECRET_TOKEN`]
* *Node.js agent*: {apm-node-ref}/configuration.html#secret-token[`Secret Token`]
* *PHP agent*: {apm-php-ref-v}/configuration-reference.html#config-secret-token[`secret_token`]
* *Python agent*: {apm-py-ref}/configuration.html#config-secret-token[`secret_token`]
* *Ruby agent*: {apm-ruby-ref}/configuration.html#config-secret-token[`secret_token`]

[[https-in-agents]]
[float]
=== HTTPS communication in APM agents

To enable secure communication in your agents, you need to update the configured server URL to use `HTTPS` instead of `HTTP`.

* *Go agent*: {apm-go-ref}/configuration.html#config-server-url[`ELASTIC_APM_SERVER_URL`]
* *Java agent*: {apm-java-ref}/config-reporter.html#config-server-urls[`server_urls`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-server-url[`ServerUrl`]
* *Node.js agent*: {apm-node-ref}/configuration.html#server-url[`serverUrl`]
* *PHP agent*: {apm-php-ref-v}/configuration-reference.html#config-server-url[`server_url`]
* *Python agent*: {apm-py-ref}/[`server_url`]
* *Ruby agent*: {apm-ruby-ref}/configuration.html#config-server-url[`server_url`]

Some agents also allow you to specify a custom certificate authority for connecting to APM Server.

* *Go agent*: certificate pinning through {apm-go-ref}/configuration.html#config-server-cert[`ELASTIC_APM_SERVER_CERT`]
* *Python agent*: certificate pinning through {apm-py-ref}/configuration.html#config-server-cert[`server_cert`]
* *Ruby agent*: certificate pinning through {apm-ruby-ref}/configuration.html#config-ssl-ca-cert[`server_ca_cert`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-server-cert[`ServerCert`]
* *NodeJS agent*: custom CA setting through {apm-node-ref}/configuration.html#server-ca-cert-file[`serverCaCertFile`]
* *Java agent*: adding the certificate to the JVM `trustStore`.
See {apm-java-ref}/ssl-configuration.html#ssl-server-authentication[APM Server authentication] for more details.

Agents that don't allow you specify a custom certificate will allow you to
disable verification of the SSL certificate.
This ensures encryption, but does not verify that you are sending data to the correct APM Server.

* *Go agent*: {apm-go-ref}/configuration.html#config-verify-server-cert[`ELASTIC_APM_VERIFY_SERVER_CERT`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-verify-server-cert[`VerifyServerCert`]
* *Java agent*: {apm-java-ref}/config-reporter.html#config-verify-server-cert[`verify_server_cert`]
* *PHP agent*: {apm-php-ref-v}/configuration-reference.html#config-verify-server-cert[`verify_server_cert`]
* *Python agent*: {apm-py-ref}/configuration.html#config-verify-server-cert[`verify_server_cert`]
* *Ruby agent*: {apm-ruby-ref}/configuration.html#config-verify-server-cert[`verify_server_cert`]
* *NodeJS agent*: {apm-node-ref}/configuration.html#validate-server-cert[`verifyServerCert`]
