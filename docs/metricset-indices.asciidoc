[[metricset-indices]]
== Metrics documents

++++
<titleabbrev>Metrics documents</titleabbrev>
++++

APM Server stores application metrics sent by agents as documents in Elasticsearch.
Metric documents contain a timestamp, one or more metric fields,
and non-numerical fields describing the resource to which the metrics pertain.

For example, the {apm-java-agent} produces {apm-java-ref-v}/metrics.html#metrics-jvm[JVM-specific metrics].
This includes garbage collection metrics (`jvm.gc.count`, `jvm.gc.time`) which are related to a specific memory manager,
such as "G1 Young Generation", identified by the field `labels.name`.
See <<example-metric-document>> for an example document containing these metrics.

Metric documents can be identified by searching for `processor.event: metric`.

[float]
[[internal-metrics]]
=== APM-defined metrics

The APM Agents and APM Server also calculate metrics from trace events, used to power various features of Elastic APM.
These metrics are described below.

[float]
[[breakdown-metrics-fields]]
==== Breakdown metrics

To power the {apm-app-ref}/transactions.html[Time spent by span type] graph,
agents collect summarized metrics about the timings of spans and transactions,
broken down by span type.

*`transaction.breakdown.count`*::
+
--
The number of transactions for which breakdown metrics (`span.self_time`) have been created
in the most recent metrics reporting interval. Some agents measure the breakdown for both
sampled and non-sampled transactions, while others measure only for sampled transactions.

These metric documents can be identified by searching for `metricset.name: transaction_breakdown`.

You can filter and group by these dimensions:

* `transaction.name`: The name of the transaction, for example `GET /`
* `transaction.type`: The type of the transaction, for example `request`
--

*`span.self_time.count`* and *`span.self_time.sum.us`*::
+
--
These metrics measure the "self-time" for a span type, and optional subtype,
within a transaction group. Together these metrics can be used to calculate
the average duration and percentage of time spent on each type of operation
within a transaction group.

These metric documents can be identified by searching for `metricset.name: span_breakdown`.

You can filter and group by these dimensions:

* `transaction.name`: The name of the enclosing transaction group, for example `GET /`
* `transaction.type`: The type of the enclosing transaction, for example `request`
* `span.type`: The type of the span, for example `app`, `template` or `db`
* `span.subtype`: The sub-type of the span, for example `mysql` (optional)
--

[float]
==== Transaction metrics

To power {kibana-ref}/xpack-apm.html[APM app] visualizations,
APM Server aggregates transaction events into latency distribution metrics.

*`transaction.duration.histogram`*::
+
--
This metric measures the latency distribution of transaction groups,
used to power visualizations and analytics in Elastic APM.

These metric documents can be identified by searching for `metricset.name: transaction`.

You can filter and group by these dimensions (some of which are optional, for example `container.id`):

* `transaction.name`: The name of the transaction, for example `GET /`
* `transaction.type`: The type of the transaction, for example `request`
* `transaction.result`: The result of the transaction, for example `HTTP 2xx`
* `transaction.root`: A boolean flag indicating whether the transaction is the root of a trace
* `event.outcome`: The outcome of the transaction, for example `success`
* `agent.name`: The name of the APM agent that instrumented the transaction, for example `java`
* `service.name`: The name of the service that served the transaction
* `service.version`: The version of the service that served the transaction
* `service.environment`: The environment of the service that served the transaction
* `host.hostname`: The hostname of the service that served the transaction
* `container.id`: The container ID of the service that served the transaction
* `kubernetes.pod.name`: The name of the Kubernetes pod running the service that served the transaction
--

[float]
==== Service-destination metrics

To power {kibana-ref}/xpack-apm.html[APM app] visualizations,
APM Server aggregates span events into "service destination" metrics.

*`span.destination.service.response_time.count`* and *`span.destination.service.response_time.sum.us`*::
+
--
These metrics measure the count and total duration of requests from one service to another service.
These are used to calculate the throughput and latency of requests to backend services such as databases in
{kibana-ref}/service-maps.html[Service maps].

These metric documents can be identified by searching for `metricset.name: service_destination`.

You can filter and group by these dimensions:

* `span.destination.service.resource`: The destination service resource, for example `mysql`
* `event.outcome`: The outcome of the operation, for example `success`
* `agent.name`: The name of the APM agent that instrumented the operation, for example `java`
* `service.name`: The name of the service that made the request
* `service.environment`: The environment of the service that made the request
--

[float]
[[example-metric-document]]
=== Example metric document

Below is an example of a metric document as stored in Elasticsearch, containing JVM metrics produced by the {apm-java-agent}.
The document contains two related metrics: `jvm.gc.time` and `jvm.gc.count`. These are accompanied by various fields describing
the environment in which the metrics were captured: service name, host name, Kubernetes pod UID, container ID, process ID, and more.
These fields make it possible to search and aggregate across various dimensions, such as by service, host, and Kubernetes pod.

[source,json]
----
include::./data/elasticsearch/metricset.json[]
----
