openapi: 3.1.0
info:
  title: APM Server
  description: OpenAPI schema for APM Server APIs
  version: '0.1'
  license:
    name: Elastic License 2.0
    url: https://www.elastic.co/licensing/elastic-license
  contact:
    name: APM Team
servers:
  - url: /
security:
  - apiKeyAuth: []
  - secretToken: []
tags:
  - name: agent config
    description: APIs that query the APM Server for configuration changes.
    x-displayName: APM agent configuration
  - name: event intake
    description: The events intake API is the internal protocol that APM agents use to talk to the APM Server.
    x-displayName: APM event intake
  - name: server info
    description: APIs that query general APM Server information.
    x-displayName: APM server information
paths:
  /:
    get:
      summary: Get general server information
      description: |
        This lightweight endpoint is useful as a server up/down health check.
        To configure authenticated access to the APM server, the instructions at [APM API key](https://www.elastic.co/guide/en/observability/current/api-key.html) or [APM Secret Token](https://www.elastic.co/guide/en/observability/current/secret-token.html) must be followed to configure the correct permissions for APM access.
      operationId: getServerHealth
      tags:
        - server info
      responses:
        '200':
          $ref: '#/components/responses/200_server_info'
    post:
      summary: Get general server information
      operationId: postServerHealth
      tags:
        - server info
      responses:
        '200':
          $ref: '#/components/responses/200_server_info'
  /config/v1/agents:
    get:
      summary: Get agent configuration changes
      description: |
        To configure authenticated access to the APM server, the instructions at [APM API key](https://www.elastic.co/guide/en/observability/current/api-key.html) or [APM Secret Token](https://www.elastic.co/guide/en/observability/current/secret-token.html) must be followed to configure the correct permissions for APM access.
      operationId: getAgentConfig
      tags:
        - agent config
      parameters:
        - in: query
          name: service.name
          required: true
          schema:
            type: string
        - in: query
          name: service.environment
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
    post:
      summary: Get agent configuration changes
      description: |
        To configure authenticated access to the APM server, the instructions at [APM API key](https://www.elastic.co/guide/en/observability/current/api-key.html) or [APM Secret Token](https://www.elastic.co/guide/en/observability/current/secret-token.html) must be followed to configure the correct permissions for APM access.
      operationId: postAgentConfig
      tags:
        - agent config
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - service
              properties:
                CAPTURE_BODY:
                  type: string
                  example: 'off'
                service:
                  type: object
                  required:
                    - name
                  properties:
                    environment:
                      type: string
                      example: all
                    name:
                      type: string
                      example: test-service
              additionalProperties: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  capture_body:
                    type: string
                    enum:
                      - 'off'
                      - errors
                      - transactions
                      - all
                    description: |
                      For transactions that are HTTP requests, the agent can optionally capture the request body (for example, POST variables). For transactions that are initiated by receiving a message from a message broker, the agent can capture the textual message body.
                    example: 'off'
                  transaction_max_spans:
                    type: integer
                    minimum: 0
                    description: The maximum number of spans that are recorded per transaction.
                    example: 500
                  transaction_sample_rate:
                    type: number
                    format: float
                    minimum: 0
                    maximum: 1
                    description: The agent samples transactions at this rate.
                    example: 0.3
                additionalProperties: true
        '403':
          description: APM Server is configured to fetch agent configuration from Elasticsearch but the configuration is invalid.
        '503':
          description: APM Server is starting up or Elasticsearch is unreachable.
  /config/v1/rum/agents:
    get:
      summary: Get RUM agent configuration changes
      description: |
        To configure authenticated access to the APM server, the instructions at [APM API key](https://www.elastic.co/guide/en/observability/current/api-key.html) or [APM Secret Token](https://www.elastic.co/guide/en/observability/current/secret-token.html) must be followed to configure the correct permissions for APM access.
      operationId: getRumAgentConfig
      tags:
        - agent config
      responses:
        '200':
          description: Successful response.
  /intake/v2/events:
    post:
      summary: Send APM agent events
      description: |
        NOTE: Most users do not need to interact directly with the events intake API. Agents communicate with the APM Server by sending events--captured pieces of information--in an HTTP request. Events can be transactions, spans, errors, or metrics. Each event is sent as its own line in the HTTP request body, which is known as newline delimited JSON (NDJSON). With NDJSON, agents can open an HTTP POST request and use chunked encoding to stream events to the APM Server as soon as they are recorded in the agent. This makes it simple for agents to serialize each event to a stream of newline delimited JSON. The APM Server also treats the HTTP body as a compressed stream and thus reads and handles each event independently. See the [APM data model](https://www.elastic.co/guide/en/observability/current/apm-data-model.html) to learn more about the different types of events.
      operationId: postEventIntake
      tags:
        - event intake
      parameters:
        - in: query
          name: async
          description: |
            Indicates whether to use asynchronous processing, which is supported by APM Server in 8.5.0 and later. NOTE: Since asynchronous processing defers some of the event processing to the background and takes place after the client has closed the request, some errors can't be communicated back to the client and are logged by the APM Server. Furthermore, asynchronous processing requests will only be scheduled if the APM Server can service the incoming request; requests that cannot be serviced will receive an internal error 503 "queue is full" error.
          schema:
            type: boolean
      requestBody:
        content:
          application/ndjson:
            schema:
              anyOf:
                - $ref: '#/components/schemas/ErrorEvent'
                - $ref: '#/components/schemas/MetadataEvent'
                - $ref: '#/components/schemas/MetricSetEvent'
                - $ref: '#/components/schemas/SpanEvent'
                - $ref: '#/components/schemas/TransactionEvent'
            examples:
              # postErrorEventIntakeExample:
              #   $ref: '#/components/examples/errorEventIntakeRequestExample'
              postMetadataEventIntakeExample:
                $ref: '#/components/examples/metadataEventIntakeRequestExample'
              postMetricSetEventIntakeExample:
                $ref: '#/components/examples/metricSetEventIntakeRequestExample'
              # postSpanEventIntakeExample:
              #   $ref: '#/components/examples/spanEventIntakeRequestExample'
              # postTransactionEventIntakeExample:
              #   $ref: '#/components/examples/transactionEventIntakeRequestExample'
      responses:
        '202':
          description: Successful response; all events succeeded.
  /intake/v2/rum/events:
    post:
      summary: Send RUM events
      description: |
        NOTE: Most users do not need to interact directly with the events intake API.
      operationId: postRumEventIntakeV2
      tags:
        - event intake
      requestBody:
        content:
          application/ndjson:
            schema:
              anyOf:
                - $ref: '#/components/schemas/ErrorEvent'
                - $ref: '#/components/schemas/MetadataEvent'
                - $ref: '#/components/schemas/MetricSetEvent'
                - $ref: '#/components/schemas/SpanEvent'
                - $ref: '#/components/schemas/TransactionEvent'
      responses:
        '202':
          description: Successful response; all events succeeded.
  /intake/v3/rum/events:
    post:
      summary: Send RUM events
      description: |
        NOTE: Most users do not need to interact directly with the events intake API.
      operationId: postRumEventIntakeV3
      tags:
        - event intake
      requestBody:
        content:
          application/ndjson:
            schema:
              anyOf:
                - $ref: '#/components/schemas/ErrorEventv3'
                - $ref: '#/components/schemas/MetadataEventv3'
                - $ref: '#/components/schemas/SpanEventv3'
                - $ref: '#/components/schemas/TransactionEventv3'
      responses:
        '202':
          description: Successful response; all events succeeded.
components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: 'e.g. Authorization: ApiKey base64AccessApiKey'
    secretToken:
      type: http
      scheme: bearer
      bearerFormat: Secret token
  schemas:
    ErrorEvent:
      type: object
      description: >
        Errors are events that occur in a monitored service and correspond to an error or a logged message captured by an agent.
      required:
        - error
      properties:
        error:
          $ref:  '../v2/error.json'
    ErrorEventv3:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '../rumv3/error.json'
    MetadataEvent:
      type: object
      description: >
        Every new connection to the APM Server starts with a metadata stanza.
        This provides general metadata concerning the other objects in the stream.
        Rather than send this metadata information from the agent multiple times, the APM Server hangs on to this information and applies it to other objects in the stream as necessary.
        TIP: Metadata is stored under context when viewing documents in Elasticsearch.
        APM agents automatically read Kubernetes data and send it to the APM Server.
        In most instances, agents are able to read this data from inside the container.
        If this is not the case, or if you wish to override this data, you can set environment variables for the agents to read.
        These environment variable are set via the Kubernetes Downward API. 
      required:
        - metadata
      properties:
        metadata:
          $ref: '../v2/metadata.json'
    MetadataEventv3:
      type: object
      required:
        - metadata
      properties:
        metadata:
          $ref: '../rumv3/metadata.json'
    MetricSetEvent:
      type: object
      description: >
        Metric sets are events that contain application metric data captured by an APM agent. 
      required:
        - metricset
      properties:
        metricset:
          $ref: '../v2/metricset.json'
    SpanEvent:
      type: object
      description: >
        Spans are events captured by an agent occurring in a monitored service.
      required:
        - span
      properties:
        span:
          $ref: '../v2/span.json'
    SpanEventv3:
      type: object
      required:
        - span
      properties:
        span:
          $ref: '../rumv3/span.json'
    TransactionEvent:
      type: object
      description: >
        Transactions are events corresponding to an incoming request or similar task occurring in a monitored service.
      required:
        - transaction
      properties:
        transaction:
          $ref: '../v2/transaction.json'
    TransactionEventv3:
      type: object
      required:
        - transaction
      properties:
        transaction:
          $ref: '../rumv3/transaction.json'
  responses:
    200_server_info:
      description: A successful response indicates that the server is up.
      content:
        application/json:
          schema:
            description: If an API key or a secret token is passed along with the request, the response payload includes some information about the APM server.
            type: object
            properties:
              build_date:
                type: string
                format: time-date
              build_sha:
                type: string
              publish_ready:
                type: boolean
              version:
                type: string
          examples:
            getServerHealthAuthResponse:
              summary: Example APM Server information request with a secret token
              value:
                build_date: '2021-12-18T19:59:06Z'
                build_sha: 24fe620eeff5a19e2133c940c7e5ce1ceddb1445
                publish_ready: true
                version: 8.12.2
  examples:
    # errorEventIntakeRequestExample:
    #   summary: A request body example for the error event type.
    #   value:
    #     error:
    #       id: '9876543210abcdeffedcba0123456789'
    #       timestamp: 1571657444929001
    #       trace_id: 0123456789abcdeffedcba0123456789
    #       parent_id: 9632587410abcdef
    #       transaction_id: '1234567890987654'
    #       transaction:
    #         sampled: true
    #         type: request
    #       culprit: opbeans.controllers.DTInterceptor.preHandle(DTInterceptor.java:73)
    #       log:
    #         message: Request method 'POST' not supported
    #         param_message: Request method 'POST' /events/:event not supported
    #         logger_name: http404
    #         level: error
    #         stacktrace:
    #           - abs_path: /tmp/Socket.java
    #             filename: Socket.java
    #             classname: Request::Socket
    #             function: connect
    #             vars:
    #               key: value
    #             pre_context:
    #               - line1
    #               - line2
    #             context_line: line3
    #             library_frame: true
    #             lineno: 3
    #             module: java.net
    #             colno: 4
    #             post_context:
    #               - line4
    #               - line5
    #           - filename: SimpleBufferingClientHttpRequest.java
    #             lineno: 102
    #             function: executeInternal
    #             abs_path: /tmp/SimpleBufferingClientHttpRequest.java
    #             vars:
    #               key: value
    #       exception:
    #         message: Theusernamerootisunknown
    #         type: java.net.UnknownHostException
    #         handled: true
    #         module: org.springframework.http.client
    #         code: 42
    #         attributes:
    #           foo: bar
    #         cause:
    #           - type: InternalDbError
    #             message: something wrong writing a file
    #             cause:
    #               - type: VeryInternalDbError
    #                 message: disk spinning way too fast
    #               - type: ConnectionError
    #                 message: on top of it,internet doesn't work
    #         stacktrace:
    #           - abs_path: /tmp/AbstractPlainSocketImpl.java
    #             filename: AbstractPlainSocketImpl.java
    #             function: connect
    #             vars:
    #               key: value
    #             pre_context:
    #               - line1
    #               - line2
    #             context_line: '3'
    #             library_frame: true
    #             lineno: 3
    #             module: java.net
    #             colno: 4
    #             post_context:
    #               - line4
    #               - line5
    #           - filename: AbstractClientHttpRequest.java
    #             lineno: 102
    #             function: execute
    #             vars:
    #               key: value
    #       context:
    #         request:
    #           socket:
    #             remote_address: 12.53.12.1
    #             encrypted: true
    #           http_version: '1.1'
    #           method: POST
    #           url:
    #             protocol: 'https:'
    #             full: https://www.example.com/p/a/t/h?query=string#hash
    #             hostname: www.example.com
    #             port: 8080
    #             pathname: /p/a/t/h
    #             search: '?query=string'
    #             hash: '#hash'
    #             raw: /p/a/t/h?query=string#hash
    #           headers:
    #             Forwarded: for=192.168.0.1
    #             host: opbeans-java:3000
    #             content-length: '0'
    #             cookie:
    #               - c1=v1
    #               - c2=v2
    #             Elastic-Apm-Traceparent: 00-8c21b4b556467a0b17ae5da959b5f388-31301f1fb2998121-01
    #           cookies:
    #             c1: v1
    #             c2: v2
    #           env:
    #             SERVER_SOFTWARE: nginx
    #             GATEWAY_INTERFACE: CGI/1.1
    #           body: HelloWorld
    #         response:
    #           status_code: 200
    #           headers:
    #             content-type: application/json
    #           headers_sent: true
    #           finished: true
    #         user:
    #           id: 99
    #           username: foo
    #           email: user@foo.mail
    #         tags:
    #           organization_uuid: 9f0e9d64-c185-4d21-a6f4-4673ed561ec8
    #         custom:
    #           my_key: 1
    #           some_other_value: foobar
    #           and_objects:
    #             foo:
    #               - bar
    #               - baz
    #         service:
    #           name: service1
    #           node:
    #             configured_name: node-xyz
    #           language:
    #             version: '1.2'
    #           framework:
    #             version: '1'
    #             name: Node
    metadataEventIntakeRequestExample:
      summary: A request body example for the metadata event type.
      value:
        metadata:
          process:
            pid: 1234
            title: /usr/lib/jvm/java-10-openjdk-amd64/bin/java
            ppid: 1
            argv:
              - '-v'
          system:
            architecture: amd64
            detected_hostname: 8ec7ceb99074
            configured_hostname: host1
            platform: Linux
            container:
              id: 8ec7ceb990749e79b37f6dc6cd3628633618d6ce412553a552a0fa6b69419ad4
            kubernetes:
              namespace: default
              pod:
                uid: b17f231da0ad128dc6c6c0b2e82f6f303d3893e3
                name: instrumented-java-service
              node:
                name: node-name
          service:
            name: 1234_service-12a3
            version: 4.3.0
            node:
              configured_name: 8ec7ceb990749e79b37f6dc6cd3628633618d6ce412553a552a0fa6b69419ad4
            environment: production
            language:
              name: Java
              version: 10.0.2
            agent:
              version: 1.10.0
              name: java
              ephemeral_id: e71be9ac-93b0-44b9-a997-5638f6ccfc36
            framework:
              name: spring
              version: 5.0.0
            runtime:
              name: Java
              version: 10.0.2
          labels:
            group: experimental
            ab_testing: true
            segment: 5
    metricSetEventIntakeRequestExample:
      summary: A request body example for the metricset event type.
      value:
        metricset:
          samples:
            transaction.breakdown.count:
              value: 12
            transaction.duration.sum.us:
              value: 12
            transaction.duration.count:
              value: 2
            transaction.self_time.sum.us:
              value: 10
            transaction.self_time.count:
              value: 2
            span.self_time.count:
              value: 1
            span.self_time.sum.us:
              value: 633.288
            byte_counter:
              value: 1
            short_counter:
              value: 227
            integer_gauge:
              value: 42767
            long_gauge:
              value: 3147483648
            float_gauge:
              value: 9.16
            double_gauge:
              value: 3.141592653589793
            dotted.float.gauge:
              value: 6.12
            negative.d.o.t.t.e.d:
              value: -1022
          tags:
            code: 200
            success: true
          transaction:
            type: request
            name: GET/
          span:
            type: db
            subtype: mysql
          timestamp: 1571657444929001
    # spanEventIntakeRequestExample:
    #   summary: A request body example for the span event type.
    #   value:
    #     span:
    #       timestamp: 1571657444929001
    #       type: external
    #       subtype: http
    #       id: 1234567890aaaade
    #       transaction_id: '1234567890987654'
    #       trace_id: abcdef0123456789abcdef9876543210
    #       parent_id: abcdef0123456789
    #       action: connect
    #       sync: true
    #       name: GET users-authenticated
    #       duration: 3.781912
    #       stacktrace:
    #         - filename: DispatcherServlet.java
    #           lineno: 547
    #         - function: render
    #           abs_path: /tmp/AbstractView.java
    #           filename: AbstractView.java
    #           lineno: 547
    #           library_frame: true
    #           vars:
    #             key: value
    #           module: org.springframework.web.servlet.view
    #           colno: 4
    #           context_line: line3
    #       context:
    #         db:
    #           instance: customers
    #           statement: SELECT * FROM product_types WHERE user_id = ?
    #           type: sql
    #           user: postgres
    #           link: other.db.com
    #         http:
    #           url: http://localhost:8000
    #           status_code: 302
    #           method: GET
    #           response:
    #             status_code: 200
    #             transfer_size: 300.12
    #             encoded_body_size: 356
    #             decoded_body_size: 401
    #             headers:
    #               content-type: application/json
    #         service:
    #           name: opbeans-java-1
    #           agent:
    #             version: 1.10.0-SNAPSHOT
    #             name: java
    #             ephemeral_id: e71be9ac-93b0-44b9-a997-5638f6ccfc36
    # transactionEventIntakeRequestExample:
    #   summary: A request body example for the transaction event type.
    #   value:
    #     transaction:
    #       timestamp: 1571657444929001
    #       name: ResourceHttpRequestHandler
    #       type: http
    #       id: 4340a8e0df1906ecbfa9
    #       trace_id: 0acd456789abcdef0123456789abcdef
    #       parent_id: abcdefabcdef01234567
    #       span_count:
    #         started: 17
    #         dropped: 0
    #       duration: 32.592981
    #       result: HTTP2xx
    #       sampled: true
    #       context:
    #         service:
    #           name: experimental-java
    #           agent:
    #             version: 1.10.0-SNAPSHOT
    #             ephemeral_id: e71be9ac-93b0-44b9-a997-5638f6ccfc36
    #         request:
    #           socket:
    #             remote_address: 12.53.12.1:8080
    #             encrypted: true
    #           http_version: '1.1'
    #           method: POST
    #           url:
    #             protocol: 'https:'
    #             full: https://www.example.com/p/a/t/h?query=string#hash
    #             hostname: www.example.com
    #             port: '8080'
    #             pathname: /p/a/t/h
    #             search: '?query=string'
    #             hash: '#hash'
    #             raw: /p/a/t/h?query=string#hash
    #           headers:
    #             user-agent:
    #               - Mozilla/5.0(Macintosh;IntelMacOSX10_10_5)AppleWebKit/537.36(KHTML,likeGecko)Chrome/51.0.2704.103Safari/537.36
    #               - MozillaChromeEdge
    #             content-type: text/html
    #             cookie: c1=v1,c2=v2
    #             Elastic-Apm-Traceparent:
    #               - 00-33a0bd4cceff0370a7c57d807032688e-69feaabc5b88d7e8-01
    #           cookies:
    #             c1: v1
    #             c2: v2
    #           env:
    #             SERVER_SOFTWARE: nginx
    #             GATEWAY_INTERFACE: CGI/1.1
    #           body:
    #             string: helloworld
    #             additional:
    #               foo: {}
    #               bar: 123
    #               req: additionalinformation
    #         response:
    #           status_code: 200
    #           transfer_size: 300
    #           encoded_body_size: 356.9
    #           decoded_body_size: 401.9
    #           headers:
    #             content-type: application/json
    #           headers_sent: true
    #           finished: true
    #         user:
    #           id: '99'
    #           username: foo
    #           email: foo@mail.com
    #         tags:
    #           organization_uuid: 9f0e9d64-c185-4d21-a6f4-4673ed561ec8
    #           tag5: null
    #         custom:
    #           my_key: 1
    #           some_other_value: foobar
    #           and_objects:
    #             foo:
    #               - bar
    #               - baz
    #           (: notavalidregexandthatisfine
