[[api-key]]
=== API keys

IMPORTANT: API keys are sent as plain-text,
so they only provide security when used in combination with <<agent-tls,TLS>>.

When enabled, API keys are used to authorize requests to the APM Server.
API keys are not applicable for APM agents running on clients, like the RUM agent,
as there is no way to prevent them from being publicly exposed.

You can assign one or more unique privileges to each API key:

* *Agent configuration* (`config_agent:read`): Required for agents to read
{kibana-ref}/agent-configuration.html[Agent configuration remotely].
* *Ingest* (`event:write`): Required for ingesting agent events.

To secure the communication between APM Agents and the APM Server with API keys,
make sure <<agent-tls,TLS>> is enabled, then complete these steps:

. <<enable-api-key,Enable API keys>>
. <<create-api-key-user,Create an API key user>>
. <<create-an-api-key,Create an API key in {kib}>>
. <<agent-api-key,Set the API key in your APM agents>>

[[enable-api-key]]
[float]
=== Enable API keys

include::./tab-widgets/api-key-widget.asciidoc[]

[[create-api-key-user]]
[float]
=== Create an API key user in {kib}

API keys can only have the same or lower access rights than the user that creates them.
Instead of using a superuser account to create API keys, you can create a role with the minimum required
privileges.

The user creating an {apm-agent} API key must have at least the `manage_own_api_key` cluster privilege
and the APM application-level privileges that it wishes to grant.
In addition, when creating an API key from the {apm-app},
you'll need the appropriate {kib} Space and Feature privileges.

The example below uses the {kib} {kibana-ref}/role-management-api.html[role management API]
to create a role named `apm_agent_key_role`.

[source,js]
----
POST /_security/role/apm_agent_key_role
{
   "cluster": [ "manage_own_api_key" ],
   "applications": [
      {
         "application":"apm",
         "privileges":[
            "event:write",
            "config_agent:read"
         ],
         "resources":[ "*" ]
      },
      {
         "application":"kibana-.kibana",
         "privileges":[ "feature_apm.all" ],
         "resources":[ "space:default" ] <1>
      }
   ]
}
----
<1> This example assigns privileges for the default space.

Assign the newly created `apm_agent_key_role` role to any user that wishes to create {apm-agent} API keys.

[[create-an-api-key]]
[float]
=== Create an API key in the {apm-app}

The {apm-app} has a built-in workflow that you can use to easily create and view {apm-agent} API keys.
Only API keys created in the {apm-app} will show up here.

Using a superuser account, or a user with the role created in the previous step,
open {kib} and navigate to **{observability}** > **APM** > **Settings** > **Agent keys**.
Enter a name for your API key and select at least one privilege.

For example, to create an API key that can be used to ingest APM events
and read agent central configuration, select `config_agent:read` and `event:write`.

// lint ignore apm-agent
Click **Create APM Agent key** and copy the Base64 encoded API key.
You will need this for the next step, and you will not be able to view it again.

[role="screenshot"]
image::images/apm-ui-api-key.png[{apm-app} API key]

[[agent-api-key]]
[float]
=== Set the API key in your APM agents

You can now apply your newly created API keys in the configuration of each of your APM agents.
See the relevant agent documentation for additional information:

// Not relevant for RUM and iOS
* *Go agent*: {apm-go-ref}/configuration.html#config-api-key[`ELASTIC_APM_API_KEY`]
* *.NET agent*: {apm-dotnet-ref}/config-reporter.html#config-api-key[`ApiKey`]
* *Java agent*: {apm-java-ref}/config-reporter.html#config-api-key[`api_key`]
* *Node.js agent*: {apm-node-ref}/configuration.html#api-key[`apiKey`]
* *PHP agent*: {apm-php-ref-v}/configuration-reference.html#config-api-key[`api_key`]
* *Python agent*: {apm-py-ref}/configuration.html#config-api-key[`api_key`]
* *Ruby agent*: {apm-ruby-ref}/configuration.html#config-api-key[`api_key`]

[[configure-api-key-alternative]]
[float]
=== Alternate API key creation methods

API keys can also be created and validated outside of {kib}:

* <<create-api-key-workflow-apm-server>>
* <<create-api-key-workflow-es>>

[[create-api-key-workflow-apm-server]]
[float]
==== APM Server API key workflow

This API creation method only works with the APM Server binary.

deprecated::[8.6.0, Users should create API Keys through {kib} or the {es} REST API]

APM Server provides a command line interface for creating, retrieving, invalidating, and verifying API keys.
Keys created using this method can only be used for communication with APM Server.

[[create-api-key-subcommands]]
[float]
===== `apikey` subcommands

include::{libbeat-dir}/command-reference.asciidoc[tag=apikey-subcommands]

[[create-api-key-privileges]]
[float]
===== Privileges

If privileges are not specified at creation time, the created key will have all privileges.

* `--agent-config` grants the `config_agent:read` privilege
* `--ingest` grants the `event:write` privilege
* `--sourcemap` grants the `sourcemap:write` privilege

[[create-api-key-workflow]]
[float]
===== Create an API key

Create an API key with the `create` subcommand.

The following example creates an API key with a `name` of `java-001`,
and gives the "agent configuration" and "ingest" privileges.

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey create --ingest --agent-config --name java-001
-----

The response will look similar to this:

[source,console-result]
--------------------------------------------------
Name ........... java-001
Expiration ..... never
Id ............. qT4tz28B1g59zC3uAXfW
API Key ........ rH55zKd5QT6wvs3UbbkxOA (won't be shown again)
Credentials .... cVQ0dHoyOEIxZzU5ekMzdUFYZlc6ckg1NXpLZDVRVDZ3dnMzVWJia3hPQQ== (won't be shown again)
--------------------------------------------------

You should always verify the privileges of an API key after creating it.
Verification can be done using the `verify` subcommand.

The following example verifies that the `java-001` API key has the "agent configuration" and "ingest" privileges.

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey verify --agent-config --ingest --credentials cVQ0dHoyOEIxZzU5ekMzdUFYZlc6ckg1NXpLZDVRVDZ3dnMzVWJia3hPQQ==
-----

If the API key has the requested privileges, the response will look similar to this:

[source,console-result]
--------------------------------------------------
Authorized for privilege "event:write"...:          Yes
Authorized for privilege "config_agent:read"...:    Yes
--------------------------------------------------

To invalidate an API key, use the `invalidate` subcommand.
Due to {es} caching, there may be a delay between when this subcommand is executed and when it takes effect.

The following example invalidates the `java-001` API key.

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey invalidate --name java-001
-----

The response will look similar to this:

[source,console-result]
--------------------------------------------------
Invalidated keys ... qT4tz28B1g59zC3uAXfW
Error count ........ 0
--------------------------------------------------

A full list of `apikey` subcommands and flags is available in the <<apikey-command,API key command reference>>.

[[create-api-key-workflow-es]]
[float]
==== {es} API key workflow

It is also possible to create API keys using the {es}
{ref}/security-api-create-api-key.html[create API key API].

This example creates an API key named `java-002`:

[source,kibana]
----
POST /_security/api_key
{
  "name": "java-002", <1>
  "expiration": "1d", <2>
  "role_descriptors": {
    "apm": {
      "applications": [
        {
          "application": "apm",
          "privileges": ["sourcemap:write", "event:write", "config_agent:read"], <3>
          "resources": ["*"]
        }
      ]
    }
  }
}
----
<1> The name of the API key
<2> The expiration time of the API key
<3> Any assigned privileges

The response will look similar to this:

[source,console-result]
----
{
  "id" : "GnrUT3QB7yZbSNxKET6d",
  "name" : "java-002",
  "expiration" : 1599153532262,
  "api_key" : "RhHKisTmQ1aPCHC_TPwOvw"
}
----

The `credential` string, which is what agents use to communicate with APM Server,
is a base64 encoded representation of the API key's `id:api_key`.
It can be created like this:

[source,console-result]
--------------------------------------------------
echo -n GnrUT3QB7yZbSNxKET6d:RhHKisTmQ1aPCHC_TPwOvw | base64
--------------------------------------------------

You can verify your API key has been base64-encoded correctly with the
{ref}/security-api-authenticate.html[Authenticate API]:

["source","sh",subs="attributes"]
-----
curl -H "Authorization: ApiKey R0gzRWIzUUI3eVpiU054S3pYSy06bXQyQWl4TlZUeEcyUjd4cUZDS0NlUQ==" localhost:9200/_security/_authenticate
-----

If the API key has been encoded correctly, you'll see a response similar to the following:

[source,console-result]
----
{
   "username":"1325298603",
   "roles":[],
   "full_name":null,
   "email":null,
   "metadata":{
      "saml_nameid_format":"urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
      "saml(http://saml.elastic-cloud.com/attributes/principal)":[
         "1325298603"
      ],
      "saml_roles":[
         "superuser"
      ],
      "saml_principal":[
         "1325298603"
      ],
      "saml_nameid":"_7b0ab93bbdbc21d825edf7dca9879bd8d44c0be2",
      "saml(http://saml.elastic-cloud.com/attributes/roles)":[
         "superuser"
      ]
   },
   "enabled":true,
   "authentication_realm":{
      "name":"_es_api_key",
      "type":"_es_api_key"
   },
   "lookup_realm":{
      "name":"_es_api_key",
      "type":"_es_api_key"
   }
}
----

You can then use the APM Server CLI to verify that the API key has the requested privileges:

["source","sh",subs="attributes"]
-----
{beatname_lc} apikey verify --credentials R25yVVQzUUI3eVpiU054S0VUNmQ6UmhIS2lzVG1RMWFQQ0hDX1RQd092dw==
-----

If the API key has the requested privileges, the response will look similar to this:

[source,console-result]
----
Authorized for privilege "config_agent:read"...:  Yes
Authorized for privilege "event:write"...:        Yes
Authorized for privilege "sourcemap:write"...:    Yes
----
