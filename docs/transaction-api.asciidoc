[[transaction-api]]
=== Transaction API

The APM Server exposes an API Endpoint to send <<transactions,transaction records>>.
Unless you are implementing an agent, you don't need to know about the specifics of this API.

The following section contains information about:

* <<transaction-endpoint>>
* <<transaction-schema-definition>>
* <<transaction-api-examples>>

[[transaction-endpoint]]
[float]
==== Endpoint
To send a transaction record you need to send a `HTTP POST` request to the APM Server `transactions` endpoint:

[source,bash]
------------------------------------------------------------
http(s)://{hostname}:{port}/v1/transactions
------------------------------------------------------------

To send a record for a frontend transaction (see <<frontend,experimental frontend support>>), 
you need to send a `HTTP POST` request to the APM Server `frontend transactions` endpoint:

[source,bash]
------------------------------------------------------------
http(s)://{hostname}:{port}/v1/client-side/transactions
------------------------------------------------------------

Information pertaining to the record must be sent as a JSON object.

[[transaction-schema-definition]]
[float]
==== Schema Definition

The APM Server uses a JSON Schema for validating the transaction requests.
Find details on how the schema is defined:

* <<transaction-payload-schema>>
* <<transaction-transaction-schema>>
* <<transaction-span-schema>>
* <<transaction-service-schema>>
* <<transaction-system-schema>>
* <<transaction-context-schema>>
* <<transaction-stacktraceframe-schema>>
* <<transaction-request-schema>>
* <<transaction-user-schema>>

[[transaction-payload-schema]]
[float]
===== Payload

[source,json]
----
include::./spec/transactions/payload.json[]
----

[[transaction-transaction-schema]]
[float]
===== Transaction

[source,json]
----
include::./spec/transactions/transaction.json[]
----

[[transaction-span-schema]]
[float]
===== Span

[source,json]
----
include::./spec/transactions/span.json[]
----

[[transaction-service-schema]]
[float]
===== Service

[source,json]
----
include::./spec/service.json[]
----

[[transaction-system-schema]]
[float]
===== System

[source,json]
----
include::./spec/system.json[]
----

[[transaction-context-schema]]
[float]
===== Context

[source,json]
----
include::./spec/context.json[]
----

[[transaction-stacktraceframe-schema]]
[float]
===== Stacktrace Frame

[source,json]
----
include::./spec/stacktrace_frame.json[]
----

[[transaction-request-schema]]
[float]
===== Request

[source,json]
----
include::./spec/request.json[]
----

[[transaction-user-schema]]
[float]
===== User

[source,json]
----
include::./spec/user.json[]
----

[[transaction-api-examples]]
[float]
==== Examples

Send an example request to the APM Server:

["source","sh",subs="attributes"]
------------------------------------------------------------
curl http://localhost:8200/v1/transactions \
  --header "Content-Type: application/json" \
  --data @docs/data/intake-api/generated/transaction/payload.json
------------------------------------------------------------

See examples on how a transaction request to the APM Server can look like:

* <<payload-with-transactions>>
* <<payload-with-minimal-transaction>>
* <<payload-with-minimal-span>>

[[payload-with-transactions]]
[float]
===== Payload with several Transactions

[source,json]
----
include::./data/intake-api/generated/transaction/payload.json[]
----

[[payload-with-minimal-transaction]]
[float]
===== Payload with a minimal Transaction

[source,json]
----
include::./data/intake-api/generated/transaction/minimal_payload.json[]
----

[[payload-with-minimal-span]]
[float]
===== Payload with a Transaction with a minimal Span

[source,json]
----
include::./data/intake-api/generated/transaction/minimal_span.json[]
----
