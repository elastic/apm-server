[[tune-data-ingestion]]
= Tune Data Ingestion

[partintro]
--
This section explains how to adapt data ingestion according to your needs.

* <<tune-apm-server>>
* <<tune-es>>

--

[[tune-apm-server]]
== Tune APM Server


* <<tune-output-config>>
* <<adjust-queue-size>>
* <<adjust-concurrent-requests>>
* <<add-apm-server-instances>>
* <<reduce-payload-size>>

[[tune-output-config]]
[float]
=== Tune APM Server output parameters for your Elasticsearch cluster

If your Elasticsearch cluster is not ingesting the amount of data you expect,
you can tweak a few APM Server settings:

* Adjust `output.elasticsearch.workers`.
See {ref}/tune-for-indexing-speed.html[tune for indexing speed] for an overview.
* Ensure `output.elasticsearch.bulk_max_size` is set to a high value, for example 5120.
  The default of 50 is very conservative.
* Ensure that `queue.mem.events` is set to a reasonable value compared to your other settings.
A good rule of thumb is that `queue.mem.events` should equal `output.elasticsearch.worker` multiplied by `output.elasticsearch.bulk_max_size`.

The <<configuring-output,output configuration>> section shows more details.

[[adjust-queue-size]]
[float]
=== Adjust internal queue size

APM Server uses an internal queue to buffer incoming events.
A larger queue can retain more data if Elasticsearch is unavailable for longer periods,
and it alleviates problems that might result from sudden spikes of traffic.
You can adjust the queue size by overriding `queue.mem.events`.
Increasing `queue.mem.events` can significantly affect APM Server memory usage.

[[adjust-concurrent-requests]]
[float]
=== Adjust concurrent requests
APM Server has a limit to how many requests can be processed concurrently.
This limit is determined by the `apm-server.concurrent_requests` setting.
Increasing this value will improve throughput, but it can significantly affect APM Server memory usage.

[[add-apm-server-instances]]
[float]
=== Add APM Server instances

If the APM Server cannot process data quickly enough,
you will see request timeouts.

One way to solve this problem is to increase processing power.
This can be done by either migrating your APM Server to a more powerful machine
or adding more APM Server instances.
Having several instances will also increase <<high-availability, availability>>.

[[reduce-payload-size]]
[float]
=== Reduce the payload size

Large payloads may result in request timeouts.
You can reduce the payload size by decreasing the flush interval in the agents.
This will cause agents to send smaller and more frequent requests.

Optionally you can also <<reduce-sample-rate, reduce the sample rate>> or <<reduce-stacktrace, reduce the amount of stacktraces>>.

Read more in the {apm-agents-ref}/index.html[agents documentation].

[[tune-es]]
== Tune Elasticsearch

Get insights about tuning the Elasticsearch ingestion rate,
especially with regards to

* refresh interval
* disable swapping
* optimizing filesystem cache
* considerations regarding faster hardware
* setting the indexing buffer size

directly at the {ref}/tune-for-indexing-speed.html[Elasticsearch reference].

You might also want to read up on how to {ref}/tune-for-disk-usage.html[tune for disk usage].
