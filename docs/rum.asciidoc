[[rum]]
= Real User Monitoring (RUM)
[partintro]
--

NOTE: Real user monitoring is an experimental feature not intended for production usage at the moment. 

By supporting real user monitoring (RUM).
Elastic APM allows to collect performance data about your frontend JavaScript applications 
by setting up the 
https://github.com/elastic/apm-agent-js-base[JavaScript Frontend Agent].

You can make use of <<sourcemaps, source maps>> when using Elastic RUM. 
--

[[sourcemaps]]
== Source Maps

NOTE: Source maps is an experimental feature not intended for production usage at the moment. 

It is common practice to minify client-side JavaScript code for several reasons, e.g. performance gain. 
This can make debugging very difficult, as it is hard to read the minified files.
Source mapping can help for debugging minfied JavaScript files, 
by mapping code from the minified files to the original source code. 

APM Server provides a <<sourcemap-api,Source Map API>> 
which accepts source maps complying to the 
https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k[Source map revision 3 proposal].

Uploaded source maps are used to map _stack trace_ information from recorded transaction and error documents 
to the original source code files for easier debugging.  

[[sourcemap-apply]]
[float]
=== How source maps are applied

When source maps have been <<sourcemap-endpoint,uploaded>> and <<frontend-enable,RUM support>> is enabled, 
source mapping is automatically applied to the _stack trace frames_ of all errors and transactions 
recorded with the
https://github.com/elastic/apm-agent-js-base[JavaScript Frontend Agent].

The server tries to find an uploaded source map for every `stack trace frame` of the record.
The following information is used to find the previously uploaded source map entry:

* the record's `service.name` is matched against the source map's `service_name`
* the record's `service.version` is matched against the source map's `service_version`
* the stack trace frame's `abs_path` is matched against the source map's `bundle_filepath`

If multiple source maps with the same meta information are found, 
the source map with the latest upload timestamp is used. 

In case a matching source map is found and the source map can be applied to the `stack trace frame`, 
the frame's information is updated with the mapped information before the record is indexed.
The following information is changed to reflect the original source code file, when source mapping is applied:

* `filename`
* `function`
* `line number`
* `column number`
* `abs path`: is https://golang.org/pkg/path/#Clean[cleaned] to be the shortest path name equivalent to the given path name 

See how an <<sourcemap-example, example source map>> looks like in Elasticsearch.
