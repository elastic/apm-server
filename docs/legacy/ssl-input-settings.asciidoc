[[agent-server-ssl]]
=== SSL/TLS input settings

****
image:./binary-yes-fm-yes.svg[supported deployment methods]

Most options on this page are supported by all APM Server deployment methods.
****

These settings apply to SSL/TLS communication between the APM Server and APM Agents.
See <<agent-tls>> to learn more.

include::../tab-widgets/tls-widget.asciidoc[]

[float]
==== Enable TLS

Enable or disable TLS. Disabled by default.

|====
| APM Server binary | `apm-server.ssl.enabled`
| Fleet-managed     | `Enable TLS`
|====

[float]
==== File path to server certificate

The path to the file containing the certificate for Server authentication.
Required if TLS is enabled.

|====
| APM Server binary | `apm-server.ssl.certificate`
| Fleet-managed     | `File path to server certificate`
|====

[float]
==== File path to server certificate key

The path to the file containing the Server certificate key.
Required if TLS is enabled.

|====
| APM Server binary | `apm-server.ssl.key`
| Fleet-managed     | `File path to server certificate key`
|====

[float]
==== Key passphrase

The passphrase used to decrypt an encrypted key stored in the configured `apm-server.ssl.key` file.

|====
| APM Server binary | `apm-server.ssl.key_passphrase`
| Fleet-managed     | N/A
|====

[float]
==== Supported protocol versions

This setting is a list of allowed protocol versions:
`SSLv3`, `TLSv1.0`, `TLSv1.1`, `TLSv1.2` and `TLSv1.3`. We do not recommend using `SSLv3` or `TLSv1.0`.
The default value is `[TLSv1.1, TLSv1.2, TLSv1.3]`.

|====
| APM Server binary | `apm-server.ssl.supported_protocols`
| Fleet-managed     | `Supported protocol versions`
|====

[float]
==== Cipher suites for TLS connections

The list of cipher suites to use. The first entry has the highest priority.
If this option is omitted, the Go crypto library's https://golang.org/pkg/crypto/tls/[default suites]
are used (recommended). Note that TLS 1.3 cipher suites are not
individually configurable in Go, so they are not included in this list.

|====
| APM Server binary | `apm-server.ssl.cipher_suites`
| Fleet-managed     | `Cipher suites for TLS connections`
|====

include::{libbeat-dir}/shared-ssl-config.asciidoc[tag=cipher_suites]

[float]
==== Curve types for ECDHE based cipher suites

The list of curve types for ECDHE (Elliptic Curve Diffie-Hellman ephemeral key exchange).

|====
| APM Server binary | `apm-server.ssl.curve_types`
| Fleet-managed     | `Curve types for ECDHE based cipher suites`
|====

[float]
==== List of root certificates for verifying client certificates

The list of root certificates for verifying client certificates.
If `certificate_authorities` is empty or not set, the trusted certificate authorities of the host system are used.
If `certificate_authorities` is set, `client_authentication` will be automatically set to `required`.
Sending client certificates is currently only supported by the RUM agent through the browser,
the Java agent (see {apm-java-ref-v}/ssl-configuration.html[Agent certificate authentication]),
and the Jaeger agent.

|====
| APM Server binary | `apm-server.ssl.certificate_authorities`
| Fleet-managed     | N/A
|====

[float]
==== Client authentication

This configures what types of client authentication are supported. The valid options
are `none`, `optional`, and `required`. The default is `none`.
If `certificate_authorities` has been specified, this setting will automatically change to `required`.
This option only needs to be configured when the agent is expected to provide a client certificate.
Sending client certificates is currently only supported by the RUM agent through the browser,
the Java agent (see {apm-java-ref-v}/ssl-configuration.html[Agent certificate authentication]),
and the Jaeger agent.

* `none` - Disables client authentication.
* `optional` - When a client certificate is given, the server will verify it.
* `required` - Requires clients to provide a valid certificate.

|====
| APM Server binary | `apm-server.ssl.client_authentication`
| Fleet-managed     | N/A
|====
