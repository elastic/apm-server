[[configuration-anonymous]]
== Anonymous auth configuration options

++++
<titleabbrev>Anonymous authentication</titleabbrev>
++++

IMPORTANT: {deprecation-notice-config}
If you're using {fleet} and the Elastic APM integration, please see <<input-apm>> instead.

Elastic APM agents can send unauthenticated (anonymous) events to the APM Server.
This is useful for agents that run on clients, like the Real User Monitoring (RUM) agent running in a browser,
or the iOS/Swift agent running in a user application.

Example configuration:

["source","yaml"]
----
apm-server.auth.anonymous.enabled: true
apm-server.auth.anonymous.allow_agent: [rum-js]
apm-server.auth.anonymous.allow_service: [my_service_name]
apm-server.auth.anonymous.rate_limit.event_limit: 300
apm-server.auth.anonymous.rate_limit.ip_limit: 1000
----

[float]
[[config-auth-anon-rum]]
=== Real User Monitoring (RUM)

Anonymous authentication must be enabled to collect RUM data.
For this reason, anonymous auth will be enabled automatically if <<rum-enable,`apm-server.rum.enabled`>>
is set to `true`, and <<config-auth-anon-enabled,`apm-server.auth.anonymous.enabled`>> is not explicitly defined.

See <<configuration-rum>> for additional RUM configuration options.

[float]
[[config-auth-anon-mitigating]]
=== Mitigating malicious requests

There are a few configuration variables that can mitigate the impact of malicious requests to an
unauthenticated APM Server endpoint.

Use the <<config-auth-anon-allow-agent>> and <<config-auth-anon-allow-service>> configs to ensure that the
`agent.name` and `service.name` of each incoming request match a specified list.

Additionally, the APM Server can rate-limit unauthenticated requests based on the client IP address
(`client.ip`) of the request with <<config-auth-anon-event-limit>>.
This allows you to specify the maximum number of requests allowed per unique IP address, per second.

[float]
[[config-auth-anon-client-ip]]
==== Deriving an incoming request's `client.ip` address

The remote IP address of an incoming request might be different
from the end-user's actual IP address, for example, because of a proxy. For this reason,
the APM Server attempts to derive the IP address of an incoming request from HTTP headers.
The supported headers are parsed in the following order:

1. `Forwarded`
2. `X-Real-Ip`
3. `X-Forwarded-For`

If none of these headers are present, the remote address for the incoming request is used.

[float]
[[config-auth-anon-client-ip-concerns]]
==== Using a reverse proxy or load balancer

HTTP headers are easily modified;
it's possible for anyone to spoof the derived `client.ip` value by changing or setting,
for example, the value of the `X-Forwarded-For` header.
For this reason, if any of your clients are not trusted,
we recommend setting up a reverse proxy or load balancer in front of the APM Server.

Using a proxy allows you to clear any existing IP-forwarding HTTP headers,
and replace them with one set by the proxy.
This prevents malicious users from cycling spoofed IP addresses to bypass the
APM Server's rate limiting feature.

[float]
[[config-auth-anon]]
=== Configuration reference

Specify the following options in the `apm-server.auth.anonymous` section of the `apm-server.yml` config file:

[float]
[[config-auth-anon-enabled]]
==== `enabled`

Enable or disable anonymous authentication.

Default: `false` (disabled)

[float]
[[config-auth-anon-allow-agent]]
==== `allow_agent`
A list of permitted {apm-agent} names for anonymous authentication.
Names in this list must match the agent's `agent.name`.

Default: `[rum-js, js-base]` (only RUM agent events are accepted)

[float]
[[config-auth-anon-allow-service]]
==== `allow_service`
A list of permitted service names for anonymous authentication.
Names in this list must match the agent's `service.name`.
This can be used to limit the number of service-specific indices or data streams created.

Default: Not set (any service name is accepted)

[float]
[[config-auth-anon-ip-limit]]
==== `rate_limit.ip_limit`
The number of unique IP addresses to track in an LRU cache.
IP addresses in the cache will be rate limited according to the <<config-auth-anon-event-limit>> setting.
Consider increasing this default if your application has many concurrent clients.

Default: `1000`

[float]
[[config-auth-anon-event-limit]]
==== `rate_limit.event_limit`
The maximum number of events allowed per second, per agent IP address.

Default: `300`
