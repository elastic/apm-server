[id="securing-{beatname_lc}"]
= Secure {beatname_uc}

++++
<titleabbrev>Secure</titleabbrev>
++++

IMPORTANT: {deprecation-notice-config}
If you're using {fleet} and the Elastic APM integration, please see <<secure-agent-communication>> instead.

The following topics provide information about securing the {beatname_uc}
process and connecting to a cluster that has {security-features} enabled.

You can use role-based access control and optionally, API keys to grant {beatname_uc} users access to
secured resources.

* <<feature-roles>>
* <<beats-api-keys>>.

After privileged users have been created, use authentication to connect to a secured Elastic cluster.

* <<securing-communication-elasticsearch>>
ifndef::no-output-logstash[]
* <<configuring-ssl-logstash>>
endif::[]

ifdef::apm-server[]
For secure communication between APM Server and APM Agents, see <<secure-communication-agents>>.
endif::[]

ifndef::serverless[]
ifndef::win_only[]
On Linux, {beatname_uc} can take advantage of secure computing mode to restrict the
system calls that a process can issue.

* <<linux-seccomp>>
endif::[]
endif::[]

// APM HTTPS information
ifdef::beat-specific-security[]
include::{beat-specific-security}[]
endif::[]



ifdef::apm-server[]
// APM privileges
include::{docdir}/legacy/feature-roles.asciidoc[]
// APM API keys
include::{docdir}/legacy/api-keys.asciidoc[]
endif::[]

ifndef::apm-server[]
// Beat privileges
include::./security/users.asciidoc[]
// Beat API keys
include::./security/api-keys.asciidoc[]
endif::[]

// APM Agent security
ifdef::apm-server[]
include::{docdir}/legacy/secure-communication-agents.asciidoc[]
endif::[]

// Elasticsearch security
include::./https.asciidoc[]

// Logstash security
ifndef::no-output-logstash[]
include::./shared-ssl-logstash-config.asciidoc[]
endif::[]

// Linux Seccomp
ifndef::serverless[]
ifndef::win_only[]
include::./security/linux-seccomp.asciidoc[]
endif::[]
endif::[]
