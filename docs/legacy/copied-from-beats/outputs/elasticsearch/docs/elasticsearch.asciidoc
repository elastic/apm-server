[[elasticsearch-output]]
=== Configure the {es} output

++++
<titleabbrev>{es}</titleabbrev>
++++

IMPORTANT: {deprecation-notice-config}

The {es} output sends events directly to {es} using the {es} HTTP API.

Example configuration:

["source","yaml",subs="attributes"]
----
output.elasticsearch:
  hosts: ["https://myEShost:9200"] <1>
----
<1> To enable SSL, add `https` to all URLs defined under __hosts__.

When sending data to a secured cluster through the `elasticsearch`
output, {beatname_uc} can use any of the following authentication methods:

* Basic authentication credentials (username and password).
* Token-based (API key) authentication.
* Public Key Infrastructure (PKI) certificates.

*Basic authentication:*

["source","yaml",subs="attributes,callouts"]
----
output.elasticsearch:
  hosts: ["https://myEShost:9200"]
  username: "{beat_default_index_prefix}_writer"
  password: "{pwd}"
----

*API key authentication:*

["source","yaml",subs="attributes,callouts"]
----
output.elasticsearch:
  hosts: ["https://myEShost:9200"]
  api_key: "KnR6yE41RrSowb0kQ0HWoA"
----

*PKI certificate authentication:*

["source","yaml",subs="attributes,callouts"]
----
output.elasticsearch:
  hosts: ["https://myEShost:9200"]
  ssl.certificate: "/etc/pki/client/cert.pem"
  ssl.key: "/etc/pki/client/cert.key"
----

See <<securing-communication-elasticsearch>> for details on each authentication method.

==== Compatibility

This output works with all compatible versions of {es}. See the
https://www.elastic.co/support/matrix#matrix_compatibility[Elastic Support
Matrix].

==== Configuration options

You can specify the following options in the `elasticsearch` section of the +{beatname_lc}.yml+ config file:

===== `enabled`

The enabled config is a boolean setting to enable or disable the output. If set
to `false`, the output is disabled.

The default value is `true`.


[[hosts-option]]
===== `hosts`

The list of {es} nodes to connect to. The events are distributed to
these nodes in round robin order. If one node becomes unreachable, the event is
automatically sent to another node. Each {es} node can be defined as a `URL` or `IP:PORT`.
For example: `http://192.15.3.2`, `https://es.found.io:9230` or `192.24.3.2:9300`.
If no port is specified, `9200` is used.

NOTE: When a node is defined as an `IP:PORT`, the _scheme_ and _path_ are taken from the
<<protocol-option,`protocol`>> and <<path-option,`path`>> config options.

[source,yaml]
------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["10.45.3.2:9220", "10.45.3.1:9230"] <1>
  protocol: https
  path: /elasticsearch
------------------------------------------------------------------------------

In the previous example, the {es} nodes are available at `https://10.45.3.2:9220/elasticsearch` and
`https://10.45.3.1:9230/elasticsearch`.

===== `compression_level`

The gzip compression level. Setting this value to `0` disables compression.
The compression level must be in the range of `1` (best speed) to `9` (best compression).

Increasing the compression level will reduce the network usage but will increase the CPU usage.

The default value is `0`.

===== `escape_html`

Configure escaping of HTML in strings. Set to `true` to enable escaping.

The default value is `false`.

===== `api_key`

Instead of using a username and password, you can use API keys to secure communication
with {es}. The value must be the ID of the API key and the API key joined by a colon: `id:api_key`.

See <<beats-api-keys>> for more information.

===== `username`

The basic authentication username for connecting to {es}.

This user needs the privileges required to publish events to {es}.
To create a user like this, see <<privileges-to-publish-events>>.

===== `password`

The basic authentication password for connecting to {es}.

===== `parameters`

Dictionary of HTTP parameters to pass within the URL with index operations.

[[protocol-option]]
===== `protocol`

The name of the protocol {es} is reachable on. The options are:
`http` or `https`. The default is `http`. However, if you specify a URL for
<<hosts-option,`hosts`>>, the value of `protocol` is overridden by whatever scheme you
specify in the URL.

[[path-option]]
===== `path`

An HTTP path prefix that is prepended to the HTTP API calls. This is useful for
the cases where {es} listens behind an HTTP reverse proxy that exports
the API under a custom prefix.

===== `headers`

Custom HTTP headers to add to each request created by the {es} output.
Example:

[source,yaml]
------------------------------------------------------------------------------
output.elasticsearch.headers:
  X-My-Header: Header contents
------------------------------------------------------------------------------

It is possible to specify multiple header values for the same header
name by separating them with a comma.

===== `proxy_url`

The URL of the proxy to use when connecting to the {es} servers. The
value may be either a complete URL or a "host[:port]", in which case the "http"
scheme is assumed. If a value is not specified through the configuration file
then proxy environment variables are used. See the
https://golang.org/pkg/net/http/#ProxyFromEnvironment[Go documentation]
for more information about the environment variables.

// output.elasticsearch.index has been removed from APM Server
ifndef::apm-server[]

[[index-option-es]]
===== `index`

The index name to write events to when you're using daily indices. The default is
+"{beatname_lc}-%{[{beat_version_key}]}-%{+yyyy.MM.dd}"+, for example,
+"{beatname_lc}-{version}-{localdate}"+. If you change this setting, you also
need to configure the `setup.template.name` and `setup.template.pattern` options
(see <<configuration-template>>).

ifndef::no_dashboards[]
If you are using the pre-built {kib}
dashboards, you also need to set the `setup.dashboards.index` option (see
<<configuration-dashboards>>).
endif::no_dashboards[]

ifndef::no_ilm[]
When <<ilm,{ilm} ({ilm-init})>> is enabled, the default `index` is
+"{beatname_lc}-%{[{beat_version_key}]}-%{+yyyy.MM.dd}-%{index_num}"+, for example,
+"{beatname_lc}-{version}-{localdate}-000001"+. Custom `index` settings are ignored
when {ilm-init} is enabled. If youâ€™re sending events to a cluster that supports index
lifecycle management, see <<ilm>> to learn how to change the index name.
endif::no_ilm[]

You can set the index dynamically by using a format string to access any event
field. For example, this configuration uses a custom field, `fields.log_type`,
to set the index:

["source","yaml",subs="attributes"]
------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["http://localhost:9200"]
  index: "%{[fields.log_type]}-%{[{beat_version_key}]}-%{+yyyy.MM.dd}" <1>
------------------------------------------------------------------------------

<1> We recommend including +{beat_version_key}+ in the name to avoid mapping issues
when you upgrade.

With this configuration, all events with `log_type: normal` are sent to an
index named +normal-{version}-{localdate}+, and all events with
`log_type: critical` are sent to an index named
+critical-{version}-{localdate}+.

TIP: To learn how to add custom fields to events, see the
<<libbeat-configuration-fields,`fields`>> option.

See the <<indices-option-es,`indices`>> setting for other ways to set the index
dynamically.
endif::apm-server[]

// output.elasticsearch.indices has been removed from APM Server
ifndef::apm-server[]

[[indices-option-es]]
===== `indices`

An array of index selector rules. Each rule specifies the index to use for
events that match the rule. During publishing, {beatname_uc} uses the first
matching rule in the array. Rules can contain conditionals, format string-based
fields, and name mappings. If the `indices` setting is missing or no rule
matches, the <<index-option-es,`index`>> setting is used.

ifndef::no_ilm[]
Similar to `index`, defining custom `indices` will disable <<ilm>>.
endif::no_ilm[]

Rule settings:

*`index`*:: The index format string to use. If this string contains field
references, such as `%{[fields.name]}`, the fields must exist, or the rule fails.

*`mappings`*:: A dictionary that takes the value returned by `index` and maps it
to a new name.

*`default`*:: The default string value to use if `mappings` does not find a
match.

*`when`*:: A condition that must succeed in order to execute the current rule.
ifndef::no-processors[]
All the <<conditions,conditions>> supported by processors are also supported
here.
endif::no-processors[]

The following example sets the index based on whether the `message` field
contains the specified string:

["source","yaml",subs="attributes"]
------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["http://localhost:9200"]
  indices:
    - index: "warning-%{[{beat_version_key}]}-%{+yyyy.MM.dd}"
      when.contains:
        message: "WARN"
    - index: "error-%{[{beat_version_key}]}-%{+yyyy.MM.dd}"
      when.contains:
        message: "ERR"
------------------------------------------------------------------------------


This configuration results in indices named +warning-{version}-{localdate}+
and +error-{version}-{localdate}+ (plus the default index if no matches are
found).

The following example sets the index by taking the name returned by the `index`
format string and mapping it to a new name that's used for the index:

["source","yaml"]
------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["http://localhost:9200"]
  indices:
    - index: "%{[fields.log_type]}"
      mappings:
        critical: "sev1"
        normal: "sev2"
      default: "sev3"
------------------------------------------------------------------------------


This configuration results in indices named `sev1`, `sev2`, and `sev3`.

The `mappings` setting simplifies the configuration, but is limited to string
values. You cannot specify format strings within the mapping pairs.
endif::apm-server[]

ifndef::no_ilm[]
[[ilm-es]]
===== `ilm`

Configuration options for {ilm}.

See <<ilm>> for more information.
endif::no_ilm[]

ifndef::no-pipeline[]
[[pipeline-option-es]]
===== `pipeline`

A format string value that specifies the ingest node pipeline to write events to.

["source","yaml"]
------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["http://localhost:9200"]
  pipeline: my_pipeline_id
------------------------------------------------------------------------------

For more information, see <<configuring-ingest-node>>.

You can set the ingest node pipeline dynamically by using a format string to
access any event field. For example, this configuration uses a custom field,
`fields.log_type`, to set the pipeline for each event:

["source","yaml",subs="attributes"]
------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["http://localhost:9200"]
  pipeline: "%{[fields.log_type]}_pipeline"
------------------------------------------------------------------------------

With this configuration, all events with `log_type: normal` are sent to a pipeline
named `normal_pipeline`, and all events with `log_type: critical` are sent to a
pipeline named `critical_pipeline`.

TIP: To learn how to add custom fields to events, see the
<<libbeat-configuration-fields,`fields`>> option.

See the <<pipelines-option-es,`pipelines`>> setting for other ways to set the
ingest node pipeline dynamically.

[[pipelines-option-es]]
===== `pipelines`

An array of pipeline selector rules. Each rule specifies the ingest node
pipeline to use for events that match the rule. During publishing, {beatname_uc}
uses the first matching rule in the array. Rules can contain conditionals,
format string-based fields, and name mappings. If the `pipelines` setting is
missing or no rule matches, the <<pipeline-option-es,`pipeline`>> setting is
used.

Rule settings:

*`pipeline`*:: The pipeline format string to use. If this string contains field
references, such as `%{[fields.name]}`, the fields must exist, or the rule
fails.

*`mappings`*:: A dictionary that takes the value returned by `pipeline` and maps
it to a new name.

*`default`*:: The default string value to use if `mappings` does not find a
match.

*`when`*:: A condition that must succeed in order to execute the current rule.
ifndef::no-processors[]
All the <<conditions,conditions>> supported by processors are also supported
here.
endif::no-processors[]

The following example sends events to a specific pipeline based on whether the
`message` field contains the specified string:

["source","yaml"]
------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["http://localhost:9200"]
  pipelines:
    - pipeline: "warning_pipeline"
      when.contains:
        message: "WARN"
    - pipeline: "error_pipeline"
      when.contains:
        message: "ERR"
------------------------------------------------------------------------------


The following example sets the pipeline by taking the name returned by the
`pipeline` format string and mapping it to a new name that's used for the
pipeline:

["source","yaml"]
------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["http://localhost:9200"]
  pipelines:
    - pipeline: "%{[fields.log_type]}"
      mappings:
        critical: "sev1_pipeline"
        normal: "sev2_pipeline"
      default: "sev3_pipeline"
------------------------------------------------------------------------------


With this configuration, all events with `log_type: critical` are sent to
`sev1_pipeline`, all events with `log_type: normal` are sent to a
`sev2_pipeline`, and all other events are sent to `sev3_pipeline`.

For more information about ingest node pipelines, see
<<configuring-ingest-node>>.

endif::[]

===== `max_retries`

ifdef::ignores_max_retries[]
{beatname_uc} ignores the `max_retries` setting and retries indefinitely.
endif::[]

ifndef::ignores_max_retries[]
The number of times to retry publishing an event after a publishing failure.
After the specified number of retries, the events are typically dropped.

Set `max_retries` to a value less than 0 to retry until all events are published.

The default is 3.
endif::[]

===== `flush_bytes`

The bulk request size threshold, in bytes, before flushing to {es}.
The value must have a suffix, e.g. `"1MB"`. The default is `5MB`.

===== `flush_interval`

The maximum duration to accumulate events for a bulk request before being flushed to {es}.
The value must have a duration suffix, e.g. `"5s"`. The default is `1s`.

===== `backoff.init`

The number of seconds to wait before trying to reconnect to {es} after
a network error. After waiting `backoff.init` seconds, {beatname_uc} tries to
reconnect. If the attempt fails, the backoff timer is increased exponentially up
to `backoff.max`. After a successful connection, the backoff timer is reset. The
default is `1s`.


===== `backoff.max`

The maximum number of seconds to wait before attempting to connect to
{es} after a network error. The default is `60s`.

===== `timeout`

The HTTP request timeout in seconds for the {es} request. The default is 90.

===== `ssl`

Configuration options for SSL parameters like the certificate authority to use
for HTTPS-based connections. If the `ssl` section is missing, the host CAs are used for HTTPS connections to
{es}.

See the <<securing-communication-elasticsearch,secure communication with {es}>> guide
or <<configuration-ssl,SSL configuration reference>> for more information.

===== `kerberos`

Configuration options for Kerberos authentication.

See <<configuration-kerberos>> for more information.
