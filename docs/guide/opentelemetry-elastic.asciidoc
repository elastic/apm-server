[[open-telemetry-elastic]]
=== OpenTelemetry integration

:ot-spec:       https://github.com/open-telemetry/opentelemetry-specification/blob/master/README.md
:ot-repo:       https://github.com/open-telemetry/opentelemetry-collector
:ot-pipelines:  {ot-repo}/blob/master/docs/pipelines.md
:ot-extension:  {ot-repo}/blob/master/extension/README.md
:ot-scaling:    {ot-repo}/blob/master/docs/performance.md

:ot-collector:  https://opentelemetry.io/docs/collector/about/
:ot-dockerhub:  https://hub.docker.com/r/otel/opentelemetry-collector-contrib-dev

// Make tab-widgets work
include::../tab-widgets/code.asciidoc[]

Elastic's OpenTelemetry integration allows you to reuse your existing OpenTelemetry
instrumentation to quickly analyze distributed traces and metrics to help you monitor
business KPIs and technical components with the {stack}.

[[what-is-opentelemetry]]
==== What is OpenTelemetry?

OpenTelemetry is a set of APIs, SDKs, tooling, and integrations that enable the creation and
management of telemetry data. It formed through a merger of the OpenTracing and OpenCensus projects.

OpenTelemetry is an open-source project that provides the components necessary to observe your applications and services.
If you're unfamiliar with the project, see the {ot-spec}[spec] for more information.

[float]
[[open-telemetry-elastic-exporter]]
==== Elastic exporter

Elastic's integration is designed to drop into your current OpenTelemetry setup.
We've done this by extending the "contrib" OpenTelemetry collector and adding an Elastic exporter.

Before sending the data to the {stack}, the exporter translates the OpenTelemetry trace data collected from your services
and the metrics data collected from your infrastructure and applications to Elastic's protocol.
By extending the OpenTelemetry collector,
no changes are needed in your instrumented services to begin using the {stack}.

[role="screenshot"]
image::images/open-telemetry-elastic-arch.png[OpenTelemetry Elastic architecture diagram]

[float]
[[open-telemetry-elastic-works]]
==== How the OpenTelemetry Collector works

The OpenTelemetry collector uses the following three types of components to handle data:

* `receivers`: Configure how data gets to the collector. At least one receiver must be configured.
* `processors`: Defines optional transformations that occur between receiving and exporting data.
* `exporters`: Configures how data is sent to its destination--in this case, the {stack}.

Once a `receiver`, `processor`, and `exporter` is defined, `pipelines` can be configured in the `services` section of your configuration.
The `traces` and `metrics` pipelines define the path of trace data and metrics through your collector and bring all three of these components together.

TIP: More information is available in the {ot-pipelines}[OpenTelemetry pipeline docs].

A final note: `extensions` can also be enabled for tasks like monitoring the health of the collector.
See the {ot-extension}[OpenTelemetry extension readme] for a list of supported extensions.

[[open-telemetry-elastic-get-started]]
==== Get started

NOTE: This guide assumes you've already instrumented your services with the OpenTelemetry API and/or SDK.
If you haven't, see the Elastic APM <<install-and-run,install and run guide>> to get started with Elastic APM Agents instead.

[float]
[[open-telemetry-elastic-deployment-planning]]
==== Plan your deployment

OpenTelemetry Collectors can be run as an Agent, or as standalone collectors.
They can be deployed as often as necessary and scaled up or out.

Deployment planning resources are available in OpenTelemetry's {ot-collector}[Getting Started]
documentation and {ot-scaling}[Collector Performance] research.

[float]
[[open-telemetry-elastic-download]]
==== Download the collector

The Elastic exporter lives in the {ot-repo}[`opentelemetry-collector-contrib repository`],
and the latest release can be downloaded from {ot-repo}/releases[GitHub releases page].

Docker images are available on {ot-dockerhub}[dockerhub]:

[source,bash]
----
docker pull otel/opentelemetry-collector-contrib-dev
----

You can also build the collector-contrib repository by cloning it and running:

[source,bash]
----
make otelcontribcol
----

[[open-telemetry-elastic-traces-metrics]]
==== Collect traces and metrics

To export traces and metrics to the OpenTelemetry Collector, ensure that you have instrumented your services and applications
with the OpenTelemetry API and/or SDK. If you haven't, see the Elastic APM <<install-and-run,install and run guide>> to get started
with Elastic APM Agents instead.

Here is an example of how to set up the OpenTelemetry Java agent.

[source,bash]
----
export OTEL_RESOURCE_ATTRIBUTES=service.name=frontend,service.version=1.0-SNAPSHOT,deployment.environment=staging
java -javaagent:/path/to/opentelemetry-javaagent-all-0.10.1.jar \
     -Dotel.otlp.endpoint=my-otel-collector.mycompany.com:55680 \
     -jar target/frontend-1.0-SNAPSHOT.jar
----

Here is an example of how to capture business metrics from an application.

[source,java]
----
// initialize metric
Meter meter = OpenTelemetry.getGlobalMeter("my-frontend");
DoubleCounter orderValueCounter = meter.doubleCounterBuilder("order_value").build();

public void createOrder(HttpServletRequest request) {

   // create order in the database
   ...
   // increment business metrics for monitoring
   orderValueCounter.add(orderPrice);
}
----

[float]
[[open-telemetry-elastic-configure]]
==== Configure the collector

Create a `yaml` configuration file.

This example configuration file accepts input from an OpenTelemetry Agent, processes the data, and sends it to an {ess} instance.

[source,yml]
----
  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: 'localhost:55680'
    hostmetrics: <1>
      collection_interval: 1m
      scrapers:
        load:
        memory:

  processors:
    batch: null
    queued_retry: null

  exporters:
    elastic:
      apm_server_url: 'https://elasticapm.example.com' <2>
      secret_token: 'APM_SERVER_SECRET_TOKEN'

  service:
    pipelines:
      metrics:
        receivers:
          - otlp
          - hostmetrics
        exporters:
          - elastic <3>
      traces:
        receivers:
          - otlp
        processors:
          - batch
        exporters:
          - elastic <4>
----
<1> The `hostmetrics` receiver must be defined to generate metrics about the host system scraped from various sources.
<2> At a minimum, you must define the URL of the APM Server instance you are sending data to. See the <<open-telemetry-elastic-config-ref,configuration reference>>
for additional configuration options, like specifying an API key, secret token, or TLS settings.
<3> To translate metrics, the Elastic exporter must be defined in `service.pipelines.metrics.exporters`. 
<4> To translate trace data, the Elastic exporter must be defined in `service.pipelines.traces.exporters`.

NOTE: For more information about getting started with an OpenTelemetry Collector,
see the {ot-collector}[OpenTelemetry collector] docs.

[float]
[[open-telemetry-elastic-caveats]]
==== Caveats

If collecting metrics, please note that the https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-api/latest/io/opentelemetry/api/metrics/DoubleValueRecorder.html[`DoubleValueRecorder`]
and https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-api/latest/io/opentelemetry/api/metrics/LongValueObserver.html[`LongValueRecorder`] metrics are not yet supported.

[[open-telemetry-elastic-verify]]
==== Verify OpenTelemetry metrics data

To validate that metrics are successfully being reported to {kib} is by using *Discover*.

. Launch {kib}:
+
--
include::../tab-widgets/open-kibana-widget.asciidoc[]
--

. In the side navigation, under *{kib}*, select *Discover*.
. Select `apm-*` as your index pattern.
. Filter the data to only show documents with metrics: `processor.name :"metric"`
. Narrow your search with a known OpenTelemetry field. For example, if you have an `order_value` field, add `order_value: *` to your search to return
only OpenTelemetry metrics documents.

[[open-telemetry-elastic-kibana]]
==== Visualize in {kib}

TSVB within {kib} is the recommended visualization for OpenTelemtry metrics. TSVB is a time series data visualizer that allows you to use the full power of the
{ess} aggregation framework. With TSVB, you can combine an infinite number of aggregations to display complex data.

In this example eCommerce dashboard, there are four visualizations; sales, order count, product cache, and system load. The dashboard provides us with business
KPI metrics, along with performance-related metrics.

// TODO: add screenshot of dashboard

Let's have a look at how this dashboard was created, specifically the Sales USD and System load visualizations.

. In the side navigation, under *{kib}*, select *Dashboard*.
. Click *Dashboard* and select *Create dashboard*.
. Click *Save*, enter the name of your dashboard, and then click *Save* again.
. Letâ€™s add a Sales USD visualization. Click *Edit*.
. Click *Create new* and then select *TSVB*.
. For the label name, enter Sales USD, and then select the following:
+
* Aggregation: `Positive Rate`.
* Field: `order_count`.
* Scale: `auto`.
* Group by: `Everything`
. Click *Save and return*.
. Now let's create a visualization of load averages on the system. Click *Create new*.
. Select *TSVB*.
. Enter the label name, System load, and then select the following:
+
* Aggregation: `Average`.
* Field: `system.cpu.load_average.1m`.
* Group by: `Terms`.
* By: `host.ip`.
* Top: `10`.
* Order by: `Doc Count (default)`.
* Direction: `Descending`.
. Click *Save and return*.
+
Both visualizations are now displayed on your custom dashboard.

[[open-telemetry-elastic-config-ref]]
==== Elastic exporter configuration reference

[float]
[[open-telemetry-config-url]]
==== `apm_server_url`
Elastic APM Server URL. (required)

[float]
[[open-telemetry-config-api-key]]
==== `api_key`
Credential for {apm-server-ref-v}/api-key.html[API key authorization].
Must also be enabled in Elastic APM Server. (optional)

[float]
[[open-telemetry-config-secret-token]]
==== `secret_token`
Credential for {apm-server-ref-v}/secret-token.html[secret token authorization].
Must also be enabled in Elastic APM Server. (optional)

[float]
[[open-telemetry-config-ca-file]]
==== `ca_file`
Root Certificate Authority (CA) certificate, for verifying the server's identity if TLS is enabled. (optional)

[float]
[[open-telemetry-config-cert-file]]
==== `cert_file`
Client TLS certificate. (optional)

[float]
[[open-telemetry-config-key-file]]
==== `key_file`
Client TLS key. (optional)

[float]
[[open-telemetry-config-insecure]]
==== `insecure`
Disable verification of the server's identity if TLS is enabled. (optional)
