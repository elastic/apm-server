[[open-telemetry-elastic]]
== OpenTelemetry integration

Elastic's OpenTelemetry integration allows you to reuse your existing OpenTelemetry
instrumentation to quickly and easily analyze distributed traces and metrics with the Elastic Stack.

=== What is OpenTelemetry?

> OpenTelemetry formed through a merger of the OpenTracing and OpenCensus projects.
It’s a set of APIs, SDKs, tooling, and integrations that enable the creation and
management of telemetry data.

OpenTelemetry is an open-source project that provides the components necessary to observe your applications and services.
Learn more in the https://github.com/open-telemetry/opentelemetry-specification/blob/master/README.md[spec].

=== Elastic exporter

Elastic's integration is designed to drop into your current OpenTelemetry setup.
We've done this by extending the default OpenTelemetry collector and adding an Elastic exporter.
This exporter translates the OpenTelemetry trace data collected from your services to Elastic's protocol,
before sending the data to the Elastic Stack.
By extending the OpenTelemetry collector,
no changes are needed in your instrumented services in order to begin using the Elastic Stack.

Here's an architecture overview:

*************
Instrumented with
OpenTelemetry
    ↓
    ↓                       OpenTelemetry Collector                   The Elastic Stack [ESS]
Service 1  --->  ┐            ┌────────────────┐            ┌─────────────────────────────────────────┐
Service 2  --->  ┤     --->   |Elastic Exporter|    --->    |APM Server --> Elasticsearch --> APM app)|
Service 3  --->  ┘            └────────────────┘            └─────────────────────────────────────────┘
                        ↑                            ↑
                        ↑                            ↑
                   OpenTelemetry                  Elastic
                   Protocol                       Protocol
*************

=== Elastic exporter configuration reference

OpenTelemetry Collectors should sit close to your services,
and can be deployed in as many clusters, data centers, or regions as necessary.

Example yaml configuration:

[source,yml]
----
exporters:
  elastic:
    apm_server_url: "https://elasticapm.example.com"
    secret_token: "hunter2"
----

==== `apm_server_url`
(required): Elastic APM Server URL.

==== `api_key`
(optional): credential for API Key authorization, if enabled in Elastic APM Server.

==== `secret_token`
(optional): credential for Secret Token authorization, if enabled in Elastic APM Server.

==== `ca_file`
(optional): root Certificate Authority (CA) certificate, for verifying the server's identity, if TLS is enabled.

==== `cert_file`
(optional): client TLS certificate.

==== `key_file`
(optional): client TLS key.

==== `insecure`
(optional): disable verification of the server's identity, if TLS is enabled.


All Elastic APM agents have https://opentracing.io/[OpenTracing] compatible bridges.

The OpenTracing bridge allows you to create Elastic APM <<transactions,transactions>> and <<transaction-spans,spans>> using the OpenTracing API.
This means you can reuse your existing OpenTracing instrumentation to quickly and easily begin using Elastic APM.

[float]
=== Agent specific details

Not all features of the OpenTracing API are supported. In addition, there are some Elastic APM specific tags you should be aware of. Please see the relevant Agent documentation for more detailed information:

* {apm-go-ref-v}/opentracing.html[Go agent]
* {apm-java-ref-v}/opentracing-bridge.html[Java agent]
* {apm-node-ref-v}/opentracing.html[Node.js agent]
* {apm-py-ref-v}/opentracing-bridge.html[Python agent]
* {apm-ruby-ref-v}/opentracing.html[Ruby agent]
* {apm-rum-ref-v}/opentracing.html[JavaScript Real User Monitoring (RUM) agent]