[[open-telemetry-elastic]]
== OpenTelemetry integration

:ot-spec:       https://github.com/open-telemetry/opentelemetry-specification/blob/master/README.md
:ot-repo:       https://github.com/open-telemetry/opentelemetry-collector
:ot-pipelines:  {ot-repo}/blob/master/docs/pipelines.md
:ot-extension:  {ot-repo}/blob/master/extension/README.md
:ot-scaling:    {ot-repo}/blob/master/docs/performance.md

:ot-collector:  https://opentelemetry.io/docs/collector/about/
:ot-dockerhub:  https://hub.docker.com/r/otel/opentelemetry-collector-contrib-dev

Elastic's OpenTelemetry integration allows you to reuse your existing OpenTelemetry
instrumentation to quickly and easily analyze distributed traces and metrics with the Elastic Stack.

=== What is OpenTelemetry?

> OpenTelemetry formed through a merger of the OpenTracing and OpenCensus projects.
It’s a set of APIs, SDKs, tooling, and integrations that enable the creation and
management of telemetry data.

OpenTelemetry is an open-source project that provides the components necessary to observe your applications and services.
Learn more in the {ot-spec}[spec].

=== Elastic exporter

Elastic's integration is designed to drop into your current OpenTelemetry setup.
We've done this by extending the default OpenTelemetry collector and adding an Elastic exporter.
This exporter translates the OpenTelemetry trace data collected from your services to Elastic's protocol,
before sending the data to the Elastic Stack.
By extending the OpenTelemetry collector,
no changes are needed in your instrumented services in order to begin using the Elastic Stack.

Here's an architecture overview:

*************
Instrumented with
OpenTelemetry
    ↓
    ↓                       OpenTelemetry Collector                   The Elastic Stack [ESS]
Service 1  --->  ┐            ┌────────────────┐            ┌─────────────────────────────────────────┐
Service 2  --->  ┤     --->   |Elastic Exporter|    --->    |APM Server --> Elasticsearch --> APM app)|
Service 3  --->  ┘            └────────────────┘            └─────────────────────────────────────────┘
                        ↑                            ↑
                        ↑                            ↑
                   OpenTelemetry                  Elastic
                   Protocol                       Protocol
*************

=== How the OpenTelemetry Collector works

The OpenTelemetry collector uses three different types of components to handle data: `receivers`, `processors`, and `exporters`.

* `receivers`: Configures how data gets to the collector. At least one receiver must be configured.
* `processors`: Defines optional transformation that occurs between receiving and exporting data.
* `exporters`: Configures how data is sent to its destination--in this case, the Elastic Stack.

Once a `receiver`, `processor`, and `exporter` is defined, `pipelines` can be configured in the `services` section of your configuration. Specifically, a `traces` pipeline will define the path of data through your collector, and bring all three of these components together.

More information is available in the
{ot-pipelines}[OpenTelemetry pipeline docs]

A final note: `extensions` can also be enabled for tasks like monitoring your collectors health.
See the {ot-extension}[OpenTelemetry extension readme]
for a list of supported extensions.

=== Get started

NOTE: This guide assumes you've already instrumented your services with the OpenTelemetry API and/or SDK.
If you haven't, see the Elastic APM <<install-and-run,install and run guide>> to get started with Elastic APM Agents instead.

==== Deployment planning

OpenTelemetry Collectors can be run as an Agent, or as standalone collectors.
They can be deployed in as many clusters, data centers, or regions as necessary,
and scaled up or out as needed.

See OpenTelemetry's {ot-scaling}[Collector Performance] documentation for recommendations
on the number of maximum spans per second per collector.

==== Download the collector

The Elastic exporter lives in the {ot-repo}[`opentelemetry-collector-contrib repository`],
and the latest release can be downloaded from {ot-repo}/releases[GitHub releases page].
Docker images are available on {ot-dockerhub}[dockerhub].

[source,console]
----
docker pull otel/opentelemetry-collector-contrib-dev
----

==== Configure the collector

Next, create a yaml configuration file. We'll call ours `elastic-collector.yaml`.

At a minimum, you must define the URL of the APM Server instance you are sending data to.
Additional configuration options for API keys, secret tokens, and TLS settings are also available.
For example:

[source,yml]
----
exporters:
  elastic:
    apm_server_url: "https://elasticapm.example.com"
----

The Elastic exporter must also be defined in `service.pipelines.traces.exporters`.
For example:

[source,yml]
----
receivers:
  otlp:
    endpoint: localhost:55680
processors:
  batch:
    timeout: 1s
    send_batch_size: 1024
exporters:
  elastic:
    apm_server_url: "https://elasticapm.example.com"
    secret_token: "hunter2"
service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [elastic]
----

==== Deploy the collector

[source,console]
----
Some command here where we pass in the config `elastic-collector.yaml`
----

[source,console]
----
Some docker command here?
----

[source,console]
----
Some Kubernetes config here?
----

For more information about getting started with an OpenTelemetry Collector,
see the {ot-collector}[OpenTelemetry collector] docs.

=== Elastic exporter configuration reference

==== `apm_server_url`
Elastic APM Server URL. (required)

==== `api_key`
Credential for API Key authorization. Must also be enabled in Elastic APM Server. (optional)

==== `secret_token`
Credential for Secret Token authorization. Must also be enabled in Elastic APM Server. (optional)

==== `ca_file`
Root Certificate Authority (CA) certificate, for verifying the server's identity if TLS is enabled. (optional)

==== `cert_file`
Client TLS certificate. (optional)

==== `key_file`
Client TLS key. (optional)

==== `insecure`
Disable verification of the server's identity if TLS is enabled. (optional)
