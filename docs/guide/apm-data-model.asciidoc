[[apm-data-model]]
== Data Model

Elastic APM agents capture different types of information from within their instrumented applications - namely `spans`, `transactions`, `errors`, and `metrics`. 

* <<transaction-spans>>
* <<transactions>>
* <<errors>>
* <<metrics>>

[[transaction-spans]]
=== Spans

*Spans* contain information about a specific code path that has been executed.
They measure from the start to end of an activity,
and they can have a parent/child relationship with other spans.

Agents automatically instrument a variety of libraries to capture these spans from within your application.
In addition, you can use the Agent API for ad hoc instrumentation of specific code paths. 

A span contains:

* A `transaction.id` attribute that refers to their parent <<transactions,transaction>>.
* A `parent.id` attribute that refers to their parent span, or their transaction.
* start time and duration
* name
* type
* `stack trace` (optional)

Spans are stored in {apm-server-ref-v}/span-indices.html[span indices].
Note that these indices are separate from {apm-server-ref-v}/transaction-indices.html[transaction indices] by default.

[float]
[[dropped-spans]]
==== Dropped Spans

For performance reasons, some APM agents can choose to purposefully sample or omit spans.
One example of this might be for long running transactions with over 100 spans.
These edge cases can overload both the agent and the APM Server.
To avoid this, agents will drop spans. When they do this,
they notify the server of exactly how many spans were dropped.
This note is then passed on to the user in the UI.

Settings affecting dropped spans, and more details on why they might occur,
are available in the relevant agent documentation:

* {apm-node-ref-v}/configuration.html#transaction-max-spans[Node.js Agent max spans]
* {apm-py-ref-v}/configuration.html[Python Agent max spans]

[float]
[[missing-spans]]
==== Missing Spans

Similarly to dropped spans, transactions may have missing spans.
This can happen because spans are streamed from the APM Agent to the APM Server separately from their transaction.
Unforseen errors may cause spans to go missing.
Because the agent notifies the server about how many spans there should be,
the number of missing spans is able to be calculated and shown in the UI.

[[transactions]]
=== Transactions

*Transactions* are a special kind of <<transaction-spans,span>> that have additional attributes associated with them.
They describe an event captured by an Elastic APM agent instrumenting a service.
You can think of transactions as the highest level of work youâ€™re measuring within a service.
As an example, a transaction might be a:

* request to your server
* batch job
* background job
* custom transaction type.

Agents decide whether to sample transactions or not,
and provide settings to control sampling behavior.
If sampled, the <<transaction-spans,spans>> of a transaction are sent and stored as separate documents.
Within one transaction there can be 0, 1, or many spans captured.

A transaction contains:

* The timestamp of the event
* A unique id, type, and name
include::../context.asciidoc[]
* Other relevant information depending on the agent. Example: The JavaScript RUM agent captures transaction marks,
which are points in time relative to the start of the transaction with some label.

In addition, the agents provide some settings for users to capture customized information. This data is stored as not-indexed in a `custom` object.
Searchable information is stored as `labels` instead.

Transactions are stored in {apm-server-ref-v}/transaction-indices.html[transaction indices].

[[errors]]
=== Errors

An error event contains at least
information about the original `exception` that occurred
or about a `log` created when the exception occurred.
For simplicity, errors are represented by a unique ID.

An Error contains:

* Both the captured `exception` and the captured `log` of an error can contain a `stack trace`,
which is helpful for debugging.
* The `culprit` of an error indicates where it originated.
* An error might relate to the <<transactions,transaction>> during which it happened,
via the `transaction.id`.
include::../context.asciidoc[]

In addition, the agents provide some settings for users to capture customized information. This data is stored as not-indexed in a `custom` object.
Searchable information is stored as `labels` instead.

Errors are stored in {apm-server-ref-v}/error-indices.html[error indices].

[[metrics]]
=== Metrics

APM agents automatically pick up basic host-level metrics,
including system and process-level CPU and memory metrics.
Agent specific metrics are also available,
like {apm-java-ref-v}/metrics.html[JVM metrics] in the Java Agent,
and {apm-go-ref-v}/metrics.html[Go runtime] metrics in the Go Agent.

Infrastructure and application metrics are important sources of information when debugging production systems,
which is why we've made it easy to filter metrics for specific hosts or containers in the Kibana {kibana-ref}/metrics.html[metrics overview].

Metrics have the `processor.event` property set to `metric`.

Metrics are stored in {apm-server-ref-v}/metricset-indices.html[metric indices].

For a full list of tracked metrics, see the relevant agent documentation:

* {apm-go-ref-v}/metrics.html[Go]
* {apm-java-ref-v}/metrics.html[Java]
* {apm-node-ref-v}/metrics.html[Node.js]
* {apm-py-ref-v}/metrics.html[Python]
* {apm-ruby-ref-v}/metrics.html[Ruby]