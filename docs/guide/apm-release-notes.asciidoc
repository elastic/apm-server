[[apm-release-notes]]
== Release highlights

This section summarizes the most important APM changes in each release.

For a full list of changes, see the
{apm-server-ref-v}/release-notes.html[APM Server Release Notes] or the
{kibana-ref}/release-notes.html[Kibana Release Notes].

* <<release-highlights-7.9.0>>
* <<release-highlights-7.8.0>>
* <<release-highlights-7.7.0>>
* <<release-highlights-7.6.0>>
* <<release-highlights-7.5.0>>
* <<release-highlights-7.4.0>>
* <<release-highlights-7.3.0>>
* <<release-highlights-7.2.0>>
* <<release-highlights-7.1.0>>
* <<release-highlights-7.0.0>>
* <<release-highlights-6.8.0>>
* <<release-notes-6.7.0>>
* <<release-notes-6.6.0>>
* <<release-notes-6.5.0>>
* <<release-notes-6.4.1>>
* <<release-notes-6.4.0>>

//NOTE: The notable-highlights tagged regions are re-used in the
//Installation and Upgrade Guide
// tag::notable-v8-highlights[]

// end::notable-v8-highlights[]

[[release-highlights-7.9.0]]
=== APM version 7.9.0

// tag::notable-v79-highlights[]
// Coming soon...
// end::notable-v79-highlights[]

[[release-highlights-7.8.0]]
=== APM version 7.8.0

// tag::notable-v78-highlights[]
Service maps::

Service maps now integrate with machine learning, offering real-time health indicators based
on anomaly detection scores, to help you quickly assess the status and health of your services.
+
Specifically, machine learning jobs can be created to calculate anomaly scores on APM transaction
durations within the selected service. When these jobs are active,
service maps will display a color-coded anomaly indicator based on the detected anomaly score.
From these scores, you can jump straight to the anomaly detection metric viewier in the Machine learning app to learn more.
+
[role="screenshot"]
image::images/7.8-service-map-anomaly.png[APM Service maps]
+
See {kibana-ref}/service-maps.html[service maps] for more information.

Deployment annotations::

For enhanced visibility into your deployments, we offer deployment annotations on all transaction charts.
Starting in 7.8, you can now explicitly create deployment annotations with our annotation API.
The API can integrate into your CI/CD pipeline, so that each time you deploy, a POST request is sent to the annotation API endpoint:
+
[source, curl]
----
curl -X POST \
  http://localhost:5601/api/apm/services/${SERVICE_NAME}/annotation \
-H 'Content-Type: application/json' \
-H 'kbn-xsrf: true' \
-H 'Authorization: Basic ${API_KEY}' \
-d '{
      "@timestamp": "${DEPLOY_TIME}",
      "service": {
        "version": "${SERVICE_VERSION}"
      },
      "message": "${MESSAGE}"
    }'
----
+
See {kibana-ref}/transactions-annotations.html[Track deployments with annotations] for more information.

RUM + Elastic Maps::

There is now a dedicated “Observability” solution layer in the Maps app.
Import your data in just three clicks to begin exploring.
+
Learn more about Elastic Maps in the {kibana-ref}/maps.html[documentation].

RUM event payload compression::

APM Server has a new event intake API for RUM events.
This intake API supports compressed event payloads from the JavaScript RUM Agent.
The difference is impressive--a reduction of around ~45% in the payload size for an average web page!
+
Configure the {apm-rum-ref}/configuration.html#api-version[`api-version`] in your RUM Agent to begin using this feature.

.NET Agent SqlClient support::

Auto instrumentation for `System.Data.SqlClient` is now available for both .NET Core and .NET Framework applications.
This means you can get out-of-the-box visibility, including service maps and distributed traces, for the SqlClient calls made from your .NET applications.
+
Learn more in {apm-dotnet-ref}/setup.html#setup-sqlclient[set up SQLClient],
and upgrade to the latest version of the .NET agent to get started.

// end::notable-v78-highlights[]

[[release-highlights-7.7.0]]
=== APM version 7.7.0

// tag::notable-v77-highlights[]
Service maps::

{apm-app-ref}/service-maps.html[Service maps] are now available in the APM app.
A service map is a real-time visual representation of the instrumented services in your application’s architecture.
It shows you how these services are connected,
along with high-level metrics like average transaction duration, requests per minute,
and errors per minute, that allow you to quickly assess the status of your services.
+
[role="screenshot"]
image::images/7.7-service-maps-java.png[APM Service maps]

Alerting::

Want to receive an email when the duration of your transactions are slower than a set threshold?
How about a slack message when your application's error rate spikes?
Now you can!
The APM app integrates with Kibana’s {apm-app-ref}/apm-alerts.html[alerting and actions] feature.
It provides a set of built-in actions and APM specific threshold alerts for you to easily set up and use.
+
[role="screenshot"]
image::images/7.7-apm-alert.png[APM app alerts]

APM Agent central configuration::

{apm-app-ref}/agent-configuration.html[Central configuration] now supports even more configuration options,
so you can fine-tune your agents without needing to redeploy.
Open up the configuration page in the APM app for a list of all supported options.
+
[role="screenshot"]
image::images/7.7-apm-agent-configuration.png[APM Service maps]

Custom links::

Elastic’s custom links feature allows you to easily create up to 500 dynamic links based on your specific APM data.
Custom links can be filtered to only appear in the APM app for relevant services, environments, transaction types, or transaction names.
+
Need ideas?
Recipes for setting up custom links for emails, GitHub issues, Jira tasks, and more are available in the {apm-app-ref}/custom-links.html[documentation].

Inferred spans with async profiler::

Identifying a problematic service is only half of the battle when diagnosing application slowdowns.
The Elastic APM Java Agent provides a new way to get method-level insights into your code:
https://www.elastic.co/guide/en/apm/agent/java/master/java-method-monitoring.html[inferred spans with async-profiler].
This can help you diagnose slow requests due to heavy computations, inefficient algorithms,
or similar problems not related to interactions between services.
// end::notable-v77-highlights[]

[[release-highlights-7.6.0]]
=== APM version 7.6.0

// tag::notable-v76-highlights[]
Experimental Jaeger integration::

Elastic APM now integrates with https://www.jaegertracing.io/[Jaeger], an open-source, distributed tracing system.
This integration allows users with an existing Jaeger setup to switch from the default Jaeger backend,
to ingesting data with Elastic's APM Server, storing data in {es}, and visualizing traces in the APM app.
Best of all, this can be done without any instrumentation changes in your application code.
+
See {apm-server-ref-v}/jaeger.html[Jaeger integration] for more information.

Experimental API Key authentication::

You can now secure the communication between APM Agents and APM Server with
{apm-server-ref-v}/api-key.html[API keys].
API keys are easy to create and manage, and provide finer authorization rules than secret tokens.

Elastic Security integration::

There are two, brand-new integrations with Elastic Security:
+
HTTP data collected with Elastic APM is now available in the Security app,
enabling you to hunt for security threats with your APM data.
+
The Detections feature automatically searches for threats and creates alerts when they are detected.
Elastic Security ships with four prebuilt rules, specifically for the APM use case: No User Agent, POST Request Declined, Unauthorized Method, and sqlmap User Agent.
+
See the {security-guide}/siem-ui-overview.html[Security hosts UI] and {security-guide}/prebuilt-rules.html[Security prebuilt rules]
for more information on using Elastic Security.
+
[role="screenshot"]
image::images/siem-apm-integration.png[Chained exceptions]

Chained exceptions::

Sometimes, an exception can cause or be caused by another exception.
APM Agents and the APM app now support chained exceptions,
and you can visualize when this happens in the APM app!
+
[role="screenshot"]
image::images/chained-exceptions.png[Chained exceptions]

Deployment annotations::

The APM app now displays {apm-app-ref}/transactions.html[deployment annotations] on all transaction charts.
This feature automatically tags new deployments, so you can easily see if your deploy has increased response times
for an end-user, or if the memory/CPU footprint of your application has increased.
Being able to quickly identify bad deployments enables you to rollback and fix issues without causing costly outages.
+
Deployment annotations are automatically enabled, and appear when the `service.version` of your app changes.
+
[role="screenshot"]
image::images/apm-transactions-overview.png[APM Transactions overview]

Index configuration::

Index defaults can now be changed in Kibana.
If you use custom index names for your APM data, this feature makes it very easy to update the indices that the APM app queries.
Simply navigate to *APM > Settings > Indices*, and make your changes!
Index settings in the APM app take precedence over those set in kibana.yml.
+
[role="screenshot"]
image::images/apm-settings-kib.png[APM Settings in Kibana]
+
See {apm-app-ref}/apm-settings-in-kibana.html[APM Settings in Kibana] for more details.

Java Agent support for Kafka and JMS::

The Java Agent now supports Kafka and JMS,
enabling you to visualize end to end traces that include the messaging service used to communicate between services.
In addition, you can now see the time your request spent waiting in the queue.
+
[role="screenshot"]
image::images/java-kafka.png[Java Kafka trace sample]
+
[role="screenshot"]
image::images/java-metadata.png[Java metadata]
+
See the APM Java Agent's {apm-java-ref}/supported-technologies-details.html[Supported technologies] for more information.
// end::notable-v76-highlights[]

[[release-highlights-7.5.0]]
=== APM version 7.5.0

// tag::notable-v75-highlights[]

IMPORTANT: To make use of all the new features introduced in 7.5,
you must ensure you are using version 7.5+ of APM Server and version 7.5+ of Kibana.

*APM app in Kibana*

* {kibana-ref}/transactions.html[Aggregate Service Breakdown Charts] is GA.
Visualize where your applications and services are spending most of their
time, and find the root cause of a performance problem quickly.
Not yet available for the .NET Agent.

[role="screenshot"]
image::images/breakdown-release-notes.png[Aggregate Service Breakdown Charts]

* {kibana-ref}/agent-configuration.html[APM Agent remote configuration] is GA.
View and edit certain configurations directly in Kibana without having to restart your Agents.
In 7.5, we're introducing two additional configurations:
** `CAPTURE_BODY` - Optionally capture the request body of an HTTP transaction.
** `TRANSACTION_MAX_SPANS` - Limit the number of spans recorded per transaction.

In addition, Agent remote configuration now supports all services and environments.
This means you can configure multiple services and environments in just one setting.

[role="screenshot"]
image::images/remote-config-release-notes.png[APM Agent configuration]

* {apm-java-ref}/metrics.html[JVM instance level visibility]:
It's easier than ever to troubleshoot your individual JVM instances.
Select a JVM to see individual CPU usage, memory usage, heap or non-heap memory,
thread count, garbage collection rate, and garbage collection time spent per minute.

[role="screenshot"]
image::images/jvm-release-notes.png[JVM instance level visibility]

// end::notable-v75-highlights[]

[[release-highlights-7.4.0]]
=== APM version 7.4.0

// tag::notable-v74-highlights[]

*APM app in Kibana*

* {kibana-ref}/filters.html#contextual-filters[Contextual filters]:
Explore your APM data in new ways with our new local filters.
With just a click, you can filter your transactions by type, result, host name, and/or agent name.

[role="screenshot"]
image::images/structured-filters.jpg[Structured filters in the APM UI]

* {kibana-ref}/transactions.html#rum-transaction-overview[Geo-location performance visualization chart]:
Visualize performance information about your end users'
experience based on their geo-location.

[role="screenshot"]
image::images/geo-location.jpg[Geo-location visualization]

*APM Agents*

* {apm-overview-ref-v}/observability-integrations.html[Log integration]:
Navigate from a distributed trace to any relevant logs -- without using trace context -- via the APM app.
* {apm-rum-ref}/angular-integration.html[RUM Angular instrumentation]:
Out of the box Angular instrumentation is here!
Instrument your single page applications written in Angular.js without the need to manually create or rename transactions.
* https://github.com/elastic/java-ecs-logging[JAVA ECS Logging library]:
Easily convert your logs to ECS-compatible JSON without creating an additional pipeline.
* {apm-dotnet-ref}/supported-technologies.html[.NET agent full framework support]:
Out of the box instrumentation for the .NET framework.
Say goodbye to APIs, your ASP.NET web applications are now plug and play ready with Elastic APM.

// end::notable-v74-highlights[]

[[release-highlights-7.3.0]]
=== APM version 7.3.0

// tag::notable-v73-highlights[]

[discrete]
==== Elastic APM .NET Agent GA

https://github.com/elastic/apm-agent-dotnet/[Elastic APM agent for .NET] is now
generally available! The .NET Agent adds automatic instrumentation for ASP.NET
Core 2.x+ and Entity Framework Core 2.x+, while also providing a
{apm-dotnet-ref}/public-api.html[Public API] for the .NET agent that will allow
you to instrument any .NET custom application code.

[discrete]
==== Aggregate service breakdown charts

beta[] In addition to the transaction duration and throughput charts, the 7.3
release adds aggregated service breakdown charts for services. These charts help
you visualize where your application and services are spending most of their
time, allowing you to get to the root cause of a performance problem quickly.
These charts are available in Beta with support for certain APM agents:

* Java added[1.8.0]
* Go added[1.5.0]
* Node.js added[2.13.0]
* Python added[5.0.0]

[role="screenshot"]
image::images/apm-highlight-breakdown-charts.png[Aggregate service breakdown charts]

[discrete]
==== Agent sample rate configuration from APM UI

beta[] Configuring sampling rate for your services is a whole lot easier with this
release. The new settings page now lets you view and configure the sampling rate
for your services from within the APM UI without restarting them. To learn more
about this configuration, see
{kibana-ref}/agent-configuration.html[APM Agent configuration].

[role="screenshot"]
image::images/apm-highlight-sample-rate.png[APM sample rate configuration in Kibana]

[discrete]
==== React support for Single Page Applications

The 7.3 release also brings a lot of exciting changes to the Real User
Monitoring (RUM) agent. We have furthered our support of Single Page
Applications (SPA). You can now use the RUM agent to instrument your SPA written
in React.js without the need to manually create or rename transactions. For
more information, see {apm-rum-ref}/react-integration.html[React integration].

[discrete]
===== APM RUM integration with Elastic Maps

This release also makes both the geo-ip and user-agent modules enabled by
default, which makes it easier for you to integrate with
https://www.elastic.co/products/maps[Maps] so you can better understand the
performance of your RUM applications.

[role="screenshot"]
image::images/apm-highlight-rum-maps.png[APM sample rate configuration in Kibana]

// end::notable-v73-highlights[]

[[release-highlights-7.2.0]]
=== APM version 7.2.0

[float]
==== New features

*APM Server*

* Added support for {apm-server-ref-v}/ilm.html[index lifecycle management (ILM)]:
ILM enables you to automate how you want to manage your indices over time,
by automating rollovers to a new index when the existing index reaches a specified size or age.
* Added {ref}/geoip-processor.html[Geo-IP] processing to the default ingest pipeline:
Pipelines are still disabled by default, but activation now includes a new Geo-IP pipeline.
The Geo-IP pipeline takes an extracted IP address from RUM events and stores it in the `client.geo` field.
This makes it much easier to use location data in Kibana's Visualize maps and Maps app directly:

[role="screenshot"]
image::images/kibana-geo-data.png[Kibana maps app]

*APM UI*

* APM + Uptime integration: APM transactions now include links to the Uptime UI when data is available.
* Added a global filter for {kibana-ref}/filters.html#environment-selector[service environments]:
You can now easily name and switch between environments in the APM UI.
* Added support for {kibana-ref}/metrics.html[agent specific metrics]:
Java is the first to get custom metrics in the APM UI, with more agents to follow.

[[release-highlights-7.1.0]]
=== APM version 7.1.0

No new features.


[[release-highlights-7.0.0]]
=== APM version 7.0.0

[float]
==== Breaking Changes

See <<breaking-7.0.0>>

[float]
==== New features

*APM UI*

* Added support for frozen indices.

[[release-highlights-6.8.0]]
=== APM version 6.8.0

No new features.

[[release-notes-6.7.0]]
=== APM version 6.7.0

No new features.

[[release-notes-6.6.0]]
=== APM version 6.6.0

[float]
==== New features

* Elastic APM agents now automatically record certain <<metrics,infrastructure and application metrics>>.
* Elastic APM agents support the W3C Trace Context.
All agents now have <<opentracing,OpenTracing compatible bridges>>.
* <<distributed-tracing,Distributed tracing>> is generally available.

[[release-notes-6.5.0]]
=== APM version 6.5.0

[float]
==== New features

Elastic APM now enables {apm-overview-ref-v}/distributed-tracing.html[distributed tracing].

*APM Server*

* Intake protocol v2 with distributed tracing support
* Ingest node pipeline registration and use when ingesting documents
* apm-server monitoring

*APM UI*

* Distributed tracing UI
* Monitoring UI for apm-server

*APM agents*

* Intake protocol v2 with distributed tracing support in all Elastic agents
* Java is now GA
* Go is now GA
* Python switched to contextvars instead of thread locals for context tracking in Python 3.7
* Node added support for Restify Framework, dropped support for Node.js 4 and 9

[[release-notes-6.4.1]]
=== APM version 6.4.1

[float]
==== Bug Fixes
Changes introduced in 6.4.0 potentially caused an empty APM Kibana UI.
This happened in case the APM Server was using an outdated configuration file, not configured to index events into separate indices.
To fix this, the APM Kibana UI now falls back to use `apm-*` as default indices to query.
Users can still leverage separate indices for queries by overriding the default values described in {kibana-ref}/apm-settings-kb.html[Kibana APM settings].


[[release-notes-6.4.0]]
=== APM version 6.4.0

[float]
==== Breaking changes

See <<breaking-6.4.0>>.

[float]
==== New features

*APM Server*

* Logstash output
* Kafka output


*APM UI*

* Query bar
* Machine Learning integration: Anomaly detection on service response times
* Kibana objects (index pattern, dashboards, etc.) can now be imported via the Kibana setup instructions


*APM agents*

* RUM is now GA
* Ruby is now GA
* Java is now Beta
* Go is now Beta
* Python added instrumentation for Cassandra, PyODBC and PyMSSQL
* Node.js added instrumentation for Cassandra and broader MySQL support
