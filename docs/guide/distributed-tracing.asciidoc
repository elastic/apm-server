[[distributed-tracing]]
=== Distributed tracing

// Make tab-widgets work
include::../tab-widgets/code.asciidoc[]

// TIP: Need help understanding transactions and spans? Check out APM's <<apm-data-model>>.

A `trace` is a group of <<transactions,transactions>> and <<transaction-spans,spans>> with a common root.
Each `trace` tracks the entirety of a single request.
When a `trace` travels through multiple services, as is common in a microservice architecture,
it is known as a distributed trace.

[float]
=== Why is distributed tracing important?

Distributed tracing enables you to analyze performance throughout your microservice architecture
by tracing the entirety of a request -- from the initial web request on your front-end service,
all the way to database queries made on your back-end services.

Tracking requests as they propagate through your services provides an end-to-end picture of
where your application is spending time, where errors are occurring, and where bottlenecks are forming.
Distributed tracing eliminates individual service's data silos and reveals what's happening outside of
service borders.

For supported technologies, distributed tracing works out-of-the-box, with no additional configuration required.

[float]
=== Visualize distributed tracing

The APM app's timeline visualization provides a visual deep-dive into each of your application's traces:

[role="screenshot"]
image::images/apm-distributed-tracing.png[Distributed tracing in the APM UI]

[float]
=== How distributed tracing works

Distributed tracing works by injecting a custom `traceparent` HTTP header into outgoing requests.
This header includes information, like `trace-id`, which is used to identify the current trace,
and `parent-id`, which is used to identify the parent of the current span.

When a service is working on a request, it checks for the existence of this HTTP header.
If it's missing, the service starts a new trace.
If it exists, the service ensures the current action is added as a child to existing trace,
and continues to propagate the propagate the trace.

[float]
==== Trace propagation examples

In this example, Elastic's Ruby agent communicates with Elastic's Java agent.
Both support the `traceparent` header, and trace data is successfully propagated.

image::images/dt-trace-ex1.png[How traceparent propagation works]

In this example, Elastic's Ruby agent communicates with OpenTelemetry's Java agent.
Both support the `traceparent` header, and trace data is successfully propagated.

image::images/dt-trace-ex2.png[How traceparent propagation works]

In this example, the trace meets a piece of middleware that doesn't propagate the `traceparent` header.
The distributed trace ends and any further communication will result in a new trace.

image::images/dt-trace-ex3.png[How traceparent propagation works]


[float]
[[w3c-tracecontext]]
==== W3C Tracecontext spec

All Elastic agents now support the official W3C tracecontext spec and `traceparent` header.
See the table below for the minimum required agent version:

[options="header"]
|====
|Agent name |Agent Version
|**Go Agent**| ≥`1.6`
|**Java Agent**| ≥`1.14`
|**.NET Agent**| ≥`1.3`
|**Node.js Agent**| ≥`3.4`
|**Python Agent**| ≥`5.4`
|**Ruby Agent**| ≥`3.5`
|**RUM Agent**| ≥`5.0`
|====

NOTE: Older Elastic agents use a unique `elastic-apm-traceparent` header.
For backward-compatibility purposes, new versions of Elastic agents still support this header.

[float]
=== Manual distributed tracing

Distributed tracing is automatically supported with HTTP/HTTPS.
If you’re using another protocol, like TCP, UDP, WebSocket, or any other unsupported technology,
you can manually instrument your project with Elastic's agent APIs.

[float]
==== Add the `traceparent` header to outgoing requests

Sending services must add the `traceparent` header to outgoing requests.

--
include::../tab-widgets/distributed-trace-send-widget.asciidoc[]
--

[float]
==== Add the `traceparent` header to incoming requests

Receiving services must read the incoming `traceparent` header, and start a new child transaction.

--
include::../tab-widgets/distributed-trace-receive-widget.asciidoc[]
--
