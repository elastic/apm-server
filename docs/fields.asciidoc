
////
This file is generated! See _meta/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
= Exported fields

[partintro]

--
This document describes the fields that are exported by apm-server. They are
grouped in the following categories:

* <<exported-fields-apm>>
* <<exported-fields-apm-error>>
* <<exported-fields-apm-sourcemap>>
* <<exported-fields-apm-span>>
* <<exported-fields-apm-transaction>>
* <<exported-fields-beat>>
* <<exported-fields-cloud>>
* <<exported-fields-docker-processor>>
* <<exported-fields-ecs>>
* <<exported-fields-host-processor>>
* <<exported-fields-kubernetes-processor>>
* <<exported-fields-system>>

--
[[exported-fields-apm]]
== General APM fields

Fields common to various APM events.



*`listening`*::
+
--
type: keyword

Address the server is listening on.


--

*`processor.name`*::
+
--
type: keyword

Processor name.

--

*`processor.event`*::
+
--
type: keyword

Processor event.

--


*`timestamp.us`*::
+
--
type: long

Timestamp of the event in microseconds since Unix epoch.


--

[float]
== context fields

Any arbitrary contextual information regarding the event, captured by the agent, optionally provided by the user.



*`context.tags`*::
+
--
type: object

A flat mapping of user-defined tags with string values.


--


*`context.http.status_code`*::
+
--
type: long

The status code of the http response.


--


*`context.user.username`*::
+
--
type: keyword

The username of the logged in user.


--

*`context.user.id`*::
+
--
type: keyword

Identifier of the logged in user.


--

*`context.user.email`*::
+
--
type: keyword

Email of the logged in user.


--

*`context.user.ip`*::
+
--
type: ip

IP of the user where the event is recorded, typically a web browser. This is obtained from the X-Forwarded-For header, of which the first entry is the IP of the original client. This value however might not be necessarily trusted, as it can be forged by a malicious user.


--

*`context.user.user-agent`*::
+
--
type: text

Software agent acting in behalf of a user, eg. a web browser / OS combination.


--


[float]
== url fields

A complete Url, with scheme, host and path.



*`context.request.url.raw`*::
+
--
type: keyword

The raw, unparsed URL of the request, e.g https://example.com:443/search?q=elasticsearch#top.


--

*`context.request.url.protocol`*::
+
--
type: keyword

The protocol of the request, e.g. "https:".


--

*`context.request.url.full`*::
+
--
type: keyword

The full, possibly agent-assembled URL of the request, e.g https://example.com:443/search?q=elasticsearch#top.


--

*`context.request.url.hostname`*::
+
--
type: keyword

The hostname of the request, e.g. "example.com".


--

*`context.request.url.port`*::
+
--
type: keyword

The port of the request, e.g. 443.


--

*`context.request.url.pathname`*::
+
--
type: keyword

The path of the request, e.g. "/search".


--

*`context.request.url.search`*::
+
--
type: keyword

The search describes the query string of the request, e.g. "q=elasticsearch".


--

*`context.request.url.hash`*::
+
--
type: keyword

The hash of the request URL, e.g. "top".


--

*`context.request.http_version`*::
+
--
type: keyword

The http version of the request leading to this event.


--

*`context.request.method`*::
+
--
type: keyword

The http method of the request leading to this event.


--


*`context.response.status_code`*::
+
--
type: long

The http status code of the response, eg. '200'.


--

*`context.response.finished`*::
+
--
type: boolean

A boolean indicating whether the response was finished or not.


--

[float]
== system fields

Optional system fields.



*`context.system.hostname`*::
+
--
type: keyword

The hostname of the system the event was recorded on.


--

*`context.system.architecture`*::
+
--
type: keyword

The architecture of the system the event was recorded on.


--

*`context.system.platform`*::
+
--
type: keyword

The platform of the system the event was recorded on.


--

*`context.system.ip`*::
+
--
type: ip

IP of the host that records the event.


--

[float]
== process fields

Information pertaining to the running process where the data was collected



*`context.process.pid`*::
+
--
type: long

Numeric process ID of the service process.


--

*`context.process.ppid`*::
+
--
type: long

Numeric ID of the service's parent process.


--

*`context.process.title`*::
+
--
type: keyword

Service process title.


--

[float]
== service fields

Service fields.



*`context.service.name`*::
+
--
type: keyword

format: url

Immutable unique name of the service emitting this event.


--

*`context.service.version`*::
+
--
type: keyword

Version of the service emitting this event.


--

*`context.service.environment`*::
+
--
type: keyword

Service environment.


--


*`context.service.language.name`*::
+
--
type: keyword

Name of the programming language used.


--

*`context.service.language.version`*::
+
--
type: keyword

Version of the programming language used.


--


*`context.service.runtime.name`*::
+
--
type: keyword

Name of the runtime used.


--

*`context.service.runtime.version`*::
+
--
type: keyword

Version of the runtime used.


--


*`context.service.framework.name`*::
+
--
type: keyword

Name of the framework used.


--

*`context.service.framework.version`*::
+
--
type: keyword

Version of the framework used.


--


*`context.service.agent.name`*::
+
--
type: keyword

Name of the agent used.


--

*`context.service.agent.version`*::
+
--
type: keyword

Version of the agent used.


--


*`transaction.id`*::
+
--
type: keyword

format: url

The transaction ID.


--


*`trace.id`*::
+
--
type: keyword

The ID of the trace to which the event belongs to.


--


*`parent.id`*::
+
--
type: keyword

The ID of the parent event.


--

[[exported-fields-apm-error]]
== APM Error fields

Error-specific data for APM


*`view errors`*::
+
--
type: keyword

format: url

--

*`error id icon`*::
+
--
type: keyword

format: url

--

[float]
== error fields

Data captured by an agent representing an event occurring in a monitored service.



*`error.id`*::
+
--
type: keyword

The ID of the error.


--

*`error.culprit`*::
+
--
type: text

Function call which was the primary perpetrator of this event.

--

*`error.grouping_key`*::
+
--
type: keyword

format: url

GroupingKey of the logged error for use in grouping.


--

[float]
== exception fields

Information about the originally thrown error.



*`error.exception.code`*::
+
--
type: keyword

The error code set when the error happened, e.g. database error code.

--

*`error.exception.message`*::
+
--
type: text

The original error message.

--

*`error.exception.module`*::
+
--
type: keyword

The module namespace of the original error.

--

*`error.exception.type`*::
+
--
type: keyword

--

*`error.exception.handled`*::
+
--
type: boolean

Indicator whether the error was caught somewhere in the code or not.

--

[float]
== log fields

Additional information added by logging the error.



*`error.log.level`*::
+
--
type: keyword

The severity of the record.

--

*`error.log.logger_name`*::
+
--
type: keyword

The name of the logger instance used.

--

*`error.log.message`*::
+
--
type: text

The additionally logged error message.

--

*`error.log.param_message`*::
+
--
type: keyword

A parametrized message. E.g. 'Could not connect to %s'. The property message is still required, and should be equal to the param_message, but with placeholders replaced. In some situations the param_message is used to group errors together.


--

[[exported-fields-apm-sourcemap]]
== APM Sourcemap fields

Sourcemap files enriched with metadata



[float]
== service fields

Service fields.



*`sourcemap.service.name`*::
+
--
type: keyword

The name of the service this sourcemap belongs to.


--

*`sourcemap.service.version`*::
+
--
type: keyword

Service version.


--

*`sourcemap.bundle_filepath`*::
+
--
type: keyword

Location of the sourcemap relative to the file requesting it.


--

[[exported-fields-apm-span]]
== APM Span fields

Span-specific data for APM.


*`view spans`*::
+
--
format: url

--


*`span.id`*::
+
--
type: long

Deprecated (>= 6.5). A locally unique ID of the span.


--

*`span.hex_id`*::
+
--
type: keyword

The ID of the span, introduced (>= 6.5).


--

*`span.name`*::
+
--
type: keyword

Generic designation of a span in the scope of a transaction.


--

*`span.type`*::
+
--
type: keyword

Keyword of specific relevance in the service's domain (eg: 'db.postgresql.query', 'template.erb', 'cache', etc).


--


*`span.start.us`*::
+
--
type: long

Offset relative to the transaction's timestamp identifying the start of the span, in microseconds.


--


*`span.duration.us`*::
+
--
type: long

format: duration

Duration of the span, in microseconds.


--

*`span.sync`*::
+
--
type: boolean

Indicates whether the span was executed synchronously or asynchronously.


--

*`span.parent`*::
+
--
type: long

Deprecated (>= 6.5). The locally unique ID of the parent of the span.


--

[[exported-fields-apm-transaction]]
== APM Transaction fields

Transaction-specific data for APM



*`transaction.name`*::
+
--
type: text

Generic designation of a transaction in the scope of a single service (eg. 'GET /users/:id').


*`transaction.name.keyword`*::
+
--
type: keyword

--

--

*`transaction.type`*::
+
--
type: keyword

Keyword of specific relevance in the service's domain (eg. 'request', 'backgroundjob', etc)


--

[float]
== duration fields

None


*`transaction.duration.us`*::
+
--
type: long

format: duration

Total duration of this transaction, in microseconds.


--

*`transaction.result`*::
+
--
type: keyword

The result of the transaction. HTTP status code for HTTP-related transactions.


--

*`transaction.marks`*::
+
--
type: object

A user-defined mapping of groups of marks in milliseconds.


--

*`transaction.marks.navigationTiming`*::
+
--
type: object

--

*`transaction.sampled`*::
+
--
type: boolean

Transactions that are 'sampled' will include all available information. Transactions that are not sampled will not have spans or context. Defaults to true.


--



*`transaction.span_count.dropped.total`*::
+
--
type: long

The total amount of dropped spans for this transaction.

--

[[exported-fields-beat]]
== Beat fields

Contains common beat fields available in all event types.



*`beat.timezone`*::
+
--
The timezone as returned by the operating system on which the Beat is running.


--

*`@timestamp`*::
+
--
type: date

example: August 26th 2016, 12:35:53.332

format: date

required: True

The timestamp when the event log record was generated.


--

*`tags`*::
+
--
Arbitrary tags that can be set per Beat and per transaction type.


--

*`fields`*::
+
--
type: object

Contains user configurable fields.


--

[float]
== error fields

Error fields containing additional info in case of errors.



*`error.type`*::
+
--
type: keyword

Error type.


--

[[exported-fields-cloud]]
== Cloud provider metadata fields

Metadata from cloud providers added by the add_cloud_metadata processor.



*`meta.cloud.provider`*::
+
--
example: ec2

Name of the cloud provider. Possible values are ec2, gce, or digitalocean.


--

*`meta.cloud.instance_id`*::
+
--
Instance ID of the host machine.


--

*`meta.cloud.instance_name`*::
+
--
Instance name of the host machine.


--

*`meta.cloud.machine_type`*::
+
--
example: t2.medium

Machine type of the host machine.


--

*`meta.cloud.availability_zone`*::
+
--
example: us-east-1c

Availability zone in which this host is running.


--

*`meta.cloud.project_id`*::
+
--
example: project-x

Name of the project in Google Cloud.


--

*`meta.cloud.region`*::
+
--
Region in which this host is running.


--

[[exported-fields-docker-processor]]
== Docker fields

Docker stats collected from Docker.




*`docker.container.id`*::
+
--
type: keyword

Unique container id.


--

*`docker.container.image`*::
+
--
type: keyword

Name of the image the container was built on.


--

*`docker.container.name`*::
+
--
type: keyword

Container name.


--

*`docker.container.labels`*::
+
--
type: object

Image labels.


--

[[exported-fields-ecs]]
== ECS fields

ECS fields.



[float]
== agent fields

The agent fields contain the data about the agent/client/shipper that created the event.



*`agent.version`*::
+
--
type: keyword

example: 6.0.0-rc2

Version of the agent.


--

*`agent.type`*::
+
--
type: keyword

example: filebeat

Name of the agent.


--

*`agent.hostname`*::
+
--
type: keyword

Hostname of the agent.


--

*`agent.id`*::
+
--
type: keyword

example: 8a4f500d

Unique identifier of this agent (if one exists).
Example: For Beats this would be beat.id.


--

*`agent.ephemeral_id`*::
+
--
type: keyword

example: 8a4f500f

Ephemeral identifier of this agent (if one exists).
This id normally changes across restarts, but `agent.id` does not.


--

[float]
== base fields

The base set contains all fields which are on the top level. These fields are common across all types of events.



*`base.@timestamp`*::
+
--
type: date

example: 2016-05-23T08:05:34.853Z

required: True

Date/time when the event originated.
For log events this is the date/time when the event was generated, and not when it was read.
Required field for all events.


--

*`base.tags`*::
+
--
type: keyword

example: ["production", "env2"]

List of keywords used to tag each event.


--

*`base.labels`*::
+
--
type: object

example: {'key2': 'value2', 'key1': 'value1'}

Key/value pairs.
Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
Example: `docker` and `k8s` labels.


--

*`base.message`*::
+
--
type: text

example: Hello World

For log events the message field contains the log message.
In other use cases the message field can be used to concatenate different values which are then freely searchable. If multiple messages exist, they can be combined into one message.


--

[float]
== cloud fields

Fields related to the cloud or infrastructure the events are coming from.



*`cloud.provider`*::
+
--
type: keyword

example: ec2

Name of the cloud provider. Example values are ec2, gce, or digitalocean.


--

*`cloud.availability_zone`*::
+
--
type: keyword

example: us-east-1c

Availability zone in which this host is running.


--

*`cloud.region`*::
+
--
type: keyword

example: us-east-1

Region in which this host is running.


--

*`cloud.instance.id`*::
+
--
type: keyword

example: i-1234567890abcdef0

Instance ID of the host machine.


--

*`cloud.instance.name`*::
+
--
type: keyword

Instance name of the host machine.


--

*`cloud.machine.type`*::
+
--
type: keyword

example: t2.medium

Machine type of the host machine.


--

*`cloud.account.id`*::
+
--
type: keyword

example: 666777888999

The cloud account or organization id used to identify different entities in a multi-tenant environment.
Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.


--

[float]
== container fields

Container fields are used for meta information about the specific container that is the source of information. These fields help correlate data based containers from any runtime.



*`container.runtime`*::
+
--
type: keyword

example: docker

Runtime managing this container.


--

*`container.id`*::
+
--
type: keyword

Unique container id.


--

*`container.image.name`*::
+
--
type: keyword

Name of the image the container was built on.


--

*`container.image.tag`*::
+
--
type: keyword

Container image tag.


--

*`container.name`*::
+
--
type: keyword

Container name.


--

*`container.labels`*::
+
--
type: object

Image labels.


--

[float]
== destination fields

Destination fields describe details about the destination of a packet/event.



*`destination.ip`*::
+
--
type: ip

IP address of the destination.
Can be one or multiple IPv4 or IPv6 addresses.


--

*`destination.port`*::
+
--
type: long

Port of the destination.


--

*`destination.mac`*::
+
--
type: keyword

MAC address of the destination.


--

*`destination.domain`*::
+
--
type: keyword

Destination domain.


--

[float]
== geo fields

Geolocation for destination.


*`destination.geo.continent_name`*::
+
--
type: keyword

Name of the continent.


--

*`destination.geo.country_iso_code`*::
+
--
type: keyword

Country ISO code.


--

*`destination.geo.location`*::
+
--
type: geo_point

Longitude and latitude.


--

*`destination.geo.region_name`*::
+
--
type: keyword

Region name.


--

*`destination.geo.city_name`*::
+
--
type: keyword

City name.


--

*`destination.geo.region_iso_code`*::
+
--
type: keyword

Region ISO code.


--

[float]
== device fields

Device fields are used to provide additional information about the device that is the source of the information. This could be a firewall, network device, etc.



*`device.mac`*::
+
--
type: keyword

MAC address of the device


--

*`device.ip`*::
+
--
type: ip

IP address of the device.


--

*`device.hostname`*::
+
--
type: keyword

Hostname of the device.


--

*`device.vendor`*::
+
--
type: text

Device vendor information.


--

*`device.version`*::
+
--
type: keyword

Device version.


--

*`device.serial_number`*::
+
--
type: keyword

Device serial number.


--

*`device.timezone.offset.sec`*::
+
--
type: long

example: -5400

Timezone offset of the host in seconds.
Number of seconds relative to UTC. If the offset is -01:30 the value will be -5400.


--

*`device.type`*::
+
--
type: keyword

example: firewall

The type of the device the data is coming from.
There is no predefined list of device types. Some examples are `endpoint`, `firewall`, `ids`, `ips`, `proxy`.


--

[float]
== error fields

These fields can represent errors of any kind. Use them for errors that happen while fetching events or in cases where the event itself contains an error.



*`error.id`*::
+
--
type: keyword

Unique identifier for the error.


--

*`error.message`*::
+
--
type: text

Error message.


--

[float]
== event fields

The event fields are used for context information about the data itself.



*`event.id`*::
+
--
type: keyword

example: 8a4f500d

Unique ID to describe the event.


--

*`event.category`*::
+
--
type: keyword

example: metrics

Event category.
This can be a user defined category.


--

*`event.type`*::
+
--
type: keyword

example: nginx-stats-metrics

A type given to this kind of event which can be used for grouping.
This is normally defined by the user.


--

*`event.action`*::
+
--
type: keyword

example: reject

The action captured by the event. The type of action will vary from system to system but is likely to include actions by security services, such as blocking or quarantining; as well as more generic actions such as login events, file i/o or proxy forwarding events.
The value is normally defined by the user.


--

*`event.module`*::
+
--
type: keyword

example: mysql

Name of the module this data is coming from.
This information is coming from the modules used in Beats or Logstash.


--

*`event.dataset`*::
+
--
type: keyword

example: stats

Name of the dataset.
The concept of a `dataset` (fileset / metricset) is used in Beats as a subset of modules. It contains the information which is currently stored in metricset.name and metricset.module or fileset.name.


--

*`event.severity`*::
+
--
type: long

example: 7

Severity describes the severity of the event. What the different severity values mean can very different between use cases. It's up to the implementer to make sure severities are consistent across events.


--

*`event.original`*::
+
--
type: keyword

example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232

Raw text message of entire event. Used to demonstrate log integrity.
This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`.


Field is not indexed.

--

*`event.hash`*::
+
--
type: keyword

example: 123456789012345678901234567890ABCD

Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.


--

*`event.version`*::
+
--
type: keyword

example: 0.1.0

required: True

The version field contains the version an event for ECS adheres to.
This field should be provided as part of each event to make it possible to detect to which ECS version an event belongs.
event.version is a required field and must exist in all events. It describes which ECS version the event adheres to.
The current version is 0.1.0.


--

*`event.duration`*::
+
--
type: long

Duration of the event in nanoseconds.


--

*`event.created`*::
+
--
type: date

event.created contains the date when the event was created.
This timestamp is distinct from @timestamp in that @timestamp contains the processed timestamp. For logs these two timestamps can be different as the timestamp in the log line and when the event is read for example by Filebeat are not identical. `@timestamp` must contain the timestamp extracted from the log line, event.created when the log line is read. The same could apply to package capturing where @timestamp contains the timestamp extracted from the network package and event.created when the event was created.
In case the two timestamps are identical, @timestamp should be used.


--

*`event.risk_score`*::
+
--
type: float

Risk score or priority of the event (e.g. security solutions). Use your system's original value here.


--

*`event.risk_score_norm`*::
+
--
type: float

Normalized risk score or priority of the event, on a scale of 0 to 100.
This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.


--

[float]
== file fields

File fields provide details about each file.



*`file.path`*::
+
--
type: text

Path to the file.

*`file.path.raw`*::
+
--
type: keyword

Path to the file. This is a non-analyzed field that is useful for aggregations.


--

--

*`file.target_path`*::
+
--
type: text

Target path for symlinks.

*`file.target_path.raw`*::
+
--
type: keyword

Path to the file. This is a non-analyzed field that is useful for aggregations.


--

--

*`file.extension`*::
+
--
type: keyword

example: png

File extension.
This should allow easy filtering by file extensions.


--

*`file.type`*::
+
--
type: keyword

File type (file, dir, or symlink).

--

*`file.device`*::
+
--
type: keyword

Device that is the source of the file.

--

*`file.inode`*::
+
--
type: keyword

Inode representing the file in the filesystem.

--

*`file.uid`*::
+
--
type: keyword

The user ID (UID) or security identifier (SID) of the file owner.


--

*`file.owner`*::
+
--
type: keyword

File owner's username.

--

*`file.gid`*::
+
--
type: keyword

Primary group ID (GID) of the file.

--

*`file.group`*::
+
--
type: keyword

Primary group name of the file.

--

*`file.mode`*::
+
--
type: keyword

example: 416

Mode of the file in octal representation.

--

*`file.size`*::
+
--
type: long

File size in bytes (field is only added when `type` is `file`).

--

*`file.mtime`*::
+
--
type: date

Last time file content was modified.

--

*`file.ctime`*::
+
--
type: date

Last time file metadata changed.

--

[float]
== geo fields

Geo fields can carry data about a specific location related to an event or geo information for an IP field.



*`geo.continent_name`*::
+
--
type: keyword

Name of the continent.


--

*`geo.country_iso_code`*::
+
--
type: keyword

Country ISO code.


--

*`geo.location`*::
+
--
type: geo_point

Longitude and latitude.


--

*`geo.region_name`*::
+
--
type: keyword

Region name.


--

*`geo.city_name`*::
+
--
type: keyword

City name.


--

[float]
== host fields

Host fields provide information related to a host. A host can be a physical machine, a virtual machine, or a Docker container.
Normally the host information is related to the machine on which the event was generated/collected, but they can be used differently if needed.



*`host.timezone.offset.sec`*::
+
--
type: long

example: -5400

Timezone offset of the host in seconds.
Number of seconds relative to UTC. If the offset is -01:30 the value will be -5400.


--

*`host.name`*::
+
--
type: keyword

host.name is the hostname of the host.
It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.


--

*`host.id`*::
+
--
type: keyword

Unique host id.
As hostname is not always unique, use values that are meaningful in your environment.
Example: The current usage of `beat.name`.


--

*`host.ip`*::
+
--
type: ip

Host ip address.


--

*`host.mac`*::
+
--
type: keyword

Host mac address.


--

*`host.type`*::
+
--
type: keyword

Type of host.
For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.


--

*`host.os.platform`*::
+
--
type: keyword

example: darwin

Operating system platform (centos, ubuntu, windows, etc.)


--

*`host.os.name`*::
+
--
type: keyword

example: Mac OS X

Operating system name.


--

*`host.os.family`*::
+
--
type: keyword

example: debian

OS family (redhat, debian, freebsd, windows, etc.)


--

*`host.os.version`*::
+
--
type: keyword

example: 10.12.6

Operating system version.


--

*`host.architecture`*::
+
--
type: keyword

example: x86_64

Operating system architecture.


--

[float]
== http fields

Fields related to HTTP requests and responses.



*`http.request.method`*::
+
--
type: keyword

example: GET, POST, PUT

Http request method.


--

*`http.response.status_code`*::
+
--
type: long

example: 404

Http response status code.


--

*`http.response.body`*::
+
--
type: text

example: Hello world

The full http response body.


--

*`http.version`*::
+
--
type: keyword

example: 1.1

Http version.


--

[float]
== log fields

Fields which are specific to log events.



*`log.level`*::
+
--
type: keyword

example: ERR

Log level of the log event.
Some examples are `WARN`, `ERR`, `INFO`.


--

*`log.original`*::
+
--
type: keyword

example: Sep 19 08:26:10 localhost My log


This is the original log message and contains the full log message before splitting it up in multiple parts.
In contrast to the `message` field which can contain an extracted part of the log message, this field contains the original, full log message. It can have already some modifications applied like encoding or new lines removed to clean up the log message.
This field is not indexed and doc_values are disabled so it can't be queried but the value can be retrieved from `_source`.


Field is not indexed.

--

[float]
== network fields

Fields related to network data.



*`network.name`*::
+
--
type: text

example: Guest Wifi

Name given by operators to sections of their network.


*`network.name.raw`*::
+
--
type: keyword

Name given by operators to sections of their network.


--

--

*`network.protocol`*::
+
--
type: keyword

example: http

Network protocol name.


--

*`network.direction`*::
+
--
type: keyword

example: inbound

Direction of the network traffic.
Recommended values are:
  * inbound
  * outbound
  * unknown


--

*`network.forwarded_ip`*::
+
--
type: ip

example: 192.1.1.2

Host IP address when the source IP address is the proxy.


--

*`network.inbound.bytes`*::
+
--
type: long

example: 184

Network inbound bytes.


--

*`network.inbound.packets`*::
+
--
type: long

example: 12

Network inbound packets.


--

*`network.outbound.bytes`*::
+
--
type: long

example: 184

Network outbound bytes.


--

*`network.outbound.packets`*::
+
--
type: long

example: 12

Network outbound packets.


--

*`network.total.bytes`*::
+
--
type: long

example: 368

Network total bytes. The sum of inbound.bytes + outbound.bytes.


--

*`network.total.packets`*::
+
--
type: long

example: 24

Network outbound packets. The sum of inbound.packets + outbound.packets


--

[float]
== organization fields

The organization fields enrich data with information about the company or entity the data is associated with. These fields help you arrange or filter data stored in an index by one or multiple organizations.



*`organization.name`*::
+
--
type: text

Organization name.


--

*`organization.id`*::
+
--
type: keyword

Unique identifier for the organization.


--

[float]
== os fields

The OS fields contain information about the operating system. These fields are often used inside other prefixes, such as `host.os.*` or `user_agent.os.*`.



*`os.platform`*::
+
--
type: keyword

example: darwin

Operating system platform (such centos, ubuntu, windows).


--

*`os.name`*::
+
--
type: keyword

example: Mac OS X

Operating system name.


--

*`os.family`*::
+
--
type: keyword

example: debian

OS family (such as redhat, debian, freebsd, windows).


--

*`os.version`*::
+
--
type: keyword

example: 10.12.6-rc2

Operating system version as a raw string.


--

*`os.kernel`*::
+
--
type: keyword

example: 4.4.0-112-generic

Operating system kernel version as a raw string.


--

[float]
== process fields

These fields contain information about a process. These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.



*`process.args`*::
+
--
type: keyword

example: ['-l', 'user', '10.0.0.16']

Process arguments.
May be filtered to protect sensitive information.


--

*`process.name`*::
+
--
type: keyword

example: ssh

Process name.
Sometimes called program name or similar.


--

*`process.pid`*::
+
--
type: long

Process id.


--

*`process.ppid`*::
+
--
type: long

Process parent id.


--

*`process.title`*::
+
--
type: keyword

Process title.
The proctitle, often the same as process name.


--

[float]
== service fields

The service fields describe the service for or from which the data was collected. These fields help you find and correlate logs for a specific service and version.



*`service.id`*::
+
--
type: keyword

example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6

Unique identifier of the running service.
This id should uniquely identify this service. This makes it possible to correlate logs and metrics for one specific service.
Example: If you are experiencing issues with one redis instance, you can filter on that id to see metrics and logs for that single instance.


--

*`service.name`*::
+
--
type: keyword

example: elasticsearch

Name of the service data is collected from.
The name can be used to group and correlate logs and metrics from one service.
Example: If logs or metrics are collected from Redis, `service.name` would be `redis`.


--

*`service.type`*::
+
--
type: keyword

Service type.


--

*`service.state`*::
+
--
type: keyword

Current state of the service.


--

*`service.version`*::
+
--
type: keyword

example: 3.2.4

Version of the service the data was collected from.
This allows to look at a data set only for a specific version of a service.


--

*`service.ephemeral_id`*::
+
--
type: keyword

example: 8a4f500f

Ephemeral identifier of this service (if one exists).
This id normally changes across restarts, but `service.id` does not.


--

[float]
== source fields

Source fields describe details about the source of the event.



*`source.ip`*::
+
--
type: ip

IP address of the source.
Can be one or multiple IPv4 or IPv6 addresses.


--

*`source.port`*::
+
--
type: long

Port of the source.


--

*`source.mac`*::
+
--
type: keyword

MAC address of the source.


--

*`source.domain`*::
+
--
type: keyword

Source domain.


--

[float]
== geo fields

Geolocation for source.


*`source.geo.continent_name`*::
+
--
type: keyword

Name of the continent.


--

*`source.geo.country_iso_code`*::
+
--
type: keyword

Country ISO code.


--

*`source.geo.location`*::
+
--
type: geo_point

Longitude and latitude.


--

*`source.geo.region_name`*::
+
--
type: keyword

Region name.


--

*`source.geo.city_name`*::
+
--
type: keyword

City name.


--

*`source.geo.region_iso_code`*::
+
--
type: keyword

Region ISO code.


--

[float]
== url fields

URL fields provide a complete URL, with scheme, host, and path. The URL object can be reused in other prefixes, such as `host.url.*` for example. Keep the structure consistent whenever you use URL fields.



*`url.href`*::
+
--
type: text

example: https://elastic.co:443/search?q=elasticsearch#top

Full url. The field is stored as keyword.
`url.href` is a [multi field](https://www.elastic.co/guide/en/ elasticsearch/reference/6.2/ multi-fields.html#_multi_fields_with_multiple_analyzers). The data is stored as keyword `url.href` and test `url.href.analyzed`. These fields enable you to run a query against part of the url still works splitting up the URL at ingest time.
`href` is an analyzed field so the parsed information can be accessed through `href.analyzed` in queries.


*`url.href.raw`*::
+
--
type: keyword

The full URL. This is a non-analyzed field that is useful for aggregations.


--

--

*`url.scheme`*::
+
--
type: keyword

example: https

Scheme of the request, such as "https".
Note: The `:` is not part of the scheme.


--

*`url.hostname`*::
+
--
type: keyword

example: elastic.co

Hostname of the request, such as "elastic.co".
In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `hostname` field.


--

*`url.port`*::
+
--
type: integer

example: 443

Port of the request, such as 443.


--

*`url.path`*::
+
--
type: text

Path of the request, such as "/search".


*`url.path.raw`*::
+
--
type: keyword

URL path. A non-analyzed field that is useful for aggregations.


--

--

*`url.query`*::
+
--
type: text

The query field describes the query string of the request, such as "q=elasticsearch".
The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.


*`url.query.raw`*::
+
--
type: keyword

URL query part. A non-analyzed field that is useful for aggregations.


--

--

*`url.fragment`*::
+
--
type: keyword

Portion of the url after the `#`, such as "top".
The `#` is not part of the fragment.


--

*`url.username`*::
+
--
type: keyword

Username of the request.


--

*`url.password`*::
+
--
type: keyword

Password of the request.


--

[float]
== user fields

The user fields describe information about the user that is relevant to  the event. Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.



*`user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`user.name`*::
+
--
type: keyword

Name of the user.
The field is a keyword, and will not be tokenized.


--

*`user.email`*::
+
--
type: keyword

User email address.


--

*`user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.


--

[float]
== user_agent fields

The user_agent fields normally come from a browser request. They often show up in web service logs coming from the parsed user agent string.



*`user_agent.original`*::
+
--
type: text

Unparsed version of the user_agent.


--

*`user_agent.device`*::
+
--
type: keyword

Name of the physical device.


--

*`user_agent.version`*::
+
--
type: keyword

Version of the physical device.


--

*`user_agent.major`*::
+
--
type: long

Major version of the user agent.


--

*`user_agent.minor`*::
+
--
type: long

Minor version of the user agent.


--

*`user_agent.patch`*::
+
--
type: keyword

Patch version of the user agent.


--

*`user_agent.name`*::
+
--
type: keyword

example: Chrome

Name of the user agent.


--

*`user_agent.os.name`*::
+
--
type: keyword

Name of the operating system.


--

*`user_agent.os.version`*::
+
--
type: keyword

Version of the operating system.


--

*`user_agent.os.major`*::
+
--
type: long

Major version of the operating system.


--

*`user_agent.os.minor`*::
+
--
type: long

Minor version of the operating system.


--

*`agent.type`*::
+
--
type: alias

--

*`agent.hostname`*::
+
--
type: alias

--

[[exported-fields-host-processor]]
== Host fields

Info collected for the host machine.




*`host.os.kernel`*::
+
--
type: keyword

The operating system's kernel version.


--

[[exported-fields-kubernetes-processor]]
== Kubernetes fields

Kubernetes metadata added by the kubernetes processor




*`kubernetes.pod.name`*::
+
--
type: keyword

Kubernetes pod name


--

*`kubernetes.pod.uid`*::
+
--
type: keyword

Kubernetes Pod UID


--

*`kubernetes.namespace`*::
+
--
type: keyword

Kubernetes namespace


--

*`kubernetes.node.name`*::
+
--
type: keyword

Kubernetes node name


--

*`kubernetes.labels`*::
+
--
type: object

Kubernetes labels map


--

*`kubernetes.annotations`*::
+
--
type: object

Kubernetes annotations map


--

*`kubernetes.container.name`*::
+
--
type: keyword

Kubernetes container name


--

*`kubernetes.container.image`*::
+
--
type: keyword

Kubernetes container image


--

[[exported-fields-system]]
== APM System Metrics fields

System status metrics, like CPU and memory usage, that are collected from the operating system.



[float]
== system fields

`system` contains local system metrics.



[float]
== cpu fields

`cpu` contains local CPU stats.



*`system.cpu.total.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent by the process since the last event. This value is normalized by the number of CPU cores and it ranges from 0 to 100%.


--

[float]
== memory fields

`memory` contains local memory stats.



*`system.memory.total`*::
+
--
type: long

format: bytes

Total memory.


--

[float]
== actual fields

Actual memory used and free.



*`system.memory.actual.free`*::
+
--
type: long

format: bytes

Actual free memory in bytes. It is calculated based on the OS. On Linux it consists of the free memory plus caches and buffers. On OSX it is a sum of free memory and the inactive memory. On Windows, it is equal to `system.memory.free`.


--

[float]
== process fields

`process` contains process metadata, CPU metrics, and memory metrics.



[float]
== cpu fields

`cpu` contains local CPU stats.



*`system.process.cpu.total.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent by the process since the last event. This value is normalized by the number of CPU cores and it ranges from 0 to 100%.


--

[float]
== memory fields

Memory-specific statistics per process.


*`system.process.memory.size`*::
+
--
type: long

format: bytes

The total virtual memory the process has.


--

*`system.process.memory.rss.bytes`*::
+
--
type: long

format: bytes

The Resident Set Size. The amount of memory the process occupied in main memory (RAM).


--

