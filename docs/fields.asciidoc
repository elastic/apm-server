
////
This file is generated! See _meta/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
= Exported fields

[partintro]

--
This document describes the fields that are exported by apm-server. They are
grouped in the following categories:

* <<exported-fields-apm>>
* <<exported-fields-apm-error>>
* <<exported-fields-apm-sourcemap>>
* <<exported-fields-apm-span>>
* <<exported-fields-apm-transaction>>
* <<exported-fields-beat>>
* <<exported-fields-cloud>>
* <<exported-fields-docker-processor>>
* <<exported-fields-host-processor>>
* <<exported-fields-kubernetes-processor>>
* <<exported-fields-system>>

--
[[exported-fields-apm]]
== General APM fields fields

None


*`listening`*::
+
--
type: keyword

Address the server is listening on.


--

*`processor.name`*::
+
--
type: keyword

Processor name.

--

*`processor.event`*::
+
--
type: keyword

Processor event.

--

[float]
== context fields

Any arbitrary contextual information regarding the event, captured by the agent, optionally provided by the user.



*`context.tags`*::
+
--
type: object

A flat mapping of user-defined tags with string values.


--


*`context.user.username`*::
+
--
type: keyword

The username of the logged in user.


--

*`context.user.id`*::
+
--
type: keyword

Identifier of the logged in user.


--

*`context.user.email`*::
+
--
type: keyword

Email of the logged in user.


--

*`context.user.ip`*::
+
--
type: ip

IP of the user where the event is recorded, typically a web browser. This is obtained from the X-Forwarded-For header, of which the first entry is the IP of the original client. This value however might not be necessarily trusted, as it can be forged by a malicious user.


--

*`context.user.user-agent`*::
+
--
type: text

Software agent acting in behalf of a user, eg. a web browser / OS combination.


--


[float]
== url fields

A complete Url, with scheme, host and path.



*`context.request.url.raw`*::
+
--
type: keyword

The raw, unparsed URL of the request, e.g https://example.com:443/search?q=elasticsearch#top.


--

*`context.request.url.protocol`*::
+
--
type: keyword

The protocol of the request, e.g. "https:".


--

*`context.request.url.full`*::
+
--
type: keyword

The full, possibly agent-assembled URL of the request, e.g https://example.com:443/search?q=elasticsearch#top.


--

*`context.request.url.hostname`*::
+
--
type: keyword

The hostname of the request, e.g. "example.com".


--

*`context.request.url.port`*::
+
--
type: keyword

The port of the request, e.g. 443.


--

*`context.request.url.pathname`*::
+
--
type: keyword

The path of the request, e.g. "/search".


--

*`context.request.url.search`*::
+
--
type: keyword

The search describes the query string of the request, e.g. "q=elasticsearch".


--

*`context.request.url.hash`*::
+
--
type: keyword

The hash of the request URL, e.g. "top".


--

*`context.request.http_version`*::
+
--
type: keyword

The http version of the request leading to this event.


--

*`context.request.method`*::
+
--
type: keyword

The http method of the request leading to this event.


--


*`context.response.status_code`*::
+
--
type: long

The http status code of the response, eg. '200'.


--

*`context.response.finished`*::
+
--
type: boolean

A boolean indicating whether the response was finished or not.


--

[float]
== system fields

Optional system fields.



*`context.system.hostname`*::
+
--
type: keyword

The hostname of the system the event was recorded on.


--

*`context.system.architecture`*::
+
--
type: keyword

The architecture of the system the event was recorded on.


--

*`context.system.platform`*::
+
--
type: keyword

The platform of the system the event was recorded on.


--

*`context.system.ip`*::
+
--
type: ip

IP of the host that records the event.


--

[float]
== process fields

Information pertaining to the running process where the data was collected



*`context.process.pid`*::
+
--
type: long

Numeric process ID of the service process.


--

*`context.process.ppid`*::
+
--
type: long

Numeric ID of the service's parent process.


--

*`context.process.title`*::
+
--
type: keyword

Service process title.


--

[float]
== service fields

Service fields.



*`context.service.name`*::
+
--
type: keyword

format: url

Immutable unique name of the service emitting this event.


--

*`context.service.version`*::
+
--
type: keyword

Version of the service emitting this event.


--

*`context.service.environment`*::
+
--
type: keyword

Service environment.


--


*`context.service.language.name`*::
+
--
type: keyword

Name of the programming language used.


--

*`context.service.language.version`*::
+
--
type: keyword

Version of the programming language used.


--


*`context.service.runtime.name`*::
+
--
type: keyword

Name of the runtime used.


--

*`context.service.runtime.version`*::
+
--
type: keyword

Version of the runtime used.


--


*`context.service.framework.name`*::
+
--
type: keyword

Name of the framework used.


--

*`context.service.framework.version`*::
+
--
type: keyword

Version of the framework used.


--


*`context.service.agent.name`*::
+
--
type: keyword

Name of the agent used.


--

*`context.service.agent.version`*::
+
--
type: keyword

Version of the agent used.


--


*`transaction.id`*::
+
--
type: keyword

format: url

The transaction ID.


--


*`trace.id`*::
+
--
type: keyword

The ID of the trace to which the event belongs to.


--


*`parent.id`*::
+
--
type: keyword

The ID of the parent event.


--

[[exported-fields-apm-error]]
== APM Error fields

Error-specific data for APM


*`view errors`*::
+
--
type: keyword

format: url

--

*`error id icon`*::
+
--
type: keyword

format: url

--

[float]
== error fields

Data captured by an agent representing an event occurring in a monitored service.



*`error.id`*::
+
--
type: keyword

The ID of the error.


--

*`error.culprit`*::
+
--
type: text

Function call which was the primary perpetrator of this event.

--

*`error.grouping_key`*::
+
--
type: keyword

format: url

GroupingKey of the logged error for use in grouping.


--

[float]
== exception fields

Information about the originally thrown error.



*`error.exception.code`*::
+
--
type: keyword

The error code set when the error happened, e.g. database error code.

--

*`error.exception.message`*::
+
--
type: text

The original error message.

--

*`error.exception.module`*::
+
--
type: keyword

The module namespace of the original error.

--

*`error.exception.type`*::
+
--
type: keyword

--

*`error.exception.handled`*::
+
--
type: boolean

Indicator whether the error was caught somewhere in the code or not.

--

[float]
== log fields

Additional information added by logging the error.



*`error.log.level`*::
+
--
type: keyword

The severity of the record.

--

*`error.log.logger_name`*::
+
--
type: keyword

The name of the logger instance used.

--

*`error.log.message`*::
+
--
type: text

The additionally logged error message.

--

*`error.log.param_message`*::
+
--
type: keyword

A parametrized message. E.g. 'Could not connect to %s'. The property message is still required, and should be equal to the param_message, but with placeholders replaced. In some situations the param_message is used to group errors together.


--

[[exported-fields-apm-sourcemap]]
== APM Sourcemap fields

Sourcemap files enriched with metadata



[float]
== service fields

Service fields.



*`sourcemap.service.name`*::
+
--
type: keyword

The name of the service this sourcemap belongs to.


--

*`sourcemap.service.version`*::
+
--
type: keyword

Service version.


--

*`sourcemap.bundle_filepath`*::
+
--
type: keyword

Location of the sourcemap relative to the file requesting it.


--

[[exported-fields-apm-span]]
== APM Span fields

Span-specific data for APM.


*`view spans`*::
+
--
format: url

--


*`span.id`*::
+
--
type: long

Deprecated (>= 6.5). A locally unique ID of the span.


--

*`span.hex_id`*::
+
--
type: keyword

The ID of the span, introduced (>= 6.5).


--

*`span.name`*::
+
--
type: keyword

Generic designation of a span in the scope of a transaction.


--

*`span.type`*::
+
--
type: keyword

Keyword of specific relevance in the service's domain (eg: 'db.postgresql.query', 'template.erb', 'cache', etc).


--

[float]
== start fields

None


*`span.start.us`*::
+
--
type: long

Offset relative to the transaction's timestamp identifying the start of the span, in microseconds.


--

[float]
== duration fields

None


*`span.duration.us`*::
+
--
type: long

format: duration

Duration of the span, in microseconds.


--

*`span.parent`*::
+
--
type: long

Deprecated (>= 6.5). The locally unique ID of the parent of the span.


--

[[exported-fields-apm-transaction]]
== APM Transaction fields

Transaction-specific data for APM



*`transaction.name`*::
+
--
type: text

Generic designation of a transaction in the scope of a single service (eg. 'GET /users/:id').


*`transaction.name.keyword`*::
+
--
type: keyword

--

--

*`transaction.type`*::
+
--
type: keyword

Keyword of specific relevance in the service's domain (eg. 'request', 'backgroundjob', etc)


--

[float]
== duration fields

None


*`transaction.duration.us`*::
+
--
type: long

format: duration

Total duration of this transaction, in microseconds.


--

*`transaction.result`*::
+
--
type: keyword

The result of the transaction. HTTP status code for HTTP-related transactions.


--

*`transaction.marks`*::
+
--
type: object

A user-defined mapping of groups of marks in milliseconds.


--

*`transaction.marks.navigationTiming`*::
+
--
type: object

--

*`transaction.sampled`*::
+
--
type: boolean

Transactions that are 'sampled' will include all available information. Transactions that are not sampled will not have spans or context. Defaults to true.


--



*`transaction.span_count.dropped.total`*::
+
--
type: long

The total amount of dropped spans for this transaction.

--

[[exported-fields-beat]]
== Beat fields

Contains common beat fields available in all event types.



*`beat.name`*::
+
--
The name of the Beat sending the log messages. If the Beat name is set in the configuration file, then that value is used. If it is not set, the hostname is used. To set the Beat name, use the `name` option in the configuration file.


--

*`beat.hostname`*::
+
--
The hostname as returned by the operating system on which the Beat is running.


--

*`beat.timezone`*::
+
--
The timezone as returned by the operating system on which the Beat is running.


--

*`beat.version`*::
+
--
The version of the beat that generated this event.


--

*`@timestamp`*::
+
--
type: date

example: August 26th 2016, 12:35:53.332

format: date

required: True

The timestamp when the event log record was generated.


--

*`tags`*::
+
--
Arbitrary tags that can be set per Beat and per transaction type.


--

*`fields`*::
+
--
type: object

Contains user configurable fields.


--

[float]
== error fields

Error fields containing additional info in case of errors.



*`error.message`*::
+
--
type: text

Error message.


--

*`error.code`*::
+
--
type: long

Error code.


--

*`error.type`*::
+
--
type: keyword

Error type.


--

[[exported-fields-cloud]]
== Cloud provider metadata fields

Metadata from cloud providers added by the add_cloud_metadata processor.



*`meta.cloud.provider`*::
+
--
example: ec2

Name of the cloud provider. Possible values are ec2, gce, or digitalocean.


--

*`meta.cloud.instance_id`*::
+
--
Instance ID of the host machine.


--

*`meta.cloud.instance_name`*::
+
--
Instance name of the host machine.


--

*`meta.cloud.machine_type`*::
+
--
example: t2.medium

Machine type of the host machine.


--

*`meta.cloud.availability_zone`*::
+
--
example: us-east-1c

Availability zone in which this host is running.


--

*`meta.cloud.project_id`*::
+
--
example: project-x

Name of the project in Google Cloud.


--

*`meta.cloud.region`*::
+
--
Region in which this host is running.


--

[[exported-fields-docker-processor]]
== Docker fields

Docker stats collected from Docker.




*`docker.container.id`*::
+
--
type: keyword

Unique container id.


--

*`docker.container.image`*::
+
--
type: keyword

Name of the image the container was built on.


--

*`docker.container.name`*::
+
--
type: keyword

Container name.


--

*`docker.container.labels`*::
+
--
type: object

Image labels.


--

[[exported-fields-host-processor]]
== Host fields

Info collected for the host machine.




*`host.name`*::
+
--
type: keyword

Hostname.


--

*`host.id`*::
+
--
type: keyword

Unique host id.


--

*`host.architecture`*::
+
--
type: keyword

Host architecture (e.g. x86_64, arm, ppc, mips).


--

*`host.os.platform`*::
+
--
type: keyword

OS platform (e.g. centos, ubuntu, windows).


--

*`host.os.version`*::
+
--
type: keyword

OS version.


--

*`host.os.family`*::
+
--
type: keyword

OS family (e.g. redhat, debian, freebsd, windows).


--

*`host.os.kernel`*::
+
--
type: keyword

The operating system's kernel version.


--

*`host.ip`*::
+
--
type: ip

List of IP-addresses.


--

*`host.mac`*::
+
--
type: keyword

List of hardware-addresses, usually MAC-addresses.


--

[[exported-fields-kubernetes-processor]]
== Kubernetes fields

Kubernetes metadata added by the kubernetes processor




*`kubernetes.pod.name`*::
+
--
type: keyword

Kubernetes pod name


--

*`kubernetes.pod.uid`*::
+
--
type: keyword

Kubernetes Pod UID


--

*`kubernetes.namespace`*::
+
--
type: keyword

Kubernetes namespace


--

*`kubernetes.node.name`*::
+
--
type: keyword

Kubernetes node name


--

*`kubernetes.labels`*::
+
--
type: object

Kubernetes labels map


--

*`kubernetes.annotations`*::
+
--
type: object

Kubernetes annotations map


--

*`kubernetes.container.name`*::
+
--
type: keyword

Kubernetes container name


--

*`kubernetes.container.image`*::
+
--
type: keyword

Kubernetes container image


--

[[exported-fields-system]]
== APM System Metrics fields

System status metrics, like CPU and memory usage, that are collected from the operating system.



[float]
== system fields

`system` contains local system metrics.



[float]
== cpu fields

`cpu` contains local CPU stats.



*`system.cpu.total.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent by the process since the last event. This value is normalized by the number of CPU cores and it ranges from 0 to 100%.


--

[float]
== memory fields

`memory` contains local memory stats.



*`system.memory.total`*::
+
--
type: long

format: bytes

Total memory.


--

[float]
== actual fields

Actual memory used and free.



*`system.memory.actual.free`*::
+
--
type: long

format: bytes

Actual free memory in bytes. It is calculated based on the OS. On Linux it consists of the free memory plus caches and buffers. On OSX it is a sum of free memory and the inactive memory. On Windows, it is equal to `system.memory.free`.


--

[float]
== process fields

`process` contains process metadata, CPU metrics, and memory metrics.



[float]
== cpu fields

`cpu` contains local CPU stats.



*`system.process.cpu.total.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent by the process since the last event. This value is normalized by the number of CPU cores and it ranges from 0 to 100%.


--

[float]
== memory fields

Memory-specific statistics per process.


*`system.process.memory.size`*::
+
--
type: long

format: bytes

The total virtual memory the process has.


--

*`system.process.memory.rss.bytes`*::
+
--
type: long

format: bytes

The Resident Set Size. The amount of memory the process occupied in main memory (RAM).


--

