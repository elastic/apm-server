
////
This file is generated! See _meta/fields.yml and scripts/generate_fields_docs.py
////

[[exported-fields]]
= Exported fields

[partintro]

--
This document describes the fields that are exported by Apm-Server. They are
grouped in the following categories:

* <<exported-fields-apm>>
* <<exported-fields-apm-error>>
* <<exported-fields-apm-profile>>
* <<exported-fields-apm-sourcemap>>
* <<exported-fields-apm-span>>
* <<exported-fields-apm-transaction>>
* <<exported-fields-system>>

--
[[exported-fields-apm]]
== General APM fields

Fields common to various APM events.



*`processor.name`*::
+
--
Processor name.

type: keyword

--

*`processor.event`*::
+
--
Processor event.

type: keyword

--


*`timestamp.us`*::
+
--
Timestamp of the event in microseconds since Unix epoch.


type: long

--

[float]
=== url

A complete Url, with scheme, host and path.



*`url.scheme`*::
+
--
The protocol of the request, e.g. "https:".


type: keyword

--

*`url.full`*::
+
--
The full, possibly agent-assembled URL of the request, e.g https://example.com:443/search?q=elasticsearch#top.


type: keyword

--

*`url.domain`*::
+
--
The hostname of the request, e.g. "example.com".


type: keyword

--

*`url.port`*::
+
--
The port of the request, e.g. 443.


type: long

--

*`url.path`*::
+
--
The path of the request, e.g. "/search".


type: keyword

--

*`url.query`*::
+
--
The query string of the request, e.g. "q=elasticsearch".


type: keyword

--

*`url.fragment`*::
+
--
A fragment specifying a location in a web page , e.g. "top".


type: keyword

--


*`http.version`*::
+
--
The http version of the request leading to this event.


type: keyword

--


*`http.request.method`*::
+
--
The http method of the request leading to this event.


type: keyword

--

*`http.request.headers`*::
+
--
The canonical headers of the monitored HTTP request.


type: object

Object is not enabled.

--


*`http.response.status_code`*::
+
--
The status code of the HTTP response.


type: long

--

*`http.response.finished`*::
+
--
Used by the Node agent to indicate when in the response life cycle an error has occurred.


type: boolean

--

*`http.response.headers`*::
+
--
The canonical headers of the monitored HTTP response.


type: object

Object is not enabled.

--

*`labels`*::
+
--
A flat mapping of user-defined labels with string, boolean or number values.


type: object

--

[float]
=== service

Service fields.



*`service.name`*::
+
--
Immutable name of the service emitting this event.


type: keyword

--

*`service.version`*::
+
--
Version of the service emitting this event.


type: keyword

--

*`service.environment`*::
+
--
Service environment.


type: keyword

--


*`service.node.name`*::
+
--
Unique meaningful name of the service node.


type: keyword

--


*`service.language.name`*::
+
--
Name of the programming language used.


type: keyword

--

*`service.language.version`*::
+
--
Version of the programming language used.


type: keyword

--


*`service.runtime.name`*::
+
--
Name of the runtime used.


type: keyword

--

*`service.runtime.version`*::
+
--
Version of the runtime used.


type: keyword

--


*`service.framework.name`*::
+
--
Name of the framework used.


type: keyword

--

*`service.framework.version`*::
+
--
Version of the framework used.


type: keyword

--


*`transaction.id`*::
+
--
The transaction ID.


type: keyword

--

*`transaction.sampled`*::
+
--
Transactions that are 'sampled' will include all available information. Transactions that are not sampled will not have spans or context.


type: boolean

--

*`transaction.type`*::
+
--
Keyword of specific relevance in the service's domain (eg. 'request', 'backgroundjob', etc)


type: keyword

--

*`transaction.name`*::
+
--
Generic designation of a transaction in the scope of a single service (eg. 'GET /users/:id').


type: keyword

--

*`transaction.name.text`*::
+
--
type: text

--

[float]
=== duration

None


*`transaction.duration.count`*::
+
--
type: long

--


*`transaction.duration.sum.us`*::
+
--
type: long

--

[float]
=== self_time

Portion of the transaction's duration where no direct child was running



*`transaction.self_time.count`*::
+
--
type: long

--


*`transaction.self_time.sum.us`*::
+
--
type: long

--

[float]
=== breakdown

Counter for collected breakdowns for the transaction



*`transaction.breakdown.count`*::
+
--
type: long

--


*`span.type`*::
+
--
Keyword of specific relevance in the service's domain (eg: 'db.postgresql.query', 'template.erb', 'cache', etc).


type: keyword

--

*`span.subtype`*::
+
--
A further sub-division of the type (e.g. postgresql, elasticsearch)


type: keyword

--

[float]
=== self_time

Portion of the span's duration where no direct child was running



*`span.self_time.count`*::
+
--
type: long

--


*`span.self_time.sum.us`*::
+
--
type: long

--


*`trace.id`*::
+
--
The ID of the trace to which the event belongs to.


type: keyword

--


*`parent.id`*::
+
--
The ID of the parent event.


type: keyword

--


*`agent.name`*::
+
--
Name of the agent used.


type: keyword

--

*`agent.version`*::
+
--
Version of the agent used.


type: keyword

--

*`agent.ephemeral_id`*::
+
--
The Ephemeral ID identifies a running process.


type: keyword

--

[float]
=== container

Container fields are used for meta information about the specific container that is the source of information. These fields help correlate data based containers from any runtime.



*`container.id`*::
+
--
Unique container id.


type: keyword

--

[float]
=== kubernetes

Kubernetes metadata reported by agents



*`kubernetes.namespace`*::
+
--
Kubernetes namespace


type: keyword

--


*`kubernetes.node.name`*::
+
--
Kubernetes node name


type: keyword

--


*`kubernetes.pod.name`*::
+
--
Kubernetes pod name


type: keyword

--

*`kubernetes.pod.uid`*::
+
--
Kubernetes Pod UID


type: keyword

--

[float]
=== host

Optional host fields.



*`host.architecture`*::
+
--
The architecture of the host the event was recorded on.


type: keyword

--

*`host.hostname`*::
+
--
The hostname of the host the event was recorded on.


type: keyword

--

*`host.name`*::
+
--
Name of the host the event was recorded on. It can contain same information as host.hostname or a name specified by the user.


type: keyword

--

*`host.ip`*::
+
--
IP of the host that records the event.


type: ip

--

[float]
=== os

The OS fields contain information about the operating system.



*`host.os.platform`*::
+
--
The platform of the host the event was recorded on.


type: keyword

--

[float]
=== process

Information pertaining to the running process where the data was collected



*`process.args`*::
+
--
Process arguments.
May be filtered to protect sensitive information.


type: keyword

--

*`process.pid`*::
+
--
Numeric process ID of the service process.


type: long

--

*`process.ppid`*::
+
--
Numeric ID of the service's parent process.


type: long

--

*`process.title`*::
+
--
Service process title.


type: keyword

--


*`observer.listening`*::
+
--
Address the server is listening on.


type: keyword

--

*`observer.hostname`*::
+
--
Hostname of the APM Server.


type: keyword

--

*`observer.version`*::
+
--
APM Server version.


type: keyword

--

*`observer.version_major`*::
+
--
Major version number of the observer


type: byte

--

*`observer.type`*::
+
--
The type will be set to `apm-server`.


type: keyword

--


*`user.name`*::
+
--
The username of the logged in user.


type: keyword

--

*`user.id`*::
+
--
Identifier of the logged in user.


type: keyword

--

*`user.email`*::
+
--
Email of the logged in user.


type: keyword

--


*`client.ip`*::
+
--
IP address of the client of a recorded event. This is typically obtained from a request's X-Forwarded-For or the X-Real-IP header or falls back to a given configuration for remote address.


type: ip

--


*`source.ip`*::
+
--
IP address of the source of a recorded event. This is typically obtained from a request's X-Forwarded-For or the X-Real-IP header or falls back to a given configuration for remote address.


type: ip

--

[float]
=== destination

Destination fields describe details about the destination of a packet/event.
Destination fields are usually populated in conjunction with source fields.


*`destination.address`*::
+
--
Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

type: keyword

--

*`destination.ip`*::
+
--
IP addess of the destination.
Can be one of multiple IPv4 or IPv6 addresses.

type: ip

--

*`destination.port`*::
+
--
Port of the destination.

type: long

format: string

--

[float]
=== user_agent

The user_agent fields normally come from a browser request. They often show up in web service logs coming from the parsed user agent string.



*`user_agent.original`*::
+
--
Unparsed version of the user_agent.


type: keyword

example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1

--

*`user_agent.original.text`*::
+
--
Software agent acting in behalf of a user, eg. a web browser / OS combination.


type: text

--

*`user_agent.name`*::
+
--
Name of the user agent.


type: keyword

example: Safari

--

*`user_agent.version`*::
+
--
Version of the user agent.


type: keyword

example: 12.0

--

[float]
=== device

Information concerning the device.



*`user_agent.device.name`*::
+
--
Name of the device.


type: keyword

example: iPhone

--

[float]
=== os

The OS fields contain information about the operating system.



*`user_agent.os.platform`*::
+
--
Operating system platform (such centos, ubuntu, windows).


type: keyword

example: darwin

--

*`user_agent.os.name`*::
+
--
Operating system name, without the version.


type: keyword

example: Mac OS X

--

*`user_agent.os.full`*::
+
--
Operating system name, including the version or code name.


type: keyword

example: Mac OS Mojave

--

*`user_agent.os.family`*::
+
--
OS family (such as redhat, debian, freebsd, windows).


type: keyword

example: debian

--

*`user_agent.os.version`*::
+
--
Operating system version as a raw string.


type: keyword

example: 10.14.1

--

*`user_agent.os.kernel`*::
+
--
Operating system kernel version as a raw string.


type: keyword

example: 4.4.0-112-generic

--

*`experimental`*::
+
--
Additional experimental data sent by the agents.

type: object

--

[[exported-fields-apm-error]]
== APM Error fields

Error-specific data for APM


[float]
=== error

Data captured by an agent representing an event occurring in a monitored service.



*`error.id`*::
+
--
The ID of the error.


type: keyword

--

*`error.culprit`*::
+
--
Function call which was the primary perpetrator of this event.

type: keyword

--

*`error.grouping_key`*::
+
--
GroupingKey of the logged error for use in grouping.


type: keyword

--

[float]
=== exception

Information about the originally thrown error.



*`error.exception.code`*::
+
--
The error code set when the error happened, e.g. database error code.

type: keyword

--

*`error.exception.message`*::
+
--
The original error message.

type: text

--

*`error.exception.module`*::
+
--
The module namespace of the original error.

type: keyword

--

*`error.exception.type`*::
+
--
type: keyword

--

*`error.exception.handled`*::
+
--
Indicator whether the error was caught somewhere in the code or not.

type: boolean

--

[float]
=== log

Additional information added by logging the error.



*`error.log.level`*::
+
--
The severity of the record.

type: keyword

--

*`error.log.logger_name`*::
+
--
The name of the logger instance used.

type: keyword

--

*`error.log.message`*::
+
--
The additionally logged error message.

type: text

--

*`error.log.param_message`*::
+
--
A parametrized message. E.g. 'Could not connect to %s'. The property message is still required, and should be equal to the param_message, but with placeholders replaced. In some situations the param_message is used to group errors together.


type: keyword

--

[[exported-fields-apm-profile]]
== APM Profile fields

Profiling-specific data for APM.




*`profile.cpu.ns`*::
+
--
Amount of CPU time profiled, in nanoseconds.


type: long

--


*`profile.samples.count`*::
+
--
Number of profile samples for the profiling period.


type: long

--


*`profile.alloc_objects.count`*::
+
--
Number of objects allocated since the process started.


type: long

--


*`profile.alloc_space.bytes`*::
+
--
Amount of memory allocated, in bytes, since the process started.


type: long

--


*`profile.inuse_objects.count`*::
+
--
Number of objects allocated and currently in use.


type: long

--


*`profile.inuse_space.bytes`*::
+
--
Amount of memory allocated, in bytes, and currently in use.


type: long

--

*`profile.duration`*::
+
--
Duration of the profile, in microseconds.


type: long

--


*`profile.top.id`*::
+
--
Unique ID for the top stack frame in the context of its callers.


type: keyword

--

*`profile.top.function`*::
+
--
Function name for the top stack frame.


type: keyword

--

*`profile.top.filename`*::
+
--
Source code filename for the top stack frame.


type: keyword

--

*`profile.top.line`*::
+
--
Source code line number for the top stack frame.


type: long

--


*`profile.stack.id`*::
+
--
Unique ID for a stack frame in the context of its callers.


type: keyword

--

*`profile.stack.function`*::
+
--
Function name for a stack frame.


type: keyword

--

*`profile.stack.filename`*::
+
--
Source code filename for a stack frame.


type: keyword

--

*`profile.stack.line`*::
+
--
Source code line number for a stack frame.


type: long

--

[[exported-fields-apm-sourcemap]]
== APM Sourcemap fields

Sourcemap files enriched with metadata



[float]
=== service

Service fields.



*`sourcemap.service.name`*::
+
--
The name of the service this sourcemap belongs to.


type: keyword

--

*`sourcemap.service.version`*::
+
--
Service version.


type: keyword

--

*`sourcemap.bundle_filepath`*::
+
--
Location of the sourcemap relative to the file requesting it.


type: keyword

--

[[exported-fields-apm-span]]
== APM Span fields

Span-specific data for APM.


*`view spans`*::
+
--
format: url

--


*`span.id`*::
+
--
The ID of the span stored as hex encoded string.


type: keyword

--

*`span.name`*::
+
--
Generic designation of a span in the scope of a transaction.


type: keyword

--

*`span.action`*::
+
--
The specific kind of event within the sub-type represented by the span (e.g. query, connect)


type: keyword

--


*`span.start.us`*::
+
--
Offset relative to the transaction's timestamp identifying the start of the span, in microseconds.


type: long

--


*`span.duration.us`*::
+
--
Duration of the span, in microseconds.


type: long

--

*`span.sync`*::
+
--
Indicates whether the span was executed synchronously or asynchronously.


type: boolean

--


*`span.db.link`*::
+
--
Database link.


type: keyword

--

*`span.db.rows_affected`*::
+
--
Number of rows affected by the database statement.


type: long

--


[float]
=== service

Destination service context


*`span.destination.service.type`*::
+
--
Type of the destination service (e.g. 'db', 'elasticsearch'). Should typically be the same as span.type.


type: keyword

--

*`span.destination.service.name`*::
+
--
Identifier for the destination service (e.g. 'http://elastic.co', 'elasticsearch', 'rabbitmq')


type: keyword

--

*`span.destination.service.resource`*::
+
--
Identifier for the destination service resource being operated on (e.g. 'http://elastic.co:80', 'elasticsearch', 'rabbitmq/queue_name')


type: keyword

--



*`span.message.queue.name`*::
+
--
Name of the message queue or topic where the message is published or received.


type: keyword

--


*`span.message.age.ms`*::
+
--
Age of a message in milliseconds.


type: long

--

[[exported-fields-apm-transaction]]
== APM Transaction fields

Transaction-specific data for APM



[float]
=== duration

None


*`transaction.duration.us`*::
+
--
Total duration of this transaction, in microseconds.


type: long

--

*`transaction.result`*::
+
--
The result of the transaction. HTTP status code for HTTP-related transactions.


type: keyword

--

*`transaction.marks`*::
+
--
A user-defined mapping of groups of marks in milliseconds.


type: object

--

*`transaction.marks.*.*`*::
+
--
type: object

--


*`transaction.span_count.dropped`*::
+
--
The total amount of dropped spans for this transaction.

type: long

--



*`transaction.message.queue.name`*::
+
--
Name of the message queue or topic where the message is published or received.


type: keyword

--


*`transaction.message.age.ms`*::
+
--
Age of a message in milliseconds.


type: long

--

[[exported-fields-system]]
== APM System Metrics fields

System status metrics, like CPU and memory usage, that are collected from the operating system.



[float]
=== system

`system` contains local system metrics.



[float]
=== cpu

`cpu` contains local CPU stats.



*`system.cpu.total.norm.pct`*::
+
--
The percentage of CPU time spent by the process since the last event. This value is normalized by the number of CPU cores and it ranges from 0 to 100%.


type: scaled_float

format: percent

--

[float]
=== memory

`memory` contains local memory stats.



*`system.memory.total`*::
+
--
Total memory.


type: long

format: bytes

--

[float]
=== actual

Actual memory used and free.



*`system.memory.actual.free`*::
+
--
Actual free memory in bytes. It is calculated based on the OS. On Linux it consists of the free memory plus caches and buffers. On OSX it is a sum of free memory and the inactive memory. On Windows, it is equal to `system.memory.free`.


type: long

format: bytes

--

[float]
=== process

`process` contains process metadata, CPU metrics, and memory metrics.



[float]
=== cpu

`cpu` contains local CPU stats.



*`system.process.cpu.total.norm.pct`*::
+
--
The percentage of CPU time spent by the process since the last event. This value is normalized by the number of CPU cores and it ranges from 0 to 100%.


type: scaled_float

format: percent

--

[float]
=== memory

Memory-specific statistics per process.


*`system.process.memory.size`*::
+
--
The total virtual memory the process has.


type: long

format: bytes

--

*`system.process.memory.rss.bytes`*::
+
--
The Resident Set Size. The amount of memory the process occupied in main memory (RAM).


type: long

format: bytes

--

