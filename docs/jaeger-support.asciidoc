[[jaeger]]
== Jaeger integration

experimental::["This feature is experimental and may be changed in a future release. It is not yet available on Elastic Cloud. For feature status on Elastic Cloud, see https://github.com/elastic/apm/issues/212[#212]."]

Elastic APM integrates with https://www.jaegertracing.io/[Jaeger], an open-source, distributed tracing system.
This integration allows users with an existing Jaeger setup to switch from the default Jaeger backend,
to ingesting data with Elastic's APM Server, storing data in {es}, and visualizing traces in the APM app.
Best of all, this can be done without any instrumentation changes in your application code.

[float]
[[jaeger-supported]]
=== Supported architecture

Jaeger architecture supports different data formats and transport protocols
that define how data can be sent to a collector. Elastic APM, as a Jaeger Collector, supports:

* Communication with *Jaeger Agents* via gRPC
+
The gRPC endpoint supports TLS. If the Jaeger gRPC collector service is enabled,
and `apm-server.ssl` is configured, SSL settings will automatically be applied to APM Server's Jaeger gRPC endpoint.

* Communication with *Jaeger Clients* via thrift over HTTP
+
The Client HTTP endpoint does not support TLS.

TIP: See the https://www.jaegertracing.io/docs/1.14/architecture[Jaeger docs]
for more information on Jaeger architecture.

[float]
[[jaeger-get-started]]
=== Get started

Connecting your preexisting Jaeger setup to Elastic APM is easy!
First, configure APM Server to receive Jaeger data,
then configure your Jaeger Agents or Jaeger Clients to start sending spans to APM Server.

[float]
[[jaeger-configure-apm-server]]
==== Configure APM Server

. Enable the correct jaeger endpoint in the `apm-server.yml` configuration file.
+
In a typical Jaeger deployment, Clients send spans to Agents, who forward them to Collectors.
If this matches your architecture, enable the gRPC endpoint by setting
`apm-server.jaeger.grpc.enabled` to `true`.
+
Alternatively, if you've configured your Clients to send spans directly to Collectors (bypassing Jaeger Agents),
enable the HTTP endpoint by setting `apm-server.jaeger.http.enabled` to `true`.

. Configure the host and port that APM Server listens on.
+
Based on the endpoint enabled in the previous step, configure the relevant host and port:
+
* `apm-server.jaeger.grpc.host` defaults to `localhost:14250`.
* `apm-server.jaeger.http.host` defaults to `localhost:14268`.

[float]
[[jaeger-configure-sampling]]
==== Configure Sampling

The gRPC endpoint supports probabilistic sampling, which can be used to reduce the amount of data that your agents collect and send.
Probabilistic sampling makes a random sampling decision based on the configured sampling value.
For example, a value of `.2` means that 20% of traces will be sampled.

APM Server automatically enables the sampling endpoint when `grpc.enabled` is set to `true`.
There are two different ways to configure the sampling rate of your Jaeger Agents:

* <<jaeger-configure-sampling-central,Centrally>>, with APM Agent configuration (default).
* <<jaeger-configure-sampling-local,Locally>>, in each Jaeger client.

[float]
[[jaeger-configure-sampling-central]]
===== Central sampling

Central sampling, with APM Agent configuration,
requires the <<setup-kibana-endpoint,Kibana endpoint>> to be enabled.
This allows Jaeger clients to poll APM Server for the sampling rate.
To enable the kibana endpoint, set <<kibana-enabled>> to `true`, and point <<kibana-host>> at the Kibana host that APM Server will communicate with.

The default sampling ratio, as well as per-service sampling rates,
can then be configured via the {kibana-ref}/agent-configuration.html[Agent configuration] page in the APM app.

WARNING: If a sampling rate smaller than `1.0` (100%) is configured,
transactions per minute will be incorrectly calculated in the APM app.
This is because Elastic APM data model is fundamentally different from the Jaeger data model.
In the Elastic ecosystem, sampling only impacts spans; transactions are always sampled at 100%.
The Jaeger data structure, however, does not have the concept of transactions.
Because of this, sampling decisions will apply to both transactions and spans.

[float]
[[jaeger-configure-sampling-local]]
===== Local sampling

If you don't have access to the APM app,
you'll need to change the Jaeger Client's `sampler.type` and `sampler.param`,
enabling you to set the sampling configuration locally in each Client.
See the official https://www.jaegertracing.io/docs/1.17/sampling/[Jaeger sampling documentation]
for more information.

[float]
[[jaeger-configure-grpc]]
==== Configure Jaeger Agent communication with APM Server (gRPC)

As of this writing, the Jaeger Agent binary offers the `--reporter.grpc.host-port` CLI flag,
which can be used to set a static list of collectors for the Jaeger Agent to connect to.
The `host:port` set here should correspond with the value set in `apm-server.jaeger.grpc.host`.

Jaeger Agent also offers the `--agent.tags` CLI flag, which can be used to pass Process tags
to the Collector. If APM Server has `apm-server.jaeger.grpc.auth_tag` set, it will look for a
Process tag of that name in incoming events, and use it for authorizing the Jaeger Agent against
the configured secret token or API Keys. The auth tag will not be removed from the events after
being verified.

See the https://www.jaegertracing.io/docs/1.16/cli/[Jaeger CLI flags documentation] for more information.

[float]
[[jaeger-configure-http]]
==== Configure Jaeger Client communication with APM Server (HTTP)

If you're using an officially supported Jaeger Client library and want to connect directly to APM Server,
you need to update the `JAEGER_ENDPOINT` configuration property.
This is the HTTP endpoint the Client will send spans to.
The `host:port` set here should correspond to the value set in `apm-server.jaeger.http.host`.

See the relevant supported Jaeger library for more information.

* https://github.com/jaegertracing/jaeger-client-go[Go]	
* https://github.com/jaegertracing/jaeger-client-java[Java]
* https://github.com/jaegertracing/jaeger-client-node[Node.js]
* https://github.com/jaegertracing/jaeger-client-python[Python]
* https://github.com/jaegertracing/jaeger-client-cpp[C++]
* https://github.com/jaegertracing/jaeger-client-csharp[C#]

[float]
[[jaeger-configure-start]]
==== Start sending span data

Data sent from Jaeger Agents or Clients to APM Server should now be visible in the APM app!

[float]
[[jaeger-caveats]]
=== Caveats

There are some limitations and differences between Elastic APM and Jaeger that you should be aware of.

*Jaeger integration limitations:*

* Because Jaeger has its own trace context header, and does not currently support W3C trace context headers,
it is not possible to mix and match the use of Elastic's APM Agents and Jaeger's Clients.
* Elastic APM only supports probabilistic sampling. Because of differences in the Jaeger and Elastic data structures, 
sampling at a value below `1.0` (100%), will cause inaccuracies in the APM app. See <<jaeger-configure-sampling>> for more information.
* We currently only support exception logging. Span logs are not supported.

*Differences between APM Agents and Jaeger Clients:*

* Jaeger Clients only sends trace data.
APM Agents support a larger number of features, like 
multiple types of metrics, and application breakdown charts.
When using Jaeger, features like this will not be available in the APM app.
* Elastic APM's {apm-overview-ref-v}/apm-data-model.html[data model] is different than Jaegers.
For Jaeger trace data to work with Elastic's data model, we rely on spans being tagged with the appropriate
https://github.com/opentracing/specification/blob/master/semantic_conventions.md[`span.kind`].
** Server Jaeger spans are mapped to Elastic APM {apm-overview-ref-v}/transactions.html[transactions].
** Client Jaeger spans are mapped to Elastic APM {apm-overview-ref-v}/transaction-spans.html[spans] -- unless the span is the root, in which case it is mapped to an Elastic APM {apm-overview-ref-v}/transactions.html[transaction].

[float]
[[jaeger-configuration]]
=== Configuration options

You can specify the following options in the `apm-server.jaeger.*` section of the
+{beatname_lc}.yml+ configuration file.

[float]
===== `grpc.enabled`
Set to true to enable the Jaeger gRPC collector service. Defaults to `false`.

[float]
===== `grpc.host`
Define the gRPC host and port the server is listening on.
Defaults to the standard Jaeger gRPC collector port `14250`.

[float]
===== `grpc.auth_tag`
Set to the name of the tag that should be used for authorizing Jaeger agents.
By default, authorization does not apply to Jaeger agents.

[float]
===== `http.enabled`
Set to true to enable the Jaeger HTTP collector endpoint. Defaults to `false`.

[float]
===== `http.host`
Define the HTTP host and port the server is listening on.
Defaults to the standard Jaeger HTTP collector port `14268`.
