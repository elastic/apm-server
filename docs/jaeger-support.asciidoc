[[jaeger]]
== Jaeger integration

++++
<titleabbrev>Integrate with Jaeger</titleabbrev>
++++

include::./jaeger-reference.asciidoc[tag=jaeger-intro]

[float]
[[jaeger-get-started]]
==== Get started

Connecting your preexisting Jaeger setup to Elastic APM is easy!
Configure APM Server to receive Jaeger data,
set up sampling, and configure your Jaeger Agents or Jaeger Clients to start sending spans to APM Server.

* <<jaeger-configure-apm-server>>
* <<jaeger-configure-sampling>>
* <<jaeger-configure-agent-client>>
* <<jaeger-configure-start>>

IMPORTANT: There are important <<jaeger-caveats>> to understand about this integration.

[float]
[[jaeger-configure-apm-server]]
==== Configure APM Server

. Enable the correct jaeger endpoint in the `apm-server.yml` configuration file.
+
In a typical Jaeger deployment, Clients send spans to Agents, who forward them to Collectors.
If this matches your architecture, enable the gRPC endpoint by setting
`apm-server.jaeger.grpc.enabled` to `true`.
+
Alternatively, if you've configured your Clients to send spans directly to Collectors (bypassing Jaeger Agents),
enable the HTTP endpoint by setting `apm-server.jaeger.http.enabled` to `true`.

. Configure the host and port that APM Server listens on.
+
Based on the endpoint enabled in the previous step, configure the relevant host and port:
+
* `apm-server.jaeger.grpc.host` defaults to `localhost:14250`.
* `apm-server.jaeger.http.host` defaults to `localhost:14268`.

[float]
[[jaeger-configure-sampling]]
==== Configure Sampling

The gRPC endpoint supports probabilistic sampling, which can be used to reduce the amount of data that your agents collect and send.
Probabilistic sampling makes a random sampling decision based on the configured sampling value.
For example, a value of `.2` means that 20% of traces will be sampled.

APM Server automatically enables the sampling endpoint when `grpc.enabled` is set to `true`.
There are two different ways to configure the sampling rate of your Jaeger Agents:

* <<jaeger-configure-sampling-central,Centrally>>, with APM Agent configuration (default).
* <<jaeger-configure-sampling-local,Locally>>, in each Jaeger client.

[float]
[[jaeger-configure-sampling-central]]
===== Central sampling

Central sampling, with APM Agent configuration,
requires the <<setup-kibana-endpoint,Kibana endpoint>> to be enabled.
This allows Jaeger clients to poll APM Server for the sampling rate.
To enable the kibana endpoint, set <<kibana-enabled>> to `true`, and point <<kibana-host>> at the Kibana host that APM Server will communicate with.

The default sampling ratio, as well as per-service sampling rates,
can then be configured via the {kibana-ref}/agent-configuration.html[Agent configuration] page in the APM app.

WARNING: If a sampling rate smaller than `1.0` (100%) is configured,
transactions per minute will be incorrectly calculated in the APM app.
This is because Elastic APM data model is fundamentally different from the Jaeger data model.
In the Elastic ecosystem, sampling only impacts spans; transactions are always sampled at 100%.
The Jaeger data structure, however, does not have the concept of transactions.
Because of this, sampling decisions will apply to both transactions and spans.

[float]
[[jaeger-configure-sampling-local]]
===== Local sampling

If you don't have access to the APM app,
you'll need to change the Jaeger Client's `sampler.type` and `sampler.param`,
enabling you to set the sampling configuration locally in each Client.
See the official https://www.jaegertracing.io/docs/1.17/sampling/[Jaeger sampling documentation]
for more information.

[float]
[[jaeger-configure-agent-client]]
==== Configure Jaeger communication

[float]
[[jaeger-configure-grpc]]
===== Jaeger Agent communication with APM Server (gRPC)

As of this writing, the Jaeger Agent binary offers the `--reporter.grpc.host-port` CLI flag,
which can be used to set a static list of collectors for the Jaeger Agent to connect to.
The `host:port` set here should correspond with the value set in `apm-server.jaeger.grpc.host`.

Jaeger Agent also offers the `--agent.tags` CLI flag, which can be used to pass Process tags
to the Collector. If APM Server has `apm-server.jaeger.grpc.auth_tag` set, it will look for a
Process tag of that name in incoming events, and use it for authorizing the Jaeger Agent against
the configured secret token or API Keys. The auth tag will be removed from the events after
being verified.

See the https://www.jaegertracing.io/docs/1.16/cli/[Jaeger CLI flags documentation] for more information.

[float]
[[jaeger-configure-http]]
===== Jaeger Client communication with APM Server (HTTP)

If you're using an officially supported Jaeger Client library and want to connect directly to APM Server,
you need to update the `JAEGER_ENDPOINT` configuration property.
This is the HTTP endpoint the Client will send spans to.
The `host:port` set here should correspond to the value set in `apm-server.jaeger.http.host`.

See the relevant supported Jaeger library for more information.

* https://github.com/jaegertracing/jaeger-client-go[Go]
* https://github.com/jaegertracing/jaeger-client-java[Java]
* https://github.com/jaegertracing/jaeger-client-node[Node.js]
* https://github.com/jaegertracing/jaeger-client-python[Python]
* https://github.com/jaegertracing/jaeger-client-cpp[C++]
* https://github.com/jaegertracing/jaeger-client-csharp[C#]

[float]
[[jaeger-configure-start]]
==== Start sending span data

Data sent from Jaeger Agents or Clients to APM Server should now be visible in the APM app!
