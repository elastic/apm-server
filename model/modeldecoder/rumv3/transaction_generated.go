// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by "modeldecoder/generator". DO NOT EDIT.

package rumv3

import (
	"fmt"

	"encoding/json"
	"unicode/utf8"
)

func (m *transactionRoot) IsSet() bool {
	return m.Transaction.IsSet()
}

func (m *transactionRoot) Reset() {
	m.Transaction.Reset()
}

func (m *transactionRoot) validate() error {
	if err := m.Transaction.validate(); err != nil {
		return err
	}
	if !m.Transaction.IsSet() {
		return fmt.Errorf("'x' required")
	}
	return nil
}

func (m *transaction) IsSet() bool {
	return m.Context.IsSet() || m.Duration.IsSet() || m.ID.IsSet() || len(m.Marks) > 0 || m.Name.IsSet() || m.Outcome.IsSet() || m.ParentID.IsSet() || m.Result.IsSet() || m.Sampled.IsSet() || m.SampleRate.IsSet() || m.SpanCount.IsSet() || m.TraceID.IsSet() || m.Type.IsSet() || m.UserExperience.IsSet()
}

func (m *transaction) Reset() {
	m.Context.Reset()
	m.Duration.Reset()
	m.ID.Reset()
	for k := range m.Marks {
		delete(m.Marks, k)
	}
	m.Name.Reset()
	m.Outcome.Reset()
	m.ParentID.Reset()
	m.Result.Reset()
	m.Sampled.Reset()
	m.SampleRate.Reset()
	m.SpanCount.Reset()
	m.TraceID.Reset()
	m.Type.Reset()
	m.UserExperience.Reset()
}

func (m *transaction) validate() error {
	if !m.IsSet() {
		return nil
	}
	if err := m.Context.validate(); err != nil {
		return err
	}
	if m.Duration.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'x.d'")
	}
	if !m.Duration.IsSet() {
		return fmt.Errorf("'x.d' required")
	}
	if utf8.RuneCountInString(m.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.id'")
	}
	if !m.ID.IsSet() {
		return fmt.Errorf("'x.id' required")
	}
	for k, v := range m.Marks {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'x.k'")
		}
		for innerK := range v {
			if innerK != "" && !regexpNoDotAsteriskQuote.MatchString(innerK) {
				return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'x.k'")
			}
		}
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.n'")
	}
	if m.Outcome.Val != "" {
		var matchEnum bool
		for _, s := range enumOutcome {
			if m.Outcome.Val == s {
				matchEnum = true
				break
			}
		}
		if !matchEnum {
			return fmt.Errorf("validation rule 'enum(enumOutcome)' violated for 'x.o'")
		}
	}
	if utf8.RuneCountInString(m.ParentID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.pid'")
	}
	if utf8.RuneCountInString(m.Result.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.rt'")
	}
	if err := m.SpanCount.validate(); err != nil {
		return err
	}
	if !m.SpanCount.IsSet() {
		return fmt.Errorf("'x.yc' required")
	}
	if utf8.RuneCountInString(m.TraceID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.tid'")
	}
	if !m.TraceID.IsSet() {
		return fmt.Errorf("'x.tid' required")
	}
	if utf8.RuneCountInString(m.Type.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.t'")
	}
	if !m.Type.IsSet() {
		return fmt.Errorf("'x.t' required")
	}
	if err := m.UserExperience.validate(); err != nil {
		return err
	}
	return nil
}

func (m *context) IsSet() bool {
	return len(m.Custom) > 0 || m.Page.IsSet() || m.Response.IsSet() || m.Request.IsSet() || m.Service.IsSet() || len(m.Tags) > 0 || m.User.IsSet()
}

func (m *context) Reset() {
	for k := range m.Custom {
		delete(m.Custom, k)
	}
	m.Page.Reset()
	m.Response.Reset()
	m.Request.Reset()
	m.Service.Reset()
	for k := range m.Tags {
		delete(m.Tags, k)
	}
	m.User.Reset()
}

func (m *context) validate() error {
	if !m.IsSet() {
		return nil
	}
	for k := range m.Custom {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'x.c.cu'")
		}
	}
	if err := m.Page.validate(); err != nil {
		return err
	}
	if err := m.Response.validate(); err != nil {
		return err
	}
	if err := m.Request.validate(); err != nil {
		return err
	}
	if err := m.Service.validate(); err != nil {
		return err
	}
	for k, v := range m.Tags {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'x.c.g'")
		}
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("validation rule 'maxVals(1024)' violated for 'x.c.g'")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("validation rule 'typesVals(string;bool;number)' violated for 'x.c.g' for key %s", k)
		}
	}
	if err := m.User.validate(); err != nil {
		return err
	}
	return nil
}

func (m *page) IsSet() bool {
	return m.URL.IsSet() || m.Referer.IsSet()
}

func (m *page) Reset() {
	m.URL.Reset()
	m.Referer.Reset()
}

func (m *page) validate() error {
	if !m.IsSet() {
		return nil
	}
	return nil
}

func (m *response) IsSet() bool {
	return m.DecodedBodySize.IsSet() || m.EncodedBodySize.IsSet() || m.Headers.IsSet() || m.StatusCode.IsSet() || m.TransferSize.IsSet()
}

func (m *response) Reset() {
	m.DecodedBodySize.Reset()
	m.EncodedBodySize.Reset()
	m.Headers.Reset()
	m.StatusCode.Reset()
	m.TransferSize.Reset()
}

func (m *response) validate() error {
	if !m.IsSet() {
		return nil
	}
	return nil
}

func (m *request) IsSet() bool {
	return m.Env.IsSet() || m.Headers.IsSet() || m.HTTPVersion.IsSet() || m.Method.IsSet()
}

func (m *request) Reset() {
	m.Env.Reset()
	m.Headers.Reset()
	m.HTTPVersion.Reset()
	m.Method.Reset()
}

func (m *request) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.HTTPVersion.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.q.hve'")
	}
	if utf8.RuneCountInString(m.Method.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.q.mt'")
	}
	if !m.Method.IsSet() {
		return fmt.Errorf("'x.c.q.mt' required")
	}
	return nil
}

func (m *service) IsSet() bool {
	return m.Agent.IsSet() || m.Environment.IsSet() || m.Framework.IsSet() || m.Language.IsSet() || m.Name.IsSet() || m.Runtime.IsSet() || m.Version.IsSet()
}

func (m *service) Reset() {
	m.Agent.Reset()
	m.Environment.Reset()
	m.Framework.Reset()
	m.Language.Reset()
	m.Name.Reset()
	m.Runtime.Reset()
	m.Version.Reset()
}

func (m *service) validate() error {
	if !m.IsSet() {
		return nil
	}
	if err := m.Agent.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(m.Environment.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.en'")
	}
	if err := m.Framework.validate(); err != nil {
		return err
	}
	if err := m.Language.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.n'")
	}
	if m.Name.Val != "" && !regexpAlphaNumericExt.MatchString(m.Name.Val) {
		return fmt.Errorf("validation rule 'pattern(regexpAlphaNumericExt)' violated for 'x.c.se.n'")
	}
	if err := m.Runtime.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.ve'")
	}
	return nil
}

func (m *serviceAgent) IsSet() bool {
	return m.Name.IsSet() || m.Version.IsSet()
}

func (m *serviceAgent) Reset() {
	m.Name.Reset()
	m.Version.Reset()
}

func (m *serviceAgent) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.a.n'")
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.a.ve'")
	}
	return nil
}

func (m *serviceFramework) IsSet() bool {
	return m.Name.IsSet() || m.Version.IsSet()
}

func (m *serviceFramework) Reset() {
	m.Name.Reset()
	m.Version.Reset()
}

func (m *serviceFramework) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.fw.n'")
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.fw.ve'")
	}
	return nil
}

func (m *serviceLanguage) IsSet() bool {
	return m.Name.IsSet() || m.Version.IsSet()
}

func (m *serviceLanguage) Reset() {
	m.Name.Reset()
	m.Version.Reset()
}

func (m *serviceLanguage) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.la.n'")
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.la.ve'")
	}
	return nil
}

func (m *serviceRuntime) IsSet() bool {
	return m.Name.IsSet() || m.Version.IsSet()
}

func (m *serviceRuntime) Reset() {
	m.Name.Reset()
	m.Version.Reset()
}

func (m *serviceRuntime) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.ru.n'")
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.se.ru.ve'")
	}
	return nil
}

func (m *user) IsSet() bool {
	return m.ID.IsSet() || m.Email.IsSet() || m.Name.IsSet()
}

func (m *user) Reset() {
	m.ID.Reset()
	m.Email.Reset()
	m.Name.Reset()
}

func (m *user) validate() error {
	if !m.IsSet() {
		return nil
	}
	switch t := m.ID.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.u.id'")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("validation rule 'types(string;int)' violated for 'x.c.u.id'")
		}
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;int)' violated for 'x.c.u.id'")
	}
	if utf8.RuneCountInString(m.Email.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.u.em'")
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'x.c.u.un'")
	}
	return nil
}

func (m *spanCount) IsSet() bool {
	return m.Dropped.IsSet() || m.Started.IsSet()
}

func (m *spanCount) Reset() {
	m.Dropped.Reset()
	m.Started.Reset()
}

func (m *spanCount) validate() error {
	if !m.IsSet() {
		return nil
	}
	if !m.Started.IsSet() {
		return fmt.Errorf("'x.yc.sd' required")
	}
	return nil
}

func (m *userExperience) IsSet() bool {
	return m.CumulativeLayoutShift.IsSet() || m.FirstInputDelay.IsSet() || m.TotalBlockingTime.IsSet()
}

func (m *userExperience) Reset() {
	m.CumulativeLayoutShift.Reset()
	m.FirstInputDelay.Reset()
	m.TotalBlockingTime.Reset()
}

func (m *userExperience) validate() error {
	if !m.IsSet() {
		return nil
	}
	if m.CumulativeLayoutShift.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'x.exp.cls'")
	}
	if m.FirstInputDelay.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'x.exp.fid'")
	}
	if m.TotalBlockingTime.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'x.exp.tbt'")
	}
	return nil
}
