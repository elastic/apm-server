// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by "modeldecoder/generator". DO NOT EDIT.

package rumv3

import (
	"fmt"

	"encoding/json"
	"unicode/utf8"
)

func (val *metadataRoot) IsSet() bool {
	return val.Metadata.IsSet()
}

func (val *metadataRoot) Reset() {
	val.Metadata.Reset()
}

func (val *metadataRoot) validate() error {
	if err := val.Metadata.validate(); err != nil {
		return err
	}
	if !val.Metadata.IsSet() {
		return fmt.Errorf("'m' required")
	}
	return nil
}

func (val *metadata) IsSet() bool {
	return len(val.Labels) > 0 || val.Service.IsSet() || val.User.IsSet()
}

func (val *metadata) Reset() {
	for k := range val.Labels {
		delete(val.Labels, k)
	}
	val.Service.Reset()
	val.User.Reset()
}

func (val *metadata) validate() error {
	if !val.IsSet() {
		return nil
	}
	for k, v := range val.Labels {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'm.l'")
		}
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("validation rule 'maxVals(1024)' violated for 'm.l'")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("validation rule 'typesVals(string;bool;number)' violated for 'm.l' for key %s", k)
		}
	}
	if err := val.Service.validate(); err != nil {
		return err
	}
	if !val.Service.IsSet() {
		return fmt.Errorf("'m.se' required")
	}
	if err := val.User.validate(); err != nil {
		return err
	}
	return nil
}

func (val *metadataService) IsSet() bool {
	return val.Agent.IsSet() || val.Environment.IsSet() || val.Framework.IsSet() || val.Language.IsSet() || val.Name.IsSet() || val.Runtime.IsSet() || val.Version.IsSet()
}

func (val *metadataService) Reset() {
	val.Agent.Reset()
	val.Environment.Reset()
	val.Framework.Reset()
	val.Language.Reset()
	val.Name.Reset()
	val.Runtime.Reset()
	val.Version.Reset()
}

func (val *metadataService) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Agent.validate(); err != nil {
		return err
	}
	if !val.Agent.IsSet() {
		return fmt.Errorf("'m.se.a' required")
	}
	if utf8.RuneCountInString(val.Environment.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.en'")
	}
	if err := val.Framework.validate(); err != nil {
		return err
	}
	if err := val.Language.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.n'")
	}
	if utf8.RuneCountInString(val.Name.Val) < 1 {
		return fmt.Errorf("validation rule 'min(1)' violated for 'm.se.n'")
	}
	if val.Name.Val != "" && !regexpAlphaNumericExt.MatchString(val.Name.Val) {
		return fmt.Errorf("validation rule 'pattern(regexpAlphaNumericExt)' violated for 'm.se.n'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'m.se.n' required")
	}
	if err := val.Runtime.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.ve'")
	}
	return nil
}

func (val *metadataServiceAgent) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceAgent) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceAgent) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.a.n'")
	}
	if utf8.RuneCountInString(val.Name.Val) < 1 {
		return fmt.Errorf("validation rule 'min(1)' violated for 'm.se.a.n'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'m.se.a.n' required")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.a.ve'")
	}
	if !val.Version.IsSet() {
		return fmt.Errorf("'m.se.a.ve' required")
	}
	return nil
}

func (val *MetadataServiceFramework) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *MetadataServiceFramework) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *MetadataServiceFramework) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.fw.n'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.fw.ve'")
	}
	return nil
}

func (val *metadataServiceLanguage) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceLanguage) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceLanguage) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.la.n'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'m.se.la.n' required")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.la.ve'")
	}
	return nil
}

func (val *metadataServiceRuntime) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceRuntime) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceRuntime) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.ru.n'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'m.se.ru.n' required")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.se.ru.ve'")
	}
	if !val.Version.IsSet() {
		return fmt.Errorf("'m.se.ru.ve' required")
	}
	return nil
}

func (val *metadataUser) IsSet() bool {
	return val.ID.IsSet() || val.Email.IsSet() || val.Name.IsSet()
}

func (val *metadataUser) Reset() {
	val.ID.Reset()
	val.Email.Reset()
	val.Name.Reset()
}

func (val *metadataUser) validate() error {
	if !val.IsSet() {
		return nil
	}
	switch t := val.ID.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("validation rule 'max(1024)' violated for 'm.u.id'")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("validation rule 'types(string;int)' violated for 'm.u.id'")
		}
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;int)' violated for 'm.u.id'")
	}
	if utf8.RuneCountInString(val.Email.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.u.em'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'm.u.un'")
	}
	return nil
}
