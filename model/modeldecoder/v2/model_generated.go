// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by "modeldecoder/generator". DO NOT EDIT.

package v2

import (
	"fmt"

	"encoding/json"
	"unicode/utf8"
)

func (val *metadataRoot) IsSet() bool {
	return val.Metadata.IsSet()
}

func (val *metadataRoot) Reset() {
	val.Metadata.Reset()
}

func (val *metadataRoot) validate() error {
	if err := val.Metadata.validate(); err != nil {
		return err
	}
	if !val.Metadata.IsSet() {
		return fmt.Errorf("'metadata' required")
	}
	return nil
}

func (val *metadata) IsSet() bool {
	return val.Cloud.IsSet() || len(val.Labels) > 0 || val.Process.IsSet() || val.Service.IsSet() || val.System.IsSet() || val.User.IsSet()
}

func (val *metadata) Reset() {
	val.Cloud.Reset()
	for k := range val.Labels {
		delete(val.Labels, k)
	}
	val.Process.Reset()
	val.Service.Reset()
	val.System.Reset()
	val.User.Reset()
}

func (val *metadata) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Cloud.validate(); err != nil {
		return err
	}
	for k, v := range val.Labels {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'metadata.labels'")
		}
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("validation rule 'maxVals(1024)' violated for 'metadata.labels'")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("validation rule 'typesVals(string;bool;number)' violated for 'metadata.labels' for key %s", k)
		}
	}
	if err := val.Process.validate(); err != nil {
		return err
	}
	if err := val.Service.validate(); err != nil {
		return err
	}
	if !val.Service.IsSet() {
		return fmt.Errorf("'metadata.service' required")
	}
	if err := val.System.validate(); err != nil {
		return err
	}
	if err := val.User.validate(); err != nil {
		return err
	}
	return nil
}

func (val *metadataCloud) IsSet() bool {
	return val.Account.IsSet() || val.AvailabilityZone.IsSet() || val.Instance.IsSet() || val.Machine.IsSet() || val.Project.IsSet() || val.Provider.IsSet() || val.Region.IsSet()
}

func (val *metadataCloud) Reset() {
	val.Account.Reset()
	val.AvailabilityZone.Reset()
	val.Instance.Reset()
	val.Machine.Reset()
	val.Project.Reset()
	val.Provider.Reset()
	val.Region.Reset()
}

func (val *metadataCloud) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Account.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.AvailabilityZone.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.availability_zone'")
	}
	if err := val.Instance.validate(); err != nil {
		return err
	}
	if err := val.Machine.validate(); err != nil {
		return err
	}
	if err := val.Project.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Provider.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.provider'")
	}
	if !val.Provider.IsSet() {
		return fmt.Errorf("'metadata.cloud.provider' required")
	}
	if utf8.RuneCountInString(val.Region.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.region'")
	}
	return nil
}

func (val *metadataCloudAccount) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet()
}

func (val *metadataCloudAccount) Reset() {
	val.ID.Reset()
	val.Name.Reset()
}

func (val *metadataCloudAccount) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.account.id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.account.name'")
	}
	return nil
}

func (val *metadataCloudInstance) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet()
}

func (val *metadataCloudInstance) Reset() {
	val.ID.Reset()
	val.Name.Reset()
}

func (val *metadataCloudInstance) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.instance.id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.instance.name'")
	}
	return nil
}

func (val *metadataCloudMachine) IsSet() bool {
	return val.Type.IsSet()
}

func (val *metadataCloudMachine) Reset() {
	val.Type.Reset()
}

func (val *metadataCloudMachine) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.machine.type'")
	}
	return nil
}

func (val *metadataCloudProject) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet()
}

func (val *metadataCloudProject) Reset() {
	val.ID.Reset()
	val.Name.Reset()
}

func (val *metadataCloudProject) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.project.id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.project.name'")
	}
	return nil
}

func (val *metadataProcess) IsSet() bool {
	return len(val.Argv) > 0 || val.Pid.IsSet() || val.Ppid.IsSet() || val.Title.IsSet()
}

func (val *metadataProcess) Reset() {
	val.Argv = val.Argv[:0]
	val.Pid.Reset()
	val.Ppid.Reset()
	val.Title.Reset()
}

func (val *metadataProcess) validate() error {
	if !val.IsSet() {
		return nil
	}
	if !val.Pid.IsSet() {
		return fmt.Errorf("'metadata.process.pid' required")
	}
	if utf8.RuneCountInString(val.Title.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.process.title'")
	}
	return nil
}

func (val *metadataService) IsSet() bool {
	return val.Agent.IsSet() || val.Environment.IsSet() || val.Framework.IsSet() || val.Language.IsSet() || val.Name.IsSet() || val.Node.IsSet() || val.Runtime.IsSet() || val.Version.IsSet()
}

func (val *metadataService) Reset() {
	val.Agent.Reset()
	val.Environment.Reset()
	val.Framework.Reset()
	val.Language.Reset()
	val.Name.Reset()
	val.Node.Reset()
	val.Runtime.Reset()
	val.Version.Reset()
}

func (val *metadataService) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Agent.validate(); err != nil {
		return err
	}
	if !val.Agent.IsSet() {
		return fmt.Errorf("'metadata.service.agent' required")
	}
	if utf8.RuneCountInString(val.Environment.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.environment'")
	}
	if err := val.Framework.validate(); err != nil {
		return err
	}
	if err := val.Language.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.name'")
	}
	if utf8.RuneCountInString(val.Name.Val) < 1 {
		return fmt.Errorf("validation rule 'min(1)' violated for 'metadata.service.name'")
	}
	if val.Name.Val != "" && !regexpAlphaNumericExt.MatchString(val.Name.Val) {
		return fmt.Errorf("validation rule 'pattern(regexpAlphaNumericExt)' violated for 'metadata.service.name'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'metadata.service.name' required")
	}
	if err := val.Node.validate(); err != nil {
		return err
	}
	if err := val.Runtime.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.version'")
	}
	return nil
}

func (val *metadataServiceAgent) IsSet() bool {
	return val.EphemeralID.IsSet() || val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceAgent) Reset() {
	val.EphemeralID.Reset()
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceAgent) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.EphemeralID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.agent.ephemeral_id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.agent.name'")
	}
	if utf8.RuneCountInString(val.Name.Val) < 1 {
		return fmt.Errorf("validation rule 'min(1)' violated for 'metadata.service.agent.name'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'metadata.service.agent.name' required")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.agent.version'")
	}
	if !val.Version.IsSet() {
		return fmt.Errorf("'metadata.service.agent.version' required")
	}
	return nil
}

func (val *metadataServiceFramework) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceFramework) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceFramework) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.framework.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.framework.version'")
	}
	return nil
}

func (val *metadataServiceLanguage) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceLanguage) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceLanguage) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.language.name'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'metadata.service.language.name' required")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.language.version'")
	}
	return nil
}

func (val *metadataServiceNode) IsSet() bool {
	return val.Name.IsSet()
}

func (val *metadataServiceNode) Reset() {
	val.Name.Reset()
}

func (val *metadataServiceNode) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.node.configured_name'")
	}
	return nil
}

func (val *metadataServiceRuntime) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceRuntime) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceRuntime) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.runtime.name'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'metadata.service.runtime.name' required")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.runtime.version'")
	}
	if !val.Version.IsSet() {
		return fmt.Errorf("'metadata.service.runtime.version' required")
	}
	return nil
}

func (val *metadataSystem) IsSet() bool {
	return val.Architecture.IsSet() || val.ConfiguredHostname.IsSet() || val.Container.IsSet() || val.DetectedHostname.IsSet() || val.HostnameDeprecated.IsSet() || val.Kubernetes.IsSet() || val.Platform.IsSet()
}

func (val *metadataSystem) Reset() {
	val.Architecture.Reset()
	val.ConfiguredHostname.Reset()
	val.Container.Reset()
	val.DetectedHostname.Reset()
	val.HostnameDeprecated.Reset()
	val.Kubernetes.Reset()
	val.Platform.Reset()
}

func (val *metadataSystem) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Architecture.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.architecture'")
	}
	if utf8.RuneCountInString(val.ConfiguredHostname.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.configured_hostname'")
	}
	if err := val.Container.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.DetectedHostname.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.detected_hostname'")
	}
	if utf8.RuneCountInString(val.HostnameDeprecated.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.hostname'")
	}
	if err := val.Kubernetes.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Platform.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.platform'")
	}
	return nil
}

func (val *metadataSystemContainer) IsSet() bool {
	return val.ID.IsSet()
}

func (val *metadataSystemContainer) Reset() {
	val.ID.Reset()
}

func (val *metadataSystemContainer) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *metadataSystemKubernetes) IsSet() bool {
	return val.Namespace.IsSet() || val.Node.IsSet() || val.Pod.IsSet()
}

func (val *metadataSystemKubernetes) Reset() {
	val.Namespace.Reset()
	val.Node.Reset()
	val.Pod.Reset()
}

func (val *metadataSystemKubernetes) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Namespace.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.namespace'")
	}
	if err := val.Node.validate(); err != nil {
		return err
	}
	if err := val.Pod.validate(); err != nil {
		return err
	}
	return nil
}

func (val *metadataSystemKubernetesNode) IsSet() bool {
	return val.Name.IsSet()
}

func (val *metadataSystemKubernetesNode) Reset() {
	val.Name.Reset()
}

func (val *metadataSystemKubernetesNode) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.node.name'")
	}
	return nil
}

func (val *metadataSystemKubernetesPod) IsSet() bool {
	return val.Name.IsSet() || val.UID.IsSet()
}

func (val *metadataSystemKubernetesPod) Reset() {
	val.Name.Reset()
	val.UID.Reset()
}

func (val *metadataSystemKubernetesPod) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.pod.name'")
	}
	if utf8.RuneCountInString(val.UID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.pod.uid'")
	}
	return nil
}

func (val *user) IsSet() bool {
	return val.ID.IsSet() || val.Email.IsSet() || val.Name.IsSet()
}

func (val *user) Reset() {
	val.ID.Reset()
	val.Email.Reset()
	val.Name.Reset()
}

func (val *user) validate() error {
	if !val.IsSet() {
		return nil
	}
	switch t := val.ID.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.user.id'")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("validation rule 'types(string;int)' violated for 'metadata.user.id'")
		}
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;int)' violated for 'metadata.user.id'")
	}
	if utf8.RuneCountInString(val.Email.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.user.email'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.user.username'")
	}
	return nil
}

func (val *transactionRoot) IsSet() bool {
	return val.Transaction.IsSet()
}

func (val *transactionRoot) Reset() {
	val.Transaction.Reset()
}

func (val *transactionRoot) validate() error {
	if err := val.Transaction.validate(); err != nil {
		return err
	}
	if !val.Transaction.IsSet() {
		return fmt.Errorf("'transaction' required")
	}
	return nil
}

func (val *transaction) IsSet() bool {
	return val.Context.IsSet() || val.Duration.IsSet() || val.ID.IsSet() || val.Marks.IsSet() || val.Name.IsSet() || val.Outcome.IsSet() || val.ParentID.IsSet() || val.Result.IsSet() || val.Sampled.IsSet() || val.SampleRate.IsSet() || val.SpanCount.IsSet() || val.Timestamp.IsSet() || val.TraceID.IsSet() || val.Type.IsSet() || val.UserExperience.IsSet() || val.Experimental.IsSet()
}

func (val *transaction) Reset() {
	val.Context.Reset()
	val.Duration.Reset()
	val.ID.Reset()
	val.Marks.Reset()
	val.Name.Reset()
	val.Outcome.Reset()
	val.ParentID.Reset()
	val.Result.Reset()
	val.Sampled.Reset()
	val.SampleRate.Reset()
	val.SpanCount.Reset()
	val.Timestamp.Reset()
	val.TraceID.Reset()
	val.Type.Reset()
	val.UserExperience.Reset()
	val.Experimental.Reset()
}

func (val *transaction) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Context.validate(); err != nil {
		return err
	}
	if val.Duration.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.duration'")
	}
	if !val.Duration.IsSet() {
		return fmt.Errorf("'transaction.duration' required")
	}
	if utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.id'")
	}
	if !val.ID.IsSet() {
		return fmt.Errorf("'transaction.id' required")
	}
	if err := val.Marks.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.name'")
	}
	if val.Outcome.Val != "" {
		var matchEnum bool
		for _, s := range enumOutcome {
			if val.Outcome.Val == s {
				matchEnum = true
				break
			}
		}
		if !matchEnum {
			return fmt.Errorf("validation rule 'enum(enumOutcome)' violated for 'transaction.outcome'")
		}
	}
	if utf8.RuneCountInString(val.ParentID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.parent_id'")
	}
	if utf8.RuneCountInString(val.Result.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.result'")
	}
	if err := val.SpanCount.validate(); err != nil {
		return err
	}
	if !val.SpanCount.IsSet() {
		return fmt.Errorf("'transaction.span_count' required")
	}
	if utf8.RuneCountInString(val.TraceID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.trace_id'")
	}
	if !val.TraceID.IsSet() {
		return fmt.Errorf("'transaction.trace_id' required")
	}
	if utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.type'")
	}
	if !val.Type.IsSet() {
		return fmt.Errorf("'transaction.type' required")
	}
	if err := val.UserExperience.validate(); err != nil {
		return err
	}
	return nil
}

func (val *context) IsSet() bool {
	return len(val.Custom) > 0 || val.Message.IsSet() || val.Page.IsSet() || val.Response.IsSet() || val.Request.IsSet() || val.Service.IsSet() || len(val.Tags) > 0 || val.User.IsSet()
}

func (val *context) Reset() {
	for k := range val.Custom {
		delete(val.Custom, k)
	}
	val.Message.Reset()
	val.Page.Reset()
	val.Response.Reset()
	val.Request.Reset()
	val.Service.Reset()
	for k := range val.Tags {
		delete(val.Tags, k)
	}
	val.User.Reset()
}

func (val *context) validate() error {
	if !val.IsSet() {
		return nil
	}
	for k := range val.Custom {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'transaction.context.custom'")
		}
	}
	if err := val.Message.validate(); err != nil {
		return err
	}
	if err := val.Page.validate(); err != nil {
		return err
	}
	if err := val.Response.validate(); err != nil {
		return err
	}
	if err := val.Request.validate(); err != nil {
		return err
	}
	if err := val.Service.validate(); err != nil {
		return err
	}
	for k, v := range val.Tags {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'transaction.context.tags'")
		}
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("validation rule 'maxVals(1024)' violated for 'transaction.context.tags'")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("validation rule 'typesVals(string;bool;number)' violated for 'transaction.context.tags' for key %s", k)
		}
	}
	if err := val.User.validate(); err != nil {
		return err
	}
	return nil
}

func (val *contextMessage) IsSet() bool {
	return val.Body.IsSet() || val.Headers.IsSet() || val.Age.IsSet() || val.Queue.IsSet()
}

func (val *contextMessage) Reset() {
	val.Body.Reset()
	val.Headers.Reset()
	val.Age.Reset()
	val.Queue.Reset()
}

func (val *contextMessage) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Age.validate(); err != nil {
		return err
	}
	if err := val.Queue.validate(); err != nil {
		return err
	}
	return nil
}

func (val *contextMessageAge) IsSet() bool {
	return val.Milliseconds.IsSet()
}

func (val *contextMessageAge) Reset() {
	val.Milliseconds.Reset()
}

func (val *contextMessageAge) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextMessageQueue) IsSet() bool {
	return val.Name.IsSet()
}

func (val *contextMessageQueue) Reset() {
	val.Name.Reset()
}

func (val *contextMessageQueue) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.message.queue.name'")
	}
	return nil
}

func (val *contextPage) IsSet() bool {
	return val.URL.IsSet() || val.Referer.IsSet()
}

func (val *contextPage) Reset() {
	val.URL.Reset()
	val.Referer.Reset()
}

func (val *contextPage) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextResponse) IsSet() bool {
	return val.DecodedBodySize.IsSet() || val.EncodedBodySize.IsSet() || val.Finished.IsSet() || val.Headers.IsSet() || val.HeadersSent.IsSet() || val.StatusCode.IsSet() || val.TransferSize.IsSet()
}

func (val *contextResponse) Reset() {
	val.DecodedBodySize.Reset()
	val.EncodedBodySize.Reset()
	val.Finished.Reset()
	val.Headers.Reset()
	val.HeadersSent.Reset()
	val.StatusCode.Reset()
	val.TransferSize.Reset()
}

func (val *contextResponse) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextRequest) IsSet() bool {
	return val.Cookies.IsSet() || val.Body.IsSet() || val.Env.IsSet() || val.Headers.IsSet() || val.HTTPVersion.IsSet() || val.Method.IsSet() || val.Socket.IsSet() || val.URL.IsSet()
}

func (val *contextRequest) Reset() {
	val.Cookies.Reset()
	val.Body.Reset()
	val.Env.Reset()
	val.Headers.Reset()
	val.HTTPVersion.Reset()
	val.Method.Reset()
	val.Socket.Reset()
	val.URL.Reset()
}

func (val *contextRequest) validate() error {
	if !val.IsSet() {
		return nil
	}
	switch val.Body.Val.(type) {
	case string:
	case map[string]interface{}:
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;map[string]interface)' violated for 'transaction.context.request.body'")
	}
	if utf8.RuneCountInString(val.HTTPVersion.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.http_version'")
	}
	if utf8.RuneCountInString(val.Method.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.method'")
	}
	if !val.Method.IsSet() {
		return fmt.Errorf("'transaction.context.request.method' required")
	}
	if err := val.Socket.validate(); err != nil {
		return err
	}
	if err := val.URL.validate(); err != nil {
		return err
	}
	return nil
}

func (val *contextRequestSocket) IsSet() bool {
	return val.RemoteAddress.IsSet() || val.Encrypted.IsSet()
}

func (val *contextRequestSocket) Reset() {
	val.RemoteAddress.Reset()
	val.Encrypted.Reset()
}

func (val *contextRequestSocket) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextRequestURL) IsSet() bool {
	return val.Full.IsSet() || val.Hash.IsSet() || val.Hostname.IsSet() || val.Path.IsSet() || val.Port.IsSet() || val.Protocol.IsSet() || val.Raw.IsSet() || val.Search.IsSet()
}

func (val *contextRequestURL) Reset() {
	val.Full.Reset()
	val.Hash.Reset()
	val.Hostname.Reset()
	val.Path.Reset()
	val.Port.Reset()
	val.Protocol.Reset()
	val.Raw.Reset()
	val.Search.Reset()
}

func (val *contextRequestURL) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Full.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.full'")
	}
	if utf8.RuneCountInString(val.Hash.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.hash'")
	}
	if utf8.RuneCountInString(val.Hostname.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.hostname'")
	}
	if utf8.RuneCountInString(val.Path.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.pathname'")
	}
	switch t := val.Port.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.port'")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("validation rule 'types(string;int)' violated for 'transaction.context.request.url.port'")
		}
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;int)' violated for 'transaction.context.request.url.port'")
	}
	if utf8.RuneCountInString(val.Protocol.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.protocol'")
	}
	if utf8.RuneCountInString(val.Raw.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.raw'")
	}
	if utf8.RuneCountInString(val.Search.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.search'")
	}
	return nil
}

func (val *contextService) IsSet() bool {
	return val.Agent.IsSet() || val.Environment.IsSet() || val.Framework.IsSet() || val.Language.IsSet() || val.Name.IsSet() || val.Node.IsSet() || val.Runtime.IsSet() || val.Version.IsSet()
}

func (val *contextService) Reset() {
	val.Agent.Reset()
	val.Environment.Reset()
	val.Framework.Reset()
	val.Language.Reset()
	val.Name.Reset()
	val.Node.Reset()
	val.Runtime.Reset()
	val.Version.Reset()
}

func (val *contextService) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Agent.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Environment.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.environment'")
	}
	if err := val.Framework.validate(); err != nil {
		return err
	}
	if err := val.Language.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.name'")
	}
	if val.Name.Val != "" && !regexpAlphaNumericExt.MatchString(val.Name.Val) {
		return fmt.Errorf("validation rule 'pattern(regexpAlphaNumericExt)' violated for 'transaction.context.service.name'")
	}
	if err := val.Node.validate(); err != nil {
		return err
	}
	if err := val.Runtime.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.version'")
	}
	return nil
}

func (val *contextServiceAgent) IsSet() bool {
	return val.EphemeralID.IsSet() || val.Name.IsSet() || val.Version.IsSet()
}

func (val *contextServiceAgent) Reset() {
	val.EphemeralID.Reset()
	val.Name.Reset()
	val.Version.Reset()
}

func (val *contextServiceAgent) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.EphemeralID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.agent.ephemeral_id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.agent.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.agent.version'")
	}
	return nil
}

func (val *contextServiceFramework) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *contextServiceFramework) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *contextServiceFramework) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.framework.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.framework.version'")
	}
	return nil
}

func (val *contextServiceLanguage) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *contextServiceLanguage) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *contextServiceLanguage) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.language.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.language.version'")
	}
	return nil
}

func (val *contextServiceNode) IsSet() bool {
	return val.Name.IsSet()
}

func (val *contextServiceNode) Reset() {
	val.Name.Reset()
}

func (val *contextServiceNode) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.node.configured_name'")
	}
	return nil
}

func (val *contextServiceRuntime) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *contextServiceRuntime) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *contextServiceRuntime) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.runtime.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.runtime.version'")
	}
	return nil
}

func (val *transactionMarks) IsSet() bool {
	return len(val.Events) > 0
}

func (val *transactionMarks) Reset() {
	for k := range val.Events {
		delete(val.Events, k)
	}
}

func (val *transactionMarks) validate() error {
	if !val.IsSet() {
		return nil
	}
	for k, v := range val.Events {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'transaction.marks.events'")
		}
		if err := v.validate(); err != nil {
			return err
		}
	}
	return nil
}

func (val *transactionMarkEvents) IsSet() bool {
	return len(val.Measurements) > 0
}

func (val *transactionMarkEvents) Reset() {
	for k := range val.Measurements {
		delete(val.Measurements, k)
	}
}

func (val *transactionMarkEvents) validate() error {
	if !val.IsSet() {
		return nil
	}
	for k := range val.Measurements {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'transaction.marks.events.measurements'")
		}
	}
	return nil
}

func (val *transactionSpanCount) IsSet() bool {
	return val.Dropped.IsSet() || val.Started.IsSet()
}

func (val *transactionSpanCount) Reset() {
	val.Dropped.Reset()
	val.Started.Reset()
}

func (val *transactionSpanCount) validate() error {
	if !val.IsSet() {
		return nil
	}
	if !val.Started.IsSet() {
		return fmt.Errorf("'transaction.span_count.started' required")
	}
	return nil
}

func (val *transactionUserExperience) IsSet() bool {
	return val.CumulativeLayoutShift.IsSet() || val.FirstInputDelay.IsSet() || val.TotalBlockingTime.IsSet() || val.Longtask.IsSet()
}

func (val *transactionUserExperience) Reset() {
	val.CumulativeLayoutShift.Reset()
	val.FirstInputDelay.Reset()
	val.TotalBlockingTime.Reset()
	val.Longtask.Reset()
}

func (val *transactionUserExperience) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.CumulativeLayoutShift.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.experience.cls'")
	}
	if val.FirstInputDelay.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.experience.fid'")
	}
	if val.TotalBlockingTime.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.experience.tbt'")
	}
	if err := val.Longtask.validate(); err != nil {
		return err
	}
	return nil
}

func (val *longtaskMetrics) IsSet() bool {
	return val.Count.IsSet() || val.Sum.IsSet() || val.Max.IsSet()
}

func (val *longtaskMetrics) Reset() {
	val.Count.Reset()
	val.Sum.Reset()
	val.Max.Reset()
}

func (val *longtaskMetrics) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Count.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.experience.longtask.count'")
	}
	if !val.Count.IsSet() {
		return fmt.Errorf("'transaction.experience.longtask.count' required")
	}
	if val.Sum.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.experience.longtask.sum'")
	}
	if !val.Sum.IsSet() {
		return fmt.Errorf("'transaction.experience.longtask.sum' required")
	}
	if val.Max.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.experience.longtask.max'")
	}
	if !val.Max.IsSet() {
		return fmt.Errorf("'transaction.experience.longtask.max' required")
	}
	return nil
}
