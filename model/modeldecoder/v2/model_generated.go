// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by "modeldecoder/generator". DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"
)

func (m *metadataRoot) IsSet() bool {
	return m.Metadata.IsSet()
}

func (m *metadataRoot) Reset() {
	m.Metadata.Reset()
}

func (m *metadataRoot) validate() error {
	if err := m.Metadata.validate(); err != nil {
		return err
	}
	if !m.Metadata.IsSet() {
		return fmt.Errorf("'metadata' required")
	}
	return nil
}

func (m *metadata) IsSet() bool {
	return m.Cloud.IsSet() || len(m.Labels) > 0 || m.Process.IsSet() || m.Service.IsSet() || m.System.IsSet() || m.User.IsSet()
}

func (m *metadata) Reset() {
	m.Cloud.Reset()
	for k := range m.Labels {
		delete(m.Labels, k)
	}
	m.Process.Reset()
	m.Service.Reset()
	m.System.Reset()
	m.User.Reset()
}

func (m *metadata) validate() error {
	if !m.IsSet() {
		return nil
	}
	if err := m.Cloud.validate(); err != nil {
		return err
	}
	for k, v := range m.Labels {
		if !labelsRegex.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(labelsRegex)' violated for 'metadata.labels'")
		}
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("validation rule 'maxVals(1024)' violated for 'metadata.labels'")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("validation rule 'typesVals(string;bool;number)' violated for 'metadata.labels' for key %s", k)
		}
	}
	if err := m.Process.validate(); err != nil {
		return err
	}
	if err := m.Service.validate(); err != nil {
		return err
	}
	if !m.Service.IsSet() {
		return fmt.Errorf("'metadata.service' required")
	}
	if err := m.System.validate(); err != nil {
		return err
	}
	if err := m.User.validate(); err != nil {
		return err
	}
	return nil
}

func (m *metadataCloud) IsSet() bool {
	return m.Account.IsSet() || m.AvailabilityZone.IsSet() || m.Instance.IsSet() || m.Machine.IsSet() || m.Project.IsSet() || m.Provider.IsSet() || m.Region.IsSet()
}

func (m *metadataCloud) Reset() {
	m.Account.Reset()
	m.AvailabilityZone.Reset()
	m.Instance.Reset()
	m.Machine.Reset()
	m.Project.Reset()
	m.Provider.Reset()
	m.Region.Reset()
}

func (m *metadataCloud) validate() error {
	if !m.IsSet() {
		return nil
	}
	if err := m.Account.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(m.AvailabilityZone.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.availability_zone'")
	}
	if err := m.Instance.validate(); err != nil {
		return err
	}
	if err := m.Machine.validate(); err != nil {
		return err
	}
	if err := m.Project.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(m.Provider.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.provider'")
	}
	if !m.Provider.IsSet() {
		return fmt.Errorf("'metadata.cloud.provider' required")
	}
	if utf8.RuneCountInString(m.Region.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.region'")
	}
	return nil
}

func (m *metadataCloudAccount) IsSet() bool {
	return m.ID.IsSet() || m.Name.IsSet()
}

func (m *metadataCloudAccount) Reset() {
	m.ID.Reset()
	m.Name.Reset()
}

func (m *metadataCloudAccount) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.account.id'")
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.account.name'")
	}
	return nil
}

func (m *metadataCloudInstance) IsSet() bool {
	return m.ID.IsSet() || m.Name.IsSet()
}

func (m *metadataCloudInstance) Reset() {
	m.ID.Reset()
	m.Name.Reset()
}

func (m *metadataCloudInstance) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.instance.id'")
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.instance.name'")
	}
	return nil
}

func (m *metadataCloudMachine) IsSet() bool {
	return m.Type.IsSet()
}

func (m *metadataCloudMachine) Reset() {
	m.Type.Reset()
}

func (m *metadataCloudMachine) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Type.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.machine.type'")
	}
	return nil
}

func (m *metadataCloudProject) IsSet() bool {
	return m.ID.IsSet() || m.Name.IsSet()
}

func (m *metadataCloudProject) Reset() {
	m.ID.Reset()
	m.Name.Reset()
}

func (m *metadataCloudProject) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.project.id'")
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.project.name'")
	}
	return nil
}

func (m *metadataProcess) IsSet() bool {
	return len(m.Argv) > 0 || m.Pid.IsSet() || m.Ppid.IsSet() || m.Title.IsSet()
}

func (m *metadataProcess) Reset() {
	m.Argv = m.Argv[:0]
	m.Pid.Reset()
	m.Ppid.Reset()
	m.Title.Reset()
}

func (m *metadataProcess) validate() error {
	if !m.IsSet() {
		return nil
	}
	if !m.Pid.IsSet() {
		return fmt.Errorf("'metadata.process.pid' required")
	}
	if utf8.RuneCountInString(m.Title.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.process.title'")
	}
	return nil
}

func (m *metadataService) IsSet() bool {
	return m.Agent.IsSet() || m.Environment.IsSet() || m.Framework.IsSet() || m.Language.IsSet() || m.Name.IsSet() || m.Node.IsSet() || m.Runtime.IsSet() || m.Version.IsSet()
}

func (m *metadataService) Reset() {
	m.Agent.Reset()
	m.Environment.Reset()
	m.Framework.Reset()
	m.Language.Reset()
	m.Name.Reset()
	m.Node.Reset()
	m.Runtime.Reset()
	m.Version.Reset()
}

func (m *metadataService) validate() error {
	if !m.IsSet() {
		return nil
	}
	if err := m.Agent.validate(); err != nil {
		return err
	}
	if !m.Agent.IsSet() {
		return fmt.Errorf("'metadata.service.agent' required")
	}
	if utf8.RuneCountInString(m.Environment.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.environment'")
	}
	if err := m.Framework.validate(); err != nil {
		return err
	}
	if err := m.Language.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.name'")
	}
	if !alphaNumericExtRegex.MatchString(m.Name.Val) {
		return fmt.Errorf("validation rule 'pattern(alphaNumericExtRegex)' violated for 'metadata.service.name'")
	}
	if !m.Name.IsSet() {
		return fmt.Errorf("'metadata.service.name' required")
	}
	if err := m.Node.validate(); err != nil {
		return err
	}
	if err := m.Runtime.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.version'")
	}
	return nil
}

func (m *metadataServiceAgent) IsSet() bool {
	return m.EphemeralID.IsSet() || m.Name.IsSet() || m.Version.IsSet()
}

func (m *metadataServiceAgent) Reset() {
	m.EphemeralID.Reset()
	m.Name.Reset()
	m.Version.Reset()
}

func (m *metadataServiceAgent) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.EphemeralID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.agent.ephemeral_id'")
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.agent.name'")
	}
	if !m.Name.IsSet() {
		return fmt.Errorf("'metadata.service.agent.name' required")
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.agent.version'")
	}
	if !m.Version.IsSet() {
		return fmt.Errorf("'metadata.service.agent.version' required")
	}
	return nil
}

func (m *metadataServiceFramework) IsSet() bool {
	return m.Name.IsSet() || m.Version.IsSet()
}

func (m *metadataServiceFramework) Reset() {
	m.Name.Reset()
	m.Version.Reset()
}

func (m *metadataServiceFramework) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.framework.name'")
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.framework.version'")
	}
	return nil
}

func (m *metadataServiceLanguage) IsSet() bool {
	return m.Name.IsSet() || m.Version.IsSet()
}

func (m *metadataServiceLanguage) Reset() {
	m.Name.Reset()
	m.Version.Reset()
}

func (m *metadataServiceLanguage) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.language.name'")
	}
	if !m.Name.IsSet() {
		return fmt.Errorf("'metadata.service.language.name' required")
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.language.version'")
	}
	return nil
}

func (m *metadataServiceNode) IsSet() bool {
	return m.Name.IsSet()
}

func (m *metadataServiceNode) Reset() {
	m.Name.Reset()
}

func (m *metadataServiceNode) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.node.configured_name'")
	}
	return nil
}

func (m *metadataServiceRuntime) IsSet() bool {
	return m.Name.IsSet() || m.Version.IsSet()
}

func (m *metadataServiceRuntime) Reset() {
	m.Name.Reset()
	m.Version.Reset()
}

func (m *metadataServiceRuntime) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.runtime.name'")
	}
	if !m.Name.IsSet() {
		return fmt.Errorf("'metadata.service.runtime.name' required")
	}
	if utf8.RuneCountInString(m.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.runtime.version'")
	}
	if !m.Version.IsSet() {
		return fmt.Errorf("'metadata.service.runtime.version' required")
	}
	return nil
}

func (m *metadataSystem) IsSet() bool {
	return m.Architecture.IsSet() || m.ConfiguredHostname.IsSet() || m.Container.IsSet() || m.DetectedHostname.IsSet() || m.HostnameDeprecated.IsSet() || m.Kubernetes.IsSet() || m.Platform.IsSet()
}

func (m *metadataSystem) Reset() {
	m.Architecture.Reset()
	m.ConfiguredHostname.Reset()
	m.Container.Reset()
	m.DetectedHostname.Reset()
	m.HostnameDeprecated.Reset()
	m.Kubernetes.Reset()
	m.Platform.Reset()
}

func (m *metadataSystem) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Architecture.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.architecture'")
	}
	if utf8.RuneCountInString(m.ConfiguredHostname.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.configured_hostname'")
	}
	if err := m.Container.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(m.DetectedHostname.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.detected_hostname'")
	}
	if utf8.RuneCountInString(m.HostnameDeprecated.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.hostname'")
	}
	if err := m.Kubernetes.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(m.Platform.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.platform'")
	}
	return nil
}

func (m *metadataSystemContainer) IsSet() bool {
	return m.ID.IsSet()
}

func (m *metadataSystemContainer) Reset() {
	m.ID.Reset()
}

func (m *metadataSystemContainer) validate() error {
	if !m.IsSet() {
		return nil
	}
	return nil
}

func (m *metadataSystemKubernetes) IsSet() bool {
	return m.Namespace.IsSet() || m.Node.IsSet() || m.Pod.IsSet()
}

func (m *metadataSystemKubernetes) Reset() {
	m.Namespace.Reset()
	m.Node.Reset()
	m.Pod.Reset()
}

func (m *metadataSystemKubernetes) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Namespace.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.namespace'")
	}
	if err := m.Node.validate(); err != nil {
		return err
	}
	if err := m.Pod.validate(); err != nil {
		return err
	}
	return nil
}

func (m *metadataSystemKubernetesNode) IsSet() bool {
	return m.Name.IsSet()
}

func (m *metadataSystemKubernetesNode) Reset() {
	m.Name.Reset()
}

func (m *metadataSystemKubernetesNode) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.node.name'")
	}
	return nil
}

func (m *metadataSystemKubernetesPod) IsSet() bool {
	return m.Name.IsSet() || m.UID.IsSet()
}

func (m *metadataSystemKubernetesPod) Reset() {
	m.Name.Reset()
	m.UID.Reset()
}

func (m *metadataSystemKubernetesPod) validate() error {
	if !m.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.pod.name'")
	}
	if utf8.RuneCountInString(m.UID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.pod.uid'")
	}
	return nil
}

func (m *metadataUser) IsSet() bool {
	return m.ID.IsSet() || m.Email.IsSet() || m.Name.IsSet()
}

func (m *metadataUser) Reset() {
	m.ID.Reset()
	m.Email.Reset()
	m.Name.Reset()
}

func (m *metadataUser) validate() error {
	if !m.IsSet() {
		return nil
	}
	switch t := m.ID.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.user.id'")
		}
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("validation rule 'types(string;int)' violated for 'metadata.user.id'")
		}
	case int:
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;int)' violated for 'metadata.user.id'")
	}
	if utf8.RuneCountInString(m.Email.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.user.email'")
	}
	if utf8.RuneCountInString(m.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.user.username'")
	}
	return nil
}
