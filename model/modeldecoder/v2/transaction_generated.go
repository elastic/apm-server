// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by "modeldecoder/generator". DO NOT EDIT.

package v2

import (
	"fmt"

	"encoding/json"
	"unicode/utf8"
)

func (val *transactionRoot) IsSet() bool {
	return val.Transaction.IsSet()
}

func (val *transactionRoot) Reset() {
	val.Transaction.Reset()
}

func (val *transactionRoot) validate() error {
	if err := val.Transaction.validate(); err != nil {
		return err
	}
	if !val.Transaction.IsSet() {
		return fmt.Errorf("'transaction' required")
	}
	return nil
}

func (val *transaction) IsSet() bool {
	return val.Context.IsSet() || val.Duration.IsSet() || val.ID.IsSet() || len(val.Marks) > 0 || val.Name.IsSet() || val.Outcome.IsSet() || val.ParentID.IsSet() || val.Result.IsSet() || val.Sampled.IsSet() || val.SampleRate.IsSet() || val.SpanCount.IsSet() || val.Timestamp.IsSet() || val.TraceID.IsSet() || val.Type.IsSet() || val.UserExperience.IsSet() || val.Experimental.IsSet()
}

func (val *transaction) Reset() {
	val.Context.Reset()
	val.Duration.Reset()
	val.ID.Reset()
	for k := range val.Marks {
		delete(val.Marks, k)
	}
	val.Name.Reset()
	val.Outcome.Reset()
	val.ParentID.Reset()
	val.Result.Reset()
	val.Sampled.Reset()
	val.SampleRate.Reset()
	val.SpanCount.Reset()
	val.Timestamp.Reset()
	val.TraceID.Reset()
	val.Type.Reset()
	val.UserExperience.Reset()
	val.Experimental.Reset()
}

func (val *transaction) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Context.validate(); err != nil {
		return err
	}
	if val.Duration.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.duration'")
	}
	if !val.Duration.IsSet() {
		return fmt.Errorf("'transaction.duration' required")
	}
	if utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.id'")
	}
	if !val.ID.IsSet() {
		return fmt.Errorf("'transaction.id' required")
	}
	for k, v := range val.Marks {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'transaction.marks'")
		}
		for innerK := range v {
			if innerK != "" && !regexpNoDotAsteriskQuote.MatchString(innerK) {
				return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'transaction.marks'")
			}
		}
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.name'")
	}
	if val.Outcome.Val != "" {
		var matchEnum bool
		for _, s := range enumOutcome {
			if val.Outcome.Val == s {
				matchEnum = true
				break
			}
		}
		if !matchEnum {
			return fmt.Errorf("validation rule 'enum(enumOutcome)' violated for 'transaction.outcome'")
		}
	}
	if utf8.RuneCountInString(val.ParentID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.parent_id'")
	}
	if utf8.RuneCountInString(val.Result.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.result'")
	}
	if err := val.SpanCount.validate(); err != nil {
		return err
	}
	if !val.SpanCount.IsSet() {
		return fmt.Errorf("'transaction.span_count' required")
	}
	if utf8.RuneCountInString(val.TraceID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.trace_id'")
	}
	if !val.TraceID.IsSet() {
		return fmt.Errorf("'transaction.trace_id' required")
	}
	if utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.type'")
	}
	if !val.Type.IsSet() {
		return fmt.Errorf("'transaction.type' required")
	}
	if err := val.UserExperience.validate(); err != nil {
		return err
	}
	return nil
}

func (val *context) IsSet() bool {
	return len(val.Custom) > 0 || val.Message.IsSet() || val.Page.IsSet() || val.Response.IsSet() || val.Request.IsSet() || val.Service.IsSet() || len(val.Tags) > 0 || val.User.IsSet()
}

func (val *context) Reset() {
	for k := range val.Custom {
		delete(val.Custom, k)
	}
	val.Message.Reset()
	val.Page.Reset()
	val.Response.Reset()
	val.Request.Reset()
	val.Service.Reset()
	for k := range val.Tags {
		delete(val.Tags, k)
	}
	val.User.Reset()
}

func (val *context) validate() error {
	if !val.IsSet() {
		return nil
	}
	for k := range val.Custom {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'transaction.context.custom'")
		}
	}
	if err := val.Message.validate(); err != nil {
		return err
	}
	if err := val.Page.validate(); err != nil {
		return err
	}
	if err := val.Response.validate(); err != nil {
		return err
	}
	if err := val.Request.validate(); err != nil {
		return err
	}
	if err := val.Service.validate(); err != nil {
		return err
	}
	for k, v := range val.Tags {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'transaction.context.tags'")
		}
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("validation rule 'maxVals(1024)' violated for 'transaction.context.tags'")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("validation rule 'typesVals(string;bool;number)' violated for 'transaction.context.tags' for key %s", k)
		}
	}
	if err := val.User.validate(); err != nil {
		return err
	}
	return nil
}

func (val *message) IsSet() bool {
	return val.Body.IsSet() || val.Headers.IsSet() || val.Age.IsSet() || val.Queue.IsSet()
}

func (val *message) Reset() {
	val.Body.Reset()
	val.Headers.Reset()
	val.Age.Reset()
	val.Queue.Reset()
}

func (val *message) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Age.validate(); err != nil {
		return err
	}
	if err := val.Queue.validate(); err != nil {
		return err
	}
	return nil
}

func (val *age) IsSet() bool {
	return val.Milliseconds.IsSet()
}

func (val *age) Reset() {
	val.Milliseconds.Reset()
}

func (val *age) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *queue) IsSet() bool {
	return val.Name.IsSet()
}

func (val *queue) Reset() {
	val.Name.Reset()
}

func (val *queue) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.message.queue.name'")
	}
	return nil
}

func (val *page) IsSet() bool {
	return val.URL.IsSet() || val.Referer.IsSet()
}

func (val *page) Reset() {
	val.URL.Reset()
	val.Referer.Reset()
}

func (val *page) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *response) IsSet() bool {
	return val.DecodedBodySize.IsSet() || val.EncodedBodySize.IsSet() || val.Finished.IsSet() || val.Headers.IsSet() || val.HeadersSent.IsSet() || val.StatusCode.IsSet() || val.TransferSize.IsSet()
}

func (val *response) Reset() {
	val.DecodedBodySize.Reset()
	val.EncodedBodySize.Reset()
	val.Finished.Reset()
	val.Headers.Reset()
	val.HeadersSent.Reset()
	val.StatusCode.Reset()
	val.TransferSize.Reset()
}

func (val *response) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *request) IsSet() bool {
	return val.Cookies.IsSet() || val.Body.IsSet() || val.Env.IsSet() || val.Headers.IsSet() || val.HTTPVersion.IsSet() || val.Method.IsSet() || val.Socket.IsSet() || val.URL.IsSet()
}

func (val *request) Reset() {
	val.Cookies.Reset()
	val.Body.Reset()
	val.Env.Reset()
	val.Headers.Reset()
	val.HTTPVersion.Reset()
	val.Method.Reset()
	val.Socket.Reset()
	val.URL.Reset()
}

func (val *request) validate() error {
	if !val.IsSet() {
		return nil
	}
	switch val.Body.Val.(type) {
	case string:
	case map[string]interface{}:
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;map[string]interface)' violated for 'transaction.context.request.body'")
	}
	if utf8.RuneCountInString(val.HTTPVersion.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.http_version'")
	}
	if utf8.RuneCountInString(val.Method.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.method'")
	}
	if !val.Method.IsSet() {
		return fmt.Errorf("'transaction.context.request.method' required")
	}
	if err := val.Socket.validate(); err != nil {
		return err
	}
	if err := val.URL.validate(); err != nil {
		return err
	}
	return nil
}

func (val *socket) IsSet() bool {
	return val.RemoteAddress.IsSet() || val.Encrypted.IsSet()
}

func (val *socket) Reset() {
	val.RemoteAddress.Reset()
	val.Encrypted.Reset()
}

func (val *socket) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *url) IsSet() bool {
	return val.Full.IsSet() || val.Hash.IsSet() || val.Hostname.IsSet() || val.Path.IsSet() || val.Port.IsSet() || val.Protocol.IsSet() || val.Raw.IsSet() || val.Search.IsSet()
}

func (val *url) Reset() {
	val.Full.Reset()
	val.Hash.Reset()
	val.Hostname.Reset()
	val.Path.Reset()
	val.Port.Reset()
	val.Protocol.Reset()
	val.Raw.Reset()
	val.Search.Reset()
}

func (val *url) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Full.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.full'")
	}
	if utf8.RuneCountInString(val.Hash.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.hash'")
	}
	if utf8.RuneCountInString(val.Hostname.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.hostname'")
	}
	if utf8.RuneCountInString(val.Path.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.pathname'")
	}
	switch t := val.Port.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.port'")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("validation rule 'types(string;int)' violated for 'transaction.context.request.url.port'")
		}
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;int)' violated for 'transaction.context.request.url.port'")
	}
	if utf8.RuneCountInString(val.Protocol.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.protocol'")
	}
	if utf8.RuneCountInString(val.Raw.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.raw'")
	}
	if utf8.RuneCountInString(val.Search.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.request.url.search'")
	}
	return nil
}

func (val *service) IsSet() bool {
	return val.Agent.IsSet() || val.Environment.IsSet() || val.Framework.IsSet() || val.Language.IsSet() || val.Name.IsSet() || val.Node.IsSet() || val.Runtime.IsSet() || val.Version.IsSet()
}

func (val *service) Reset() {
	val.Agent.Reset()
	val.Environment.Reset()
	val.Framework.Reset()
	val.Language.Reset()
	val.Name.Reset()
	val.Node.Reset()
	val.Runtime.Reset()
	val.Version.Reset()
}

func (val *service) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Agent.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Environment.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.environment'")
	}
	if err := val.Framework.validate(); err != nil {
		return err
	}
	if err := val.Language.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.name'")
	}
	if val.Name.Val != "" && !regexpAlphaNumericExt.MatchString(val.Name.Val) {
		return fmt.Errorf("validation rule 'pattern(regexpAlphaNumericExt)' violated for 'transaction.context.service.name'")
	}
	if err := val.Node.validate(); err != nil {
		return err
	}
	if err := val.Runtime.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.version'")
	}
	return nil
}

func (val *serviceAgent) IsSet() bool {
	return val.EphemeralID.IsSet() || val.Name.IsSet() || val.Version.IsSet()
}

func (val *serviceAgent) Reset() {
	val.EphemeralID.Reset()
	val.Name.Reset()
	val.Version.Reset()
}

func (val *serviceAgent) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.EphemeralID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.agent.ephemeral_id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.agent.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.agent.version'")
	}
	return nil
}

func (val *serviceFramework) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *serviceFramework) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *serviceFramework) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.framework.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.framework.version'")
	}
	return nil
}

func (val *serviceLanguage) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *serviceLanguage) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *serviceLanguage) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.language.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.language.version'")
	}
	return nil
}

func (val *serviceNode) IsSet() bool {
	return val.Name.IsSet()
}

func (val *serviceNode) Reset() {
	val.Name.Reset()
}

func (val *serviceNode) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.node.configured_name'")
	}
	return nil
}

func (val *serviceRuntime) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *serviceRuntime) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *serviceRuntime) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.runtime.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.service.runtime.version'")
	}
	return nil
}

func (val *user) IsSet() bool {
	return val.ID.IsSet() || val.Email.IsSet() || val.Name.IsSet()
}

func (val *user) Reset() {
	val.ID.Reset()
	val.Email.Reset()
	val.Name.Reset()
}

func (val *user) validate() error {
	if !val.IsSet() {
		return nil
	}
	switch t := val.ID.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.user.id'")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("validation rule 'types(string;int)' violated for 'transaction.context.user.id'")
		}
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;int)' violated for 'transaction.context.user.id'")
	}
	if utf8.RuneCountInString(val.Email.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.user.email'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'transaction.context.user.username'")
	}
	return nil
}

func (val *spanCount) IsSet() bool {
	return val.Dropped.IsSet() || val.Started.IsSet()
}

func (val *spanCount) Reset() {
	val.Dropped.Reset()
	val.Started.Reset()
}

func (val *spanCount) validate() error {
	if !val.IsSet() {
		return nil
	}
	if !val.Started.IsSet() {
		return fmt.Errorf("'transaction.span_count.started' required")
	}
	return nil
}

func (val *userExperience) IsSet() bool {
	return val.CumulativeLayoutShift.IsSet() || val.FirstInputDelay.IsSet() || val.TotalBlockingTime.IsSet()
}

func (val *userExperience) Reset() {
	val.CumulativeLayoutShift.Reset()
	val.FirstInputDelay.Reset()
	val.TotalBlockingTime.Reset()
}

func (val *userExperience) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.CumulativeLayoutShift.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.experience.cls'")
	}
	if val.FirstInputDelay.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.experience.fid'")
	}
	if val.TotalBlockingTime.Val < 0 {
		return fmt.Errorf("validation rule 'min(0)' violated for 'transaction.experience.tbt'")
	}
	return nil
}
