// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by "modeldecoder/generator". DO NOT EDIT.

package v2

import (
	"fmt"

	"encoding/json"
	"unicode/utf8"
)

func (val *metadataRoot) IsSet() bool {
	return val.Metadata.IsSet()
}

func (val *metadataRoot) Reset() {
	val.Metadata.Reset()
}

func (val *metadataRoot) validate() error {
	if err := val.Metadata.validate(); err != nil {
		return err
	}
	if !val.Metadata.IsSet() {
		return fmt.Errorf("'metadata' required")
	}
	return nil
}

func (val *metadata) IsSet() bool {
	return val.Cloud.IsSet() || len(val.Labels) > 0 || val.Process.IsSet() || val.Service.IsSet() || val.System.IsSet() || val.User.IsSet()
}

func (val *metadata) Reset() {
	val.Cloud.Reset()
	for k := range val.Labels {
		delete(val.Labels, k)
	}
	val.Process.Reset()
	val.Service.Reset()
	val.System.Reset()
	val.User.Reset()
}

func (val *metadata) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Cloud.validate(); err != nil {
		return err
	}
	for k, v := range val.Labels {
		if k != "" && !regexpNoDotAsteriskQuote.MatchString(k) {
			return fmt.Errorf("validation rule 'patternKeys(regexpNoDotAsteriskQuote)' violated for 'metadata.labels'")
		}
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("validation rule 'maxVals(1024)' violated for 'metadata.labels'")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("validation rule 'typesVals(string;bool;number)' violated for 'metadata.labels' for key %s", k)
		}
	}
	if err := val.Process.validate(); err != nil {
		return err
	}
	if err := val.Service.validate(); err != nil {
		return err
	}
	if !val.Service.IsSet() {
		return fmt.Errorf("'metadata.service' required")
	}
	if err := val.System.validate(); err != nil {
		return err
	}
	if err := val.User.validate(); err != nil {
		return err
	}
	return nil
}

func (val *metadataCloud) IsSet() bool {
	return val.Account.IsSet() || val.AvailabilityZone.IsSet() || val.Instance.IsSet() || val.Machine.IsSet() || val.Project.IsSet() || val.Provider.IsSet() || val.Region.IsSet()
}

func (val *metadataCloud) Reset() {
	val.Account.Reset()
	val.AvailabilityZone.Reset()
	val.Instance.Reset()
	val.Machine.Reset()
	val.Project.Reset()
	val.Provider.Reset()
	val.Region.Reset()
}

func (val *metadataCloud) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Account.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.AvailabilityZone.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.availability_zone'")
	}
	if err := val.Instance.validate(); err != nil {
		return err
	}
	if err := val.Machine.validate(); err != nil {
		return err
	}
	if err := val.Project.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Provider.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.provider'")
	}
	if !val.Provider.IsSet() {
		return fmt.Errorf("'metadata.cloud.provider' required")
	}
	if utf8.RuneCountInString(val.Region.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.region'")
	}
	return nil
}

func (val *metadataCloudAccount) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet()
}

func (val *metadataCloudAccount) Reset() {
	val.ID.Reset()
	val.Name.Reset()
}

func (val *metadataCloudAccount) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.account.id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.account.name'")
	}
	return nil
}

func (val *metadataCloudInstance) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet()
}

func (val *metadataCloudInstance) Reset() {
	val.ID.Reset()
	val.Name.Reset()
}

func (val *metadataCloudInstance) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.instance.id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.instance.name'")
	}
	return nil
}

func (val *metadataCloudMachine) IsSet() bool {
	return val.Type.IsSet()
}

func (val *metadataCloudMachine) Reset() {
	val.Type.Reset()
}

func (val *metadataCloudMachine) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.machine.type'")
	}
	return nil
}

func (val *metadataCloudProject) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet()
}

func (val *metadataCloudProject) Reset() {
	val.ID.Reset()
	val.Name.Reset()
}

func (val *metadataCloudProject) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.project.id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.cloud.project.name'")
	}
	return nil
}

func (val *metadataProcess) IsSet() bool {
	return len(val.Argv) > 0 || val.Pid.IsSet() || val.Ppid.IsSet() || val.Title.IsSet()
}

func (val *metadataProcess) Reset() {
	val.Argv = val.Argv[:0]
	val.Pid.Reset()
	val.Ppid.Reset()
	val.Title.Reset()
}

func (val *metadataProcess) validate() error {
	if !val.IsSet() {
		return nil
	}
	if !val.Pid.IsSet() {
		return fmt.Errorf("'metadata.process.pid' required")
	}
	if utf8.RuneCountInString(val.Title.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.process.title'")
	}
	return nil
}

func (val *metadataService) IsSet() bool {
	return val.Agent.IsSet() || val.Environment.IsSet() || val.Framework.IsSet() || val.Language.IsSet() || val.Name.IsSet() || val.Node.IsSet() || val.Runtime.IsSet() || val.Version.IsSet()
}

func (val *metadataService) Reset() {
	val.Agent.Reset()
	val.Environment.Reset()
	val.Framework.Reset()
	val.Language.Reset()
	val.Name.Reset()
	val.Node.Reset()
	val.Runtime.Reset()
	val.Version.Reset()
}

func (val *metadataService) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Agent.validate(); err != nil {
		return err
	}
	if !val.Agent.IsSet() {
		return fmt.Errorf("'metadata.service.agent' required")
	}
	if utf8.RuneCountInString(val.Environment.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.environment'")
	}
	if err := val.Framework.validate(); err != nil {
		return err
	}
	if err := val.Language.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.name'")
	}
	if utf8.RuneCountInString(val.Name.Val) < 1 {
		return fmt.Errorf("validation rule 'min(1)' violated for 'metadata.service.name'")
	}
	if val.Name.Val != "" && !regexpAlphaNumericExt.MatchString(val.Name.Val) {
		return fmt.Errorf("validation rule 'pattern(regexpAlphaNumericExt)' violated for 'metadata.service.name'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'metadata.service.name' required")
	}
	if err := val.Node.validate(); err != nil {
		return err
	}
	if err := val.Runtime.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.version'")
	}
	return nil
}

func (val *metadataServiceAgent) IsSet() bool {
	return val.EphemeralID.IsSet() || val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceAgent) Reset() {
	val.EphemeralID.Reset()
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceAgent) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.EphemeralID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.agent.ephemeral_id'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.agent.name'")
	}
	if utf8.RuneCountInString(val.Name.Val) < 1 {
		return fmt.Errorf("validation rule 'min(1)' violated for 'metadata.service.agent.name'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'metadata.service.agent.name' required")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.agent.version'")
	}
	if !val.Version.IsSet() {
		return fmt.Errorf("'metadata.service.agent.version' required")
	}
	return nil
}

func (val *metadataServiceFramework) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceFramework) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceFramework) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.framework.name'")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.framework.version'")
	}
	return nil
}

func (val *metadataServiceLanguage) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceLanguage) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceLanguage) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.language.name'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'metadata.service.language.name' required")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.language.version'")
	}
	return nil
}

func (val *metadataServiceNode) IsSet() bool {
	return val.Name.IsSet()
}

func (val *metadataServiceNode) Reset() {
	val.Name.Reset()
}

func (val *metadataServiceNode) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.node.configured_name'")
	}
	return nil
}

func (val *metadataServiceRuntime) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceRuntime) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceRuntime) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.runtime.name'")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'metadata.service.runtime.name' required")
	}
	if utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.service.runtime.version'")
	}
	if !val.Version.IsSet() {
		return fmt.Errorf("'metadata.service.runtime.version' required")
	}
	return nil
}

func (val *metadataSystem) IsSet() bool {
	return val.Architecture.IsSet() || val.ConfiguredHostname.IsSet() || val.Container.IsSet() || val.DetectedHostname.IsSet() || val.HostnameDeprecated.IsSet() || val.Kubernetes.IsSet() || val.Platform.IsSet()
}

func (val *metadataSystem) Reset() {
	val.Architecture.Reset()
	val.ConfiguredHostname.Reset()
	val.Container.Reset()
	val.DetectedHostname.Reset()
	val.HostnameDeprecated.Reset()
	val.Kubernetes.Reset()
	val.Platform.Reset()
}

func (val *metadataSystem) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Architecture.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.architecture'")
	}
	if utf8.RuneCountInString(val.ConfiguredHostname.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.configured_hostname'")
	}
	if err := val.Container.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.DetectedHostname.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.detected_hostname'")
	}
	if utf8.RuneCountInString(val.HostnameDeprecated.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.hostname'")
	}
	if err := val.Kubernetes.validate(); err != nil {
		return err
	}
	if utf8.RuneCountInString(val.Platform.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.platform'")
	}
	return nil
}

func (val *metadataSystemContainer) IsSet() bool {
	return val.ID.IsSet()
}

func (val *metadataSystemContainer) Reset() {
	val.ID.Reset()
}

func (val *metadataSystemContainer) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *metadataSystemKubernetes) IsSet() bool {
	return val.Namespace.IsSet() || val.Node.IsSet() || val.Pod.IsSet()
}

func (val *metadataSystemKubernetes) Reset() {
	val.Namespace.Reset()
	val.Node.Reset()
	val.Pod.Reset()
}

func (val *metadataSystemKubernetes) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Namespace.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.namespace'")
	}
	if err := val.Node.validate(); err != nil {
		return err
	}
	if err := val.Pod.validate(); err != nil {
		return err
	}
	return nil
}

func (val *metadataSystemKubernetesNode) IsSet() bool {
	return val.Name.IsSet()
}

func (val *metadataSystemKubernetesNode) Reset() {
	val.Name.Reset()
}

func (val *metadataSystemKubernetesNode) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.node.name'")
	}
	return nil
}

func (val *metadataSystemKubernetesPod) IsSet() bool {
	return val.Name.IsSet() || val.UID.IsSet()
}

func (val *metadataSystemKubernetesPod) Reset() {
	val.Name.Reset()
	val.UID.Reset()
}

func (val *metadataSystemKubernetesPod) validate() error {
	if !val.IsSet() {
		return nil
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.pod.name'")
	}
	if utf8.RuneCountInString(val.UID.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.system.kubernetes.pod.uid'")
	}
	return nil
}

func (val *metadataUser) IsSet() bool {
	return val.ID.IsSet() || val.Email.IsSet() || val.Name.IsSet()
}

func (val *metadataUser) Reset() {
	val.ID.Reset()
	val.Email.Reset()
	val.Name.Reset()
}

func (val *metadataUser) validate() error {
	if !val.IsSet() {
		return nil
	}
	switch t := val.ID.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.user.id'")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("validation rule 'types(string;int)' violated for 'metadata.user.id'")
		}
	case nil:
	default:
		return fmt.Errorf("validation rule 'types(string;int)' violated for 'metadata.user.id'")
	}
	if utf8.RuneCountInString(val.Email.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.user.email'")
	}
	if utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("validation rule 'max(1024)' violated for 'metadata.user.username'")
	}
	return nil
}
