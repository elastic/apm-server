#!/usr/bin/env groovy
@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'apm-server'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    JOB_GCS_CREDENTIALS = 'apm-ci-gcs-plugin'
    DIAGNOSTIC_INTERVAL = "${params.DIAGNOSTIC_INTERVAL}"
    ES_LOG_LEVEL = "${params.ES_LOG_LEVEL}"
    DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    DOCKER_REGISTRY = 'docker.elastic.co'
  }
  options {
    timeout(time: 2, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '100', artifactNumToKeepStr: '30', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("(${obltGitHubComments()}|^run\\W+(?:the\\W+)?(package)\\W+tests|^/test|^^/package)")
  }
  parameters {
    booleanParam(name: 'Run_As_Main_Branch', defaultValue: false, description: 'Allow to run any steps on a PR, some steps normally only run on main branch.')
    booleanParam(name: 'test_ci', defaultValue: true, description: 'Enable test')
    booleanParam(name: 'test_sys_env_ci', defaultValue: true, description: 'Enable system and environment test')
    booleanParam(name: 'bench_ci', defaultValue: true, description: 'Enable benchmarks')
    booleanParam(name: 'release_ci', defaultValue: true, description: 'Enable build the release packages')
    string(name: 'ES_LOG_LEVEL', defaultValue: "error", description: 'Elasticsearch error level')
  }
  stages {
    // Checkout the code and stash it, to use it on other stages.
    stage('Checkout') {
      environment {
        PATH = "${env.PATH}:${env.WORKSPACE}/bin"
        HOME = "${env.WORKSPACE}"
      }
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true,
                    shallow: false, reference: "/var/lib/jenkins/.git-references/${REPO}.git")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        script {
          dir("${BASE_DIR}"){
            withGoEnv(){
              setEnvVar('APM_SERVER_VERSION', sh(label: 'Get beat version', script: 'make get-version', returnStdout: true)?.trim())
            }
            env.PACKAGING_UPDATED = isGitRegionMatch(patterns: ["^packaging.*"])
            // Skip all the stages except docs for PR's with asciidoc changes only
            setEnvVar('ONLY_DOCS', isPR() ? isGitRegionMatch(patterns: [ '.*\\.asciidoc' ], shouldMatchAll: true) : false)
          }
        }
      }
    }

    // Run unit tests, benchmarks, and packaging in parallel.
    stage('Build and test') {
      failFast false
      parallel {
        stage('Unit tests - linux/amd64') {
          agent { label 'linux && immutable' }
          options { skipDefaultCheckout() }
          environment {
            PATH = "${env.PATH}:${env.WORKSPACE}/bin"
            HOME = "${env.WORKSPACE}"
          }
          when {
            beforeAgent true
            allOf {
              expression { return params.test_ci }
              expression { return env.ONLY_DOCS == "false" }
            }
          }
          steps {
            withGithubNotify(context: 'Unit tests - linux/amd64', tab: 'tests') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                withGoEnv(){
                  sh(label: 'Run Unit tests', script: './.ci/scripts/unit-test.sh')
                }
              }
            }
          }
          post {
            always {
              dir("${BASE_DIR}/build"){
                publishHTML(target: [
                  allowMissing: true,
                  keepAll: true,
                  reportDir: ".",
                  reportFiles: 'TEST-*.html',
                  reportName: 'Coverage-Sourcecode-Files',
                  reportTitles: 'Coverage'])
                cobertura(autoUpdateHealth: false,
                  autoUpdateStability: false,
                  coberturaReportFile: "TEST-*_cov.xml",
                  conditionalCoverageTargets: '70, 0, 0',
                  failNoReports: false,
                  failUnhealthy: false,
                  failUnstable: false,
                  lineCoverageTargets: '80, 0, 0',
                  maxNumberOfBuilds: 0,
                  methodCoverageTargets: '80, 0, 0',
                  onlyStable: false,
                  sourceEncoding: 'ASCII',
                  zoomCoverageChart: false)
                junit(allowEmptyResults: true,
                  keepLongStdio: true,
                  testResults: "TEST-*.xml")
              }
            }
          }
        }

        // Run the microbenchmarks for the current commit, send them to the benchmarks
        // Elasticsearch cluster, and compare with the benchmark results from the most
        // recent branch build.
        stage('Benchmarking') {
          agent { label 'microbenchmarks-pool' }
          options { skipDefaultCheckout() }
          when {
            beforeAgent true
            allOf {
              expression { return params.bench_ci }
              expression { return env.ONLY_DOCS == "false" }
            }
          }
          steps {
            withGithubNotify(context: 'Benchmarking') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                withGoEnv(){
                  sh(label: 'Run benchmarks', script: './.ci/scripts/bench.sh')
                }
                sendBenchmarks(file: "bench.out", index: "benchmark-server")
                generateGoBenchmarkDiff(file: 'bench.out', filter: 'exclude')
              }
            }
          }
          post {
            cleanup {
              deleteDir()
            }
          }
        }

        // Run the packaging pipeline for a PR, when requested.
        stage('Downstream - Package - PR') {
          options { skipDefaultCheckout() }
          when {
            beforeAgent true
            allOf {
              expression { return params.release_ci }
              expression { return env.ONLY_DOCS == "false" }
              changeRequest()
              anyOf {
                expression { return env.PACKAGING_UPDATED != "false" }
                expression { return env.GITHUB_COMMENT?.contains('package tests') || env.GITHUB_COMMENT?.contains('/package')}
                expression { return params.Run_As_Main_Branch }
              }
            }
          }
          steps {
            build(job: "apm-server/apm-server-package-mbp/${env.JOB_BASE_NAME}",
                  propagate: false,
                  wait: false,
                  parameters: [string(name: 'COMMIT', value: "${env.GIT_BASE_COMMIT}")])
          }
        }
      }
    }

    // Run the packaging pipeline for branch builds. This should only be run
    // after all other stages succeed, to avoid publishing packages for a commit
    // with failing tests.
    stage('Downstream - Package') {
      options { skipDefaultCheckout() }
      when {
        not { changeRequest() }
      }
      steps {
        build(job: "apm-server/apm-server-package-mbp/${env.JOB_BASE_NAME}",
              propagate: false,
              wait: false,
              parameters: [string(name: 'COMMIT', value: "${env.GIT_BASE_COMMIT}")])
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(goBenchmarkComment: true)
    }
  }
}
