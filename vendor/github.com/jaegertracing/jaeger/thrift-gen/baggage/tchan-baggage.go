// @generated Code generated by thrift-gen. Do not modify.

// Package baggage is generated code used to make or handle TChannel calls using Thrift.
package baggage

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

// TChanBaggageRestrictionManager is the interface that defines the server handler and client interface.
type TChanBaggageRestrictionManager interface {
	GetBaggageRestrictions(ctx thrift.Context, serviceName string) ([]*BaggageRestriction, error)
}

// Implementation of a client and service handler.

type tchanBaggageRestrictionManagerClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanBaggageRestrictionManagerInheritedClient(thriftService string, client thrift.TChanClient) *tchanBaggageRestrictionManagerClient {
	return &tchanBaggageRestrictionManagerClient{
		thriftService,
		client,
	}
}

// NewTChanBaggageRestrictionManagerClient creates a client that can be used to make remote calls.
func NewTChanBaggageRestrictionManagerClient(client thrift.TChanClient) TChanBaggageRestrictionManager {
	return NewTChanBaggageRestrictionManagerInheritedClient("BaggageRestrictionManager", client)
}

func (c *tchanBaggageRestrictionManagerClient) GetBaggageRestrictions(ctx thrift.Context, serviceName string) ([]*BaggageRestriction, error) {
	var resp BaggageRestrictionManagerGetBaggageRestrictionsResult
	args := BaggageRestrictionManagerGetBaggageRestrictionsArgs{
		ServiceName: serviceName,
	}
	success, err := c.client.Call(ctx, c.thriftService, "getBaggageRestrictions", &args, &resp)
	if err == nil && !success {
		switch {
		default:
			err = fmt.Errorf("received no result or unknown exception for getBaggageRestrictions")
		}
	}

	return resp.GetSuccess(), err
}

type tchanBaggageRestrictionManagerServer struct {
	handler TChanBaggageRestrictionManager
}

// NewTChanBaggageRestrictionManagerServer wraps a handler for TChanBaggageRestrictionManager so it can be
// registered with a thrift.Server.
func NewTChanBaggageRestrictionManagerServer(handler TChanBaggageRestrictionManager) thrift.TChanServer {
	return &tchanBaggageRestrictionManagerServer{
		handler,
	}
}

func (s *tchanBaggageRestrictionManagerServer) Service() string {
	return "BaggageRestrictionManager"
}

func (s *tchanBaggageRestrictionManagerServer) Methods() []string {
	return []string{
		"getBaggageRestrictions",
	}
}

func (s *tchanBaggageRestrictionManagerServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "getBaggageRestrictions":
		return s.handleGetBaggageRestrictions(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanBaggageRestrictionManagerServer) handleGetBaggageRestrictions(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req BaggageRestrictionManagerGetBaggageRestrictionsArgs
	var res BaggageRestrictionManagerGetBaggageRestrictionsResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.GetBaggageRestrictions(ctx, req.ServiceName)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}
