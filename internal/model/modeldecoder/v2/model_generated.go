// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by "modeldecoder/generator". DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
	"regexp"
	"strconv"
	"unicode/utf8"

	"github.com/pkg/errors"
)

var (
	patternAlphaNumericExtRegexp = regexp.MustCompile(patternAlphaNumericExt)
	patternNoAsteriskQuoteRegexp = regexp.MustCompile(patternNoAsteriskQuote)
)

func (val *metadataRoot) IsSet() bool {
	return val.Metadata.IsSet()
}

func (val *metadataRoot) Reset() {
	val.Metadata.Reset()
}

func (val *metadataRoot) validate() error {
	if err := val.Metadata.validate(); err != nil {
		return errors.Wrapf(err, "metadata")
	}
	if !val.Metadata.IsSet() {
		return fmt.Errorf("'metadata' required")
	}
	return nil
}

func (val *metadataRoot) processNestedSource() error {
	if err := val.Metadata.processNestedSource(); err != nil {
		return errors.Wrapf(err, "metadata")
	}
	return nil
}

func (val *metadata) IsSet() bool {
	return val.Cloud.IsSet() || (len(val.Labels) > 0) || val.Process.IsSet() || val.Service.IsSet() || val.System.IsSet() || val.User.IsSet() || val.Network.IsSet()
}

func (val *metadata) Reset() {
	val.Cloud.Reset()
	for k := range val.Labels {
		delete(val.Labels, k)
	}
	val.Process.Reset()
	val.Service.Reset()
	val.System.Reset()
	val.User.Reset()
	val.Network.Reset()
}

func (val *metadata) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Cloud.validate(); err != nil {
		return errors.Wrapf(err, "cloud")
	}
	for k, v := range val.Labels {
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("'labels': validation rule 'maxLengthVals(1024)' violated")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("'labels': validation rule 'inputTypesVals(string;bool;number)' violated for key %s", k)
		}
	}
	if err := val.Process.validate(); err != nil {
		return errors.Wrapf(err, "process")
	}
	if err := val.Service.validate(); err != nil {
		return errors.Wrapf(err, "service")
	}
	if !val.Service.IsSet() {
		return fmt.Errorf("'service' required")
	}
	if err := val.System.validate(); err != nil {
		return errors.Wrapf(err, "system")
	}
	if err := val.User.validate(); err != nil {
		return errors.Wrapf(err, "user")
	}
	if err := val.Network.validate(); err != nil {
		return errors.Wrapf(err, "network")
	}
	return nil
}

func (val *metadata) processNestedSource() error {
	if err := val.Cloud.processNestedSource(); err != nil {
		return errors.Wrapf(err, "cloud")
	}
	if err := val.Process.processNestedSource(); err != nil {
		return errors.Wrapf(err, "process")
	}
	if err := val.Service.processNestedSource(); err != nil {
		return errors.Wrapf(err, "service")
	}
	if err := val.System.processNestedSource(); err != nil {
		return errors.Wrapf(err, "system")
	}
	if err := val.User.processNestedSource(); err != nil {
		return errors.Wrapf(err, "user")
	}
	if err := val.Network.processNestedSource(); err != nil {
		return errors.Wrapf(err, "network")
	}
	return nil
}

func (val *metadataCloud) IsSet() bool {
	return val.Account.IsSet() || val.AvailabilityZone.IsSet() || val.Instance.IsSet() || val.Machine.IsSet() || val.Project.IsSet() || val.Provider.IsSet() || val.Region.IsSet() || val.Service.IsSet()
}

func (val *metadataCloud) Reset() {
	val.Account.Reset()
	val.AvailabilityZone.Reset()
	val.Instance.Reset()
	val.Machine.Reset()
	val.Project.Reset()
	val.Provider.Reset()
	val.Region.Reset()
	val.Service.Reset()
}

func (val *metadataCloud) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Account.validate(); err != nil {
		return errors.Wrapf(err, "account")
	}
	if val.AvailabilityZone.IsSet() && utf8.RuneCountInString(val.AvailabilityZone.Val) > 1024 {
		return fmt.Errorf("'availability_zone': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Instance.validate(); err != nil {
		return errors.Wrapf(err, "instance")
	}
	if err := val.Machine.validate(); err != nil {
		return errors.Wrapf(err, "machine")
	}
	if err := val.Project.validate(); err != nil {
		return errors.Wrapf(err, "project")
	}
	if val.Provider.IsSet() && utf8.RuneCountInString(val.Provider.Val) > 1024 {
		return fmt.Errorf("'provider': validation rule 'maxLength(1024)' violated")
	}
	if !val.Provider.IsSet() {
		return fmt.Errorf("'provider' required")
	}
	if val.Region.IsSet() && utf8.RuneCountInString(val.Region.Val) > 1024 {
		return fmt.Errorf("'region': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Service.validate(); err != nil {
		return errors.Wrapf(err, "service")
	}
	return nil
}

func (val *metadataCloud) processNestedSource() error {
	if err := val.Account.processNestedSource(); err != nil {
		return errors.Wrapf(err, "account")
	}
	if err := val.Instance.processNestedSource(); err != nil {
		return errors.Wrapf(err, "instance")
	}
	if err := val.Machine.processNestedSource(); err != nil {
		return errors.Wrapf(err, "machine")
	}
	if err := val.Project.processNestedSource(); err != nil {
		return errors.Wrapf(err, "project")
	}
	if err := val.Service.processNestedSource(); err != nil {
		return errors.Wrapf(err, "service")
	}
	return nil
}

func (val *metadataCloudAccount) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet()
}

func (val *metadataCloudAccount) Reset() {
	val.ID.Reset()
	val.Name.Reset()
}

func (val *metadataCloudAccount) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.ID.IsSet() && utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("'id': validation rule 'maxLength(1024)' violated")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataCloudAccount) processNestedSource() error {
	return nil
}

func (val *metadataCloudInstance) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet()
}

func (val *metadataCloudInstance) Reset() {
	val.ID.Reset()
	val.Name.Reset()
}

func (val *metadataCloudInstance) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.ID.IsSet() && utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("'id': validation rule 'maxLength(1024)' violated")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataCloudInstance) processNestedSource() error {
	return nil
}

func (val *metadataCloudMachine) IsSet() bool {
	return val.Type.IsSet()
}

func (val *metadataCloudMachine) Reset() {
	val.Type.Reset()
}

func (val *metadataCloudMachine) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Type.IsSet() && utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("'type': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataCloudMachine) processNestedSource() error {
	return nil
}

func (val *metadataCloudProject) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet()
}

func (val *metadataCloudProject) Reset() {
	val.ID.Reset()
	val.Name.Reset()
}

func (val *metadataCloudProject) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.ID.IsSet() && utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("'id': validation rule 'maxLength(1024)' violated")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataCloudProject) processNestedSource() error {
	return nil
}

func (val *metadataCloudService) IsSet() bool {
	return val.Name.IsSet()
}

func (val *metadataCloudService) Reset() {
	val.Name.Reset()
}

func (val *metadataCloudService) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataCloudService) processNestedSource() error {
	return nil
}

func (val *metadataProcess) IsSet() bool {
	return (len(val.Argv) > 0) || val.Pid.IsSet() || val.Ppid.IsSet() || val.Title.IsSet()
}

func (val *metadataProcess) Reset() {
	val.Argv = val.Argv[:0]
	val.Pid.Reset()
	val.Ppid.Reset()
	val.Title.Reset()
}

func (val *metadataProcess) validate() error {
	if !val.IsSet() {
		return nil
	}
	if !val.Pid.IsSet() {
		return fmt.Errorf("'pid' required")
	}
	if val.Title.IsSet() && utf8.RuneCountInString(val.Title.Val) > 1024 {
		return fmt.Errorf("'title': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataProcess) processNestedSource() error {
	return nil
}

func (val *metadataService) IsSet() bool {
	return val.Agent.IsSet() || val.Environment.IsSet() || val.Framework.IsSet() || val.ID.IsSet() || val.Language.IsSet() || val.Name.IsSet() || val.Node.IsSet() || val.Runtime.IsSet() || val.Version.IsSet()
}

func (val *metadataService) Reset() {
	val.Agent.Reset()
	val.Environment.Reset()
	val.Framework.Reset()
	val.ID.Reset()
	val.Language.Reset()
	val.Name.Reset()
	val.Node.Reset()
	val.Runtime.Reset()
	val.Version.Reset()
}

func (val *metadataService) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Agent.validate(); err != nil {
		return errors.Wrapf(err, "agent")
	}
	if !val.Agent.IsSet() {
		return fmt.Errorf("'agent' required")
	}
	if val.Environment.IsSet() && utf8.RuneCountInString(val.Environment.Val) > 1024 {
		return fmt.Errorf("'environment': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Framework.validate(); err != nil {
		return errors.Wrapf(err, "framework")
	}
	if err := val.Language.validate(); err != nil {
		return errors.Wrapf(err, "language")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) < 1 {
		return fmt.Errorf("'name': validation rule 'minLength(1)' violated")
	}
	if val.Name.Val != "" && !patternAlphaNumericExtRegexp.MatchString(val.Name.Val) {
		return fmt.Errorf("'name': validation rule 'pattern(patternAlphaNumericExt)' violated")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'name' required")
	}
	if err := val.Node.validate(); err != nil {
		return errors.Wrapf(err, "node")
	}
	if err := val.Runtime.validate(); err != nil {
		return errors.Wrapf(err, "runtime")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataService) processNestedSource() error {
	if err := val.Agent.processNestedSource(); err != nil {
		return errors.Wrapf(err, "agent")
	}
	if err := val.Framework.processNestedSource(); err != nil {
		return errors.Wrapf(err, "framework")
	}
	if err := val.Language.processNestedSource(); err != nil {
		return errors.Wrapf(err, "language")
	}
	if err := val.Node.processNestedSource(); err != nil {
		return errors.Wrapf(err, "node")
	}
	if err := val.Runtime.processNestedSource(); err != nil {
		return errors.Wrapf(err, "runtime")
	}
	return nil
}

func (val *metadataServiceAgent) IsSet() bool {
	return val.EphemeralID.IsSet() || val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceAgent) Reset() {
	val.EphemeralID.Reset()
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceAgent) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.EphemeralID.IsSet() && utf8.RuneCountInString(val.EphemeralID.Val) > 1024 {
		return fmt.Errorf("'ephemeral_id': validation rule 'maxLength(1024)' violated")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) < 1 {
		return fmt.Errorf("'name': validation rule 'minLength(1)' violated")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'name' required")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	if !val.Version.IsSet() {
		return fmt.Errorf("'version' required")
	}
	return nil
}

func (val *metadataServiceAgent) processNestedSource() error {
	return nil
}

func (val *metadataServiceFramework) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceFramework) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceFramework) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataServiceFramework) processNestedSource() error {
	return nil
}

func (val *metadataServiceLanguage) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceLanguage) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceLanguage) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'name' required")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataServiceLanguage) processNestedSource() error {
	return nil
}

func (val *metadataServiceNode) IsSet() bool {
	return val.Name.IsSet()
}

func (val *metadataServiceNode) Reset() {
	val.Name.Reset()
}

func (val *metadataServiceNode) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'configured_name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataServiceNode) processNestedSource() error {
	return nil
}

func (val *metadataServiceRuntime) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metadataServiceRuntime) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metadataServiceRuntime) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'name' required")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	if !val.Version.IsSet() {
		return fmt.Errorf("'version' required")
	}
	return nil
}

func (val *metadataServiceRuntime) processNestedSource() error {
	return nil
}

func (val *metadataSystem) IsSet() bool {
	return val.Architecture.IsSet() || val.ConfiguredHostname.IsSet() || val.Container.IsSet() || val.DetectedHostname.IsSet() || val.DeprecatedHostname.IsSet() || val.Kubernetes.IsSet() || val.Platform.IsSet()
}

func (val *metadataSystem) Reset() {
	val.Architecture.Reset()
	val.ConfiguredHostname.Reset()
	val.Container.Reset()
	val.DetectedHostname.Reset()
	val.DeprecatedHostname.Reset()
	val.Kubernetes.Reset()
	val.Platform.Reset()
}

func (val *metadataSystem) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Architecture.IsSet() && utf8.RuneCountInString(val.Architecture.Val) > 1024 {
		return fmt.Errorf("'architecture': validation rule 'maxLength(1024)' violated")
	}
	if val.ConfiguredHostname.IsSet() && utf8.RuneCountInString(val.ConfiguredHostname.Val) > 1024 {
		return fmt.Errorf("'configured_hostname': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Container.validate(); err != nil {
		return errors.Wrapf(err, "container")
	}
	if val.DetectedHostname.IsSet() && utf8.RuneCountInString(val.DetectedHostname.Val) > 1024 {
		return fmt.Errorf("'detected_hostname': validation rule 'maxLength(1024)' violated")
	}
	if val.DeprecatedHostname.IsSet() && utf8.RuneCountInString(val.DeprecatedHostname.Val) > 1024 {
		return fmt.Errorf("'hostname': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Kubernetes.validate(); err != nil {
		return errors.Wrapf(err, "kubernetes")
	}
	if val.Platform.IsSet() && utf8.RuneCountInString(val.Platform.Val) > 1024 {
		return fmt.Errorf("'platform': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataSystem) processNestedSource() error {
	if err := val.Container.processNestedSource(); err != nil {
		return errors.Wrapf(err, "container")
	}
	if err := val.Kubernetes.processNestedSource(); err != nil {
		return errors.Wrapf(err, "kubernetes")
	}
	return nil
}

func (val *metadataSystemContainer) IsSet() bool {
	return val.ID.IsSet()
}

func (val *metadataSystemContainer) Reset() {
	val.ID.Reset()
}

func (val *metadataSystemContainer) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.ID.IsSet() && utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("'id': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataSystemContainer) processNestedSource() error {
	return nil
}

func (val *metadataSystemKubernetes) IsSet() bool {
	return val.Namespace.IsSet() || val.Node.IsSet() || val.Pod.IsSet()
}

func (val *metadataSystemKubernetes) Reset() {
	val.Namespace.Reset()
	val.Node.Reset()
	val.Pod.Reset()
}

func (val *metadataSystemKubernetes) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Namespace.IsSet() && utf8.RuneCountInString(val.Namespace.Val) > 1024 {
		return fmt.Errorf("'namespace': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Node.validate(); err != nil {
		return errors.Wrapf(err, "node")
	}
	if err := val.Pod.validate(); err != nil {
		return errors.Wrapf(err, "pod")
	}
	return nil
}

func (val *metadataSystemKubernetes) processNestedSource() error {
	if err := val.Node.processNestedSource(); err != nil {
		return errors.Wrapf(err, "node")
	}
	if err := val.Pod.processNestedSource(); err != nil {
		return errors.Wrapf(err, "pod")
	}
	return nil
}

func (val *metadataSystemKubernetesNode) IsSet() bool {
	return val.Name.IsSet()
}

func (val *metadataSystemKubernetesNode) Reset() {
	val.Name.Reset()
}

func (val *metadataSystemKubernetesNode) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataSystemKubernetesNode) processNestedSource() error {
	return nil
}

func (val *metadataSystemKubernetesPod) IsSet() bool {
	return val.Name.IsSet() || val.UID.IsSet()
}

func (val *metadataSystemKubernetesPod) Reset() {
	val.Name.Reset()
	val.UID.Reset()
}

func (val *metadataSystemKubernetesPod) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.UID.IsSet() && utf8.RuneCountInString(val.UID.Val) > 1024 {
		return fmt.Errorf("'uid': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metadataSystemKubernetesPod) processNestedSource() error {
	return nil
}

func (val *user) IsSet() bool {
	return val.Domain.IsSet() || val.ID.IsSet() || val.Email.IsSet() || val.Name.IsSet()
}

func (val *user) Reset() {
	val.Domain.Reset()
	val.ID.Reset()
	val.Email.Reset()
	val.Name.Reset()
}

func (val *user) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Domain.IsSet() && utf8.RuneCountInString(val.Domain.Val) > 1024 {
		return fmt.Errorf("'domain': validation rule 'maxLength(1024)' violated")
	}
	switch t := val.ID.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("'id': validation rule 'maxLength(1024)' violated")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("'id': validation rule 'inputTypes(string;int)' violated")
		}
	case nil:
	default:
		return fmt.Errorf("'id': validation rule 'inputTypes(string;int)' violated ")
	}
	if val.Email.IsSet() && utf8.RuneCountInString(val.Email.Val) > 1024 {
		return fmt.Errorf("'email': validation rule 'maxLength(1024)' violated")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'username': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *user) processNestedSource() error {
	return nil
}

func (val *network) IsSet() bool {
	return val.Connection.IsSet()
}

func (val *network) Reset() {
	val.Connection.Reset()
}

func (val *network) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Connection.validate(); err != nil {
		return errors.Wrapf(err, "connection")
	}
	return nil
}

func (val *network) processNestedSource() error {
	if err := val.Connection.processNestedSource(); err != nil {
		return errors.Wrapf(err, "connection")
	}
	return nil
}

func (val *networkConnection) IsSet() bool {
	return val.Type.IsSet()
}

func (val *networkConnection) Reset() {
	val.Type.Reset()
}

func (val *networkConnection) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Type.IsSet() && utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("'type': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *networkConnection) processNestedSource() error {
	return nil
}

func (val *errorRoot) IsSet() bool {
	return val.Error.IsSet()
}

func (val *errorRoot) Reset() {
	val.Error.Reset()
}

func (val *errorRoot) validate() error {
	if err := val.Error.validate(); err != nil {
		return errors.Wrapf(err, "error")
	}
	if !val.Error.IsSet() {
		return fmt.Errorf("'error' required")
	}
	return nil
}

func (val *errorRoot) processNestedSource() error {
	if err := val.Error.processNestedSource(); err != nil {
		return errors.Wrapf(err, "error")
	}
	return nil
}

func (val *errorEvent) IsSet() bool {
	return val.Context.IsSet() || val.Culprit.IsSet() || val.Exception.IsSet() || val.ID.IsSet() || val.Log.IsSet() || val.ParentID.IsSet() || val.Timestamp.IsSet() || val.TraceID.IsSet() || val.Transaction.IsSet() || val.TransactionID.IsSet()
}

func (val *errorEvent) Reset() {
	val.Context.Reset()
	val.Culprit.Reset()
	val.Exception.Reset()
	val.ID.Reset()
	val.Log.Reset()
	val.ParentID.Reset()
	val.Timestamp.Reset()
	val.TraceID.Reset()
	val.Transaction.Reset()
	val.TransactionID.Reset()
}

func (val *errorEvent) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Context.validate(); err != nil {
		return errors.Wrapf(err, "context")
	}
	if val.Culprit.IsSet() && utf8.RuneCountInString(val.Culprit.Val) > 1024 {
		return fmt.Errorf("'culprit': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Exception.validate(); err != nil {
		return errors.Wrapf(err, "exception")
	}
	if val.ID.IsSet() && utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("'id': validation rule 'maxLength(1024)' violated")
	}
	if !val.ID.IsSet() {
		return fmt.Errorf("'id' required")
	}
	if err := val.Log.validate(); err != nil {
		return errors.Wrapf(err, "log")
	}
	if val.ParentID.IsSet() && utf8.RuneCountInString(val.ParentID.Val) > 1024 {
		return fmt.Errorf("'parent_id': validation rule 'maxLength(1024)' violated")
	}
	if !val.ParentID.IsSet() {
		if val.TransactionID.IsSet() {
			return fmt.Errorf("'parent_id' required when 'transaction_id' is set")
		}
		if val.TraceID.IsSet() {
			return fmt.Errorf("'parent_id' required when 'trace_id' is set")
		}
	}
	if val.TraceID.IsSet() && utf8.RuneCountInString(val.TraceID.Val) > 1024 {
		return fmt.Errorf("'trace_id': validation rule 'maxLength(1024)' violated")
	}
	if !val.TraceID.IsSet() {
		if val.TransactionID.IsSet() {
			return fmt.Errorf("'trace_id' required when 'transaction_id' is set")
		}
		if val.ParentID.IsSet() {
			return fmt.Errorf("'trace_id' required when 'parent_id' is set")
		}
	}
	if err := val.Transaction.validate(); err != nil {
		return errors.Wrapf(err, "transaction")
	}
	if val.TransactionID.IsSet() && utf8.RuneCountInString(val.TransactionID.Val) > 1024 {
		return fmt.Errorf("'transaction_id': validation rule 'maxLength(1024)' violated")
	}
	if !val.Exception.IsSet() && !val.Log.IsSet() {
		return fmt.Errorf("requires at least one of the fields 'exception;log'")
	}
	return nil
}

func (val *errorEvent) processNestedSource() error {
	if err := val.Context.processNestedSource(); err != nil {
		return errors.Wrapf(err, "context")
	}
	if err := val.Exception.processNestedSource(); err != nil {
		return errors.Wrapf(err, "exception")
	}
	if err := val.Log.processNestedSource(); err != nil {
		return errors.Wrapf(err, "log")
	}
	if err := val.Transaction.processNestedSource(); err != nil {
		return errors.Wrapf(err, "transaction")
	}
	return nil
}

func (val *context) IsSet() bool {
	return val.Cloud.IsSet() || (len(val.Custom) > 0) || val.Message.IsSet() || val.Page.IsSet() || val.Response.IsSet() || val.Request.IsSet() || val.Service.IsSet() || (len(val.Tags) > 0) || val.User.IsSet()
}

func (val *context) Reset() {
	val.Cloud.Reset()
	for k := range val.Custom {
		delete(val.Custom, k)
	}
	val.Message.Reset()
	val.Page.Reset()
	val.Response.Reset()
	val.Request.Reset()
	val.Service.Reset()
	for k := range val.Tags {
		delete(val.Tags, k)
	}
	val.User.Reset()
}

func (val *context) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Cloud.validate(); err != nil {
		return errors.Wrapf(err, "cloud")
	}
	if err := val.Message.validate(); err != nil {
		return errors.Wrapf(err, "message")
	}
	if err := val.Page.validate(); err != nil {
		return errors.Wrapf(err, "page")
	}
	if err := val.Response.validate(); err != nil {
		return errors.Wrapf(err, "response")
	}
	if err := val.Request.validate(); err != nil {
		return errors.Wrapf(err, "request")
	}
	if err := val.Service.validate(); err != nil {
		return errors.Wrapf(err, "service")
	}
	for k, v := range val.Tags {
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("'tags': validation rule 'maxLengthVals(1024)' violated")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("'tags': validation rule 'inputTypesVals(string;bool;number)' violated for key %s", k)
		}
	}
	if err := val.User.validate(); err != nil {
		return errors.Wrapf(err, "user")
	}
	return nil
}

func (val *context) processNestedSource() error {
	if err := val.Cloud.processNestedSource(); err != nil {
		return errors.Wrapf(err, "cloud")
	}
	if err := val.Message.processNestedSource(); err != nil {
		return errors.Wrapf(err, "message")
	}
	if err := val.Page.processNestedSource(); err != nil {
		return errors.Wrapf(err, "page")
	}
	if err := val.Response.processNestedSource(); err != nil {
		return errors.Wrapf(err, "response")
	}
	if err := val.Request.processNestedSource(); err != nil {
		return errors.Wrapf(err, "request")
	}
	if err := val.Service.processNestedSource(); err != nil {
		return errors.Wrapf(err, "service")
	}
	if err := val.User.processNestedSource(); err != nil {
		return errors.Wrapf(err, "user")
	}
	return nil
}

func (val *contextCloud) IsSet() bool {
	return val.Origin.IsSet()
}

func (val *contextCloud) Reset() {
	val.Origin.Reset()
}

func (val *contextCloud) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Origin.validate(); err != nil {
		return errors.Wrapf(err, "origin")
	}
	return nil
}

func (val *contextCloud) processNestedSource() error {
	if err := val.Origin.processNestedSource(); err != nil {
		return errors.Wrapf(err, "origin")
	}
	return nil
}

func (val *contextCloudOrigin) IsSet() bool {
	return val.Account.IsSet() || val.Provider.IsSet() || val.Region.IsSet() || val.Service.IsSet()
}

func (val *contextCloudOrigin) Reset() {
	val.Account.Reset()
	val.Provider.Reset()
	val.Region.Reset()
	val.Service.Reset()
}

func (val *contextCloudOrigin) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Account.validate(); err != nil {
		return errors.Wrapf(err, "account")
	}
	if err := val.Service.validate(); err != nil {
		return errors.Wrapf(err, "service")
	}
	return nil
}

func (val *contextCloudOrigin) processNestedSource() error {
	if err := val.Account.processNestedSource(); err != nil {
		return errors.Wrapf(err, "account")
	}
	if err := val.Service.processNestedSource(); err != nil {
		return errors.Wrapf(err, "service")
	}
	return nil
}

func (val *contextCloudOriginAccount) IsSet() bool {
	return val.ID.IsSet()
}

func (val *contextCloudOriginAccount) Reset() {
	val.ID.Reset()
}

func (val *contextCloudOriginAccount) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextCloudOriginAccount) processNestedSource() error {
	return nil
}

func (val *contextCloudOriginService) IsSet() bool {
	return val.Name.IsSet()
}

func (val *contextCloudOriginService) Reset() {
	val.Name.Reset()
}

func (val *contextCloudOriginService) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextCloudOriginService) processNestedSource() error {
	return nil
}

func (val *contextMessage) IsSet() bool {
	return val.Age.IsSet() || val.Body.IsSet() || val.Headers.IsSet() || val.Queue.IsSet() || val.RoutingKey.IsSet()
}

func (val *contextMessage) Reset() {
	val.Age.Reset()
	val.Body.Reset()
	val.Headers.Reset()
	val.Queue.Reset()
	val.RoutingKey.Reset()
}

func (val *contextMessage) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Age.validate(); err != nil {
		return errors.Wrapf(err, "age")
	}
	if err := val.Queue.validate(); err != nil {
		return errors.Wrapf(err, "queue")
	}
	return nil
}

func (val *contextMessage) processNestedSource() error {
	if err := val.Age.processNestedSource(); err != nil {
		return errors.Wrapf(err, "age")
	}
	if err := val.Queue.processNestedSource(); err != nil {
		return errors.Wrapf(err, "queue")
	}
	return nil
}

func (val *contextMessageAge) IsSet() bool {
	return val.Milliseconds.IsSet()
}

func (val *contextMessageAge) Reset() {
	val.Milliseconds.Reset()
}

func (val *contextMessageAge) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextMessageAge) processNestedSource() error {
	return nil
}

func (val *contextMessageQueue) IsSet() bool {
	return val.Name.IsSet()
}

func (val *contextMessageQueue) Reset() {
	val.Name.Reset()
}

func (val *contextMessageQueue) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *contextMessageQueue) processNestedSource() error {
	return nil
}

func (val *contextPage) IsSet() bool {
	return val.Referer.IsSet() || val.URL.IsSet()
}

func (val *contextPage) Reset() {
	val.Referer.Reset()
	val.URL.Reset()
}

func (val *contextPage) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextPage) processNestedSource() error {
	return nil
}

func (val *contextResponse) IsSet() bool {
	return val.DecodedBodySize.IsSet() || val.EncodedBodySize.IsSet() || val.Finished.IsSet() || val.Headers.IsSet() || val.HeadersSent.IsSet() || val.StatusCode.IsSet() || val.TransferSize.IsSet()
}

func (val *contextResponse) Reset() {
	val.DecodedBodySize.Reset()
	val.EncodedBodySize.Reset()
	val.Finished.Reset()
	val.Headers.Reset()
	val.HeadersSent.Reset()
	val.StatusCode.Reset()
	val.TransferSize.Reset()
}

func (val *contextResponse) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextResponse) processNestedSource() error {
	return nil
}

func (val *contextRequest) IsSet() bool {
	return val.Body.IsSet() || (len(val.Cookies) > 0) || (len(val.Env) > 0) || val.Headers.IsSet() || val.HTTPVersion.IsSet() || val.Method.IsSet() || val.Socket.IsSet() || val.URL.IsSet()
}

func (val *contextRequest) Reset() {
	val.Body.Reset()
	for k := range val.Cookies {
		delete(val.Cookies, k)
	}
	for k := range val.Env {
		delete(val.Env, k)
	}
	val.Headers.Reset()
	val.HTTPVersion.Reset()
	val.Method.Reset()
	val.Socket.Reset()
	val.URL.Reset()
}

func (val *contextRequest) validate() error {
	if !val.IsSet() {
		return nil
	}
	switch val.Body.Val.(type) {
	case string:
	case map[string]interface{}:
	case nil:
	default:
		return fmt.Errorf("'body': validation rule 'inputTypes(string;object)' violated ")
	}
	if val.HTTPVersion.IsSet() && utf8.RuneCountInString(val.HTTPVersion.Val) > 1024 {
		return fmt.Errorf("'http_version': validation rule 'maxLength(1024)' violated")
	}
	if val.Method.IsSet() && utf8.RuneCountInString(val.Method.Val) > 1024 {
		return fmt.Errorf("'method': validation rule 'maxLength(1024)' violated")
	}
	if !val.Method.IsSet() {
		return fmt.Errorf("'method' required")
	}
	if err := val.Socket.validate(); err != nil {
		return errors.Wrapf(err, "socket")
	}
	if err := val.URL.validate(); err != nil {
		return errors.Wrapf(err, "url")
	}
	return nil
}

func (val *contextRequest) processNestedSource() error {
	if err := val.Socket.processNestedSource(); err != nil {
		return errors.Wrapf(err, "socket")
	}
	if err := val.URL.processNestedSource(); err != nil {
		return errors.Wrapf(err, "url")
	}
	return nil
}

func (val *contextRequestSocket) IsSet() bool {
	return val.Encrypted.IsSet() || val.RemoteAddress.IsSet()
}

func (val *contextRequestSocket) Reset() {
	val.Encrypted.Reset()
	val.RemoteAddress.Reset()
}

func (val *contextRequestSocket) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextRequestSocket) processNestedSource() error {
	return nil
}

func (val *contextRequestURL) IsSet() bool {
	return val.Full.IsSet() || val.Hash.IsSet() || val.Hostname.IsSet() || val.Path.IsSet() || val.Port.IsSet() || val.Protocol.IsSet() || val.Raw.IsSet() || val.Search.IsSet()
}

func (val *contextRequestURL) Reset() {
	val.Full.Reset()
	val.Hash.Reset()
	val.Hostname.Reset()
	val.Path.Reset()
	val.Port.Reset()
	val.Protocol.Reset()
	val.Raw.Reset()
	val.Search.Reset()
}

func (val *contextRequestURL) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Full.IsSet() && utf8.RuneCountInString(val.Full.Val) > 1024 {
		return fmt.Errorf("'full': validation rule 'maxLength(1024)' violated")
	}
	if val.Hash.IsSet() && utf8.RuneCountInString(val.Hash.Val) > 1024 {
		return fmt.Errorf("'hash': validation rule 'maxLength(1024)' violated")
	}
	if val.Hostname.IsSet() && utf8.RuneCountInString(val.Hostname.Val) > 1024 {
		return fmt.Errorf("'hostname': validation rule 'maxLength(1024)' violated")
	}
	if val.Path.IsSet() && utf8.RuneCountInString(val.Path.Val) > 1024 {
		return fmt.Errorf("'pathname': validation rule 'maxLength(1024)' violated")
	}
	switch t := val.Port.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("'port': validation rule 'maxLength(1024)' violated")
		}
		if _, err := strconv.Atoi(t); err != nil {
			return fmt.Errorf("'port': validation rule 'targetType(int)' violated")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("'port': validation rule 'inputTypes(string;int)' violated")
		}
	case nil:
	default:
		return fmt.Errorf("'port': validation rule 'inputTypes(string;int)' violated ")
	}
	if val.Protocol.IsSet() && utf8.RuneCountInString(val.Protocol.Val) > 1024 {
		return fmt.Errorf("'protocol': validation rule 'maxLength(1024)' violated")
	}
	if val.Raw.IsSet() && utf8.RuneCountInString(val.Raw.Val) > 1024 {
		return fmt.Errorf("'raw': validation rule 'maxLength(1024)' violated")
	}
	if val.Search.IsSet() && utf8.RuneCountInString(val.Search.Val) > 1024 {
		return fmt.Errorf("'search': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *contextRequestURL) processNestedSource() error {
	return nil
}

func (val *contextService) IsSet() bool {
	return val.Agent.IsSet() || val.Environment.IsSet() || val.Framework.IsSet() || val.ID.IsSet() || val.Language.IsSet() || val.Name.IsSet() || val.Node.IsSet() || val.Origin.IsSet() || val.Runtime.IsSet() || val.Target.IsSet() || val.Version.IsSet()
}

func (val *contextService) Reset() {
	val.Agent.Reset()
	val.Environment.Reset()
	val.Framework.Reset()
	val.ID.Reset()
	val.Language.Reset()
	val.Name.Reset()
	val.Node.Reset()
	val.Origin.Reset()
	val.Runtime.Reset()
	val.Target.Reset()
	val.Version.Reset()
}

func (val *contextService) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Agent.validate(); err != nil {
		return errors.Wrapf(err, "agent")
	}
	if val.Environment.IsSet() && utf8.RuneCountInString(val.Environment.Val) > 1024 {
		return fmt.Errorf("'environment': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Framework.validate(); err != nil {
		return errors.Wrapf(err, "framework")
	}
	if err := val.Language.validate(); err != nil {
		return errors.Wrapf(err, "language")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Name.Val != "" && !patternAlphaNumericExtRegexp.MatchString(val.Name.Val) {
		return fmt.Errorf("'name': validation rule 'pattern(patternAlphaNumericExt)' violated")
	}
	if err := val.Node.validate(); err != nil {
		return errors.Wrapf(err, "node")
	}
	if err := val.Origin.validate(); err != nil {
		return errors.Wrapf(err, "origin")
	}
	if err := val.Runtime.validate(); err != nil {
		return errors.Wrapf(err, "runtime")
	}
	if err := val.Target.validate(); err != nil {
		return errors.Wrapf(err, "target")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *contextService) processNestedSource() error {
	if err := val.Agent.processNestedSource(); err != nil {
		return errors.Wrapf(err, "agent")
	}
	if err := val.Framework.processNestedSource(); err != nil {
		return errors.Wrapf(err, "framework")
	}
	if err := val.Language.processNestedSource(); err != nil {
		return errors.Wrapf(err, "language")
	}
	if err := val.Node.processNestedSource(); err != nil {
		return errors.Wrapf(err, "node")
	}
	if err := val.Origin.processNestedSource(); err != nil {
		return errors.Wrapf(err, "origin")
	}
	if err := val.Runtime.processNestedSource(); err != nil {
		return errors.Wrapf(err, "runtime")
	}
	if err := val.Target.processNestedSource(); err != nil {
		return errors.Wrapf(err, "target")
	}
	return nil
}

func (val *contextServiceAgent) IsSet() bool {
	return val.EphemeralID.IsSet() || val.Name.IsSet() || val.Version.IsSet()
}

func (val *contextServiceAgent) Reset() {
	val.EphemeralID.Reset()
	val.Name.Reset()
	val.Version.Reset()
}

func (val *contextServiceAgent) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.EphemeralID.IsSet() && utf8.RuneCountInString(val.EphemeralID.Val) > 1024 {
		return fmt.Errorf("'ephemeral_id': validation rule 'maxLength(1024)' violated")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *contextServiceAgent) processNestedSource() error {
	return nil
}

func (val *contextServiceFramework) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *contextServiceFramework) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *contextServiceFramework) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *contextServiceFramework) processNestedSource() error {
	return nil
}

func (val *contextServiceLanguage) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *contextServiceLanguage) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *contextServiceLanguage) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *contextServiceLanguage) processNestedSource() error {
	return nil
}

func (val *contextServiceNode) IsSet() bool {
	return val.Name.IsSet()
}

func (val *contextServiceNode) Reset() {
	val.Name.Reset()
}

func (val *contextServiceNode) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'configured_name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *contextServiceNode) processNestedSource() error {
	return nil
}

func (val *contextServiceOrigin) IsSet() bool {
	return val.ID.IsSet() || val.Name.IsSet() || val.Version.IsSet()
}

func (val *contextServiceOrigin) Reset() {
	val.ID.Reset()
	val.Name.Reset()
	val.Version.Reset()
}

func (val *contextServiceOrigin) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *contextServiceOrigin) processNestedSource() error {
	return nil
}

func (val *contextServiceRuntime) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *contextServiceRuntime) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *contextServiceRuntime) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *contextServiceRuntime) processNestedSource() error {
	return nil
}

func (val *contextServiceTarget) IsSet() bool {
	return val.Name.IsSet() || val.Type.IsSet()
}

func (val *contextServiceTarget) Reset() {
	val.Name.Reset()
	val.Type.Reset()
}

func (val *contextServiceTarget) validate() error {
	if !val.IsSet() {
		return nil
	}
	if !val.Type.IsSet() && !val.Name.IsSet() {
		return fmt.Errorf("requires at least one of the fields 'type;name'")
	}
	return nil
}

func (val *contextServiceTarget) processNestedSource() error {
	return nil
}

func (val *errorException) IsSet() bool {
	return (len(val.Attributes) > 0) || val.Code.IsSet() || (len(val.Cause) > 0) || val.Handled.IsSet() || val.Message.IsSet() || val.Module.IsSet() || (len(val.Stacktrace) > 0) || val.Type.IsSet()
}

func (val *errorException) Reset() {
	for k := range val.Attributes {
		delete(val.Attributes, k)
	}
	val.Code.Reset()
	for i := range val.Cause {
		val.Cause[i].Reset()
	}
	val.Cause = val.Cause[:0]
	val.Handled.Reset()
	val.Message.Reset()
	val.Module.Reset()
	for i := range val.Stacktrace {
		val.Stacktrace[i].Reset()
	}
	val.Stacktrace = val.Stacktrace[:0]
	val.Type.Reset()
}

func (val *errorException) validate() error {
	if !val.IsSet() {
		return nil
	}
	switch t := val.Code.Val.(type) {
	case string:
		if utf8.RuneCountInString(t) > 1024 {
			return fmt.Errorf("'code': validation rule 'maxLength(1024)' violated")
		}
	case int:
	case json.Number:
		if _, err := t.Int64(); err != nil {
			return fmt.Errorf("'code': validation rule 'inputTypes(string;int)' violated")
		}
	case nil:
	default:
		return fmt.Errorf("'code': validation rule 'inputTypes(string;int)' violated ")
	}
	for _, elem := range val.Cause {
		if err := elem.validate(); err != nil {
			return errors.Wrapf(err, "cause")
		}
	}
	if val.Module.IsSet() && utf8.RuneCountInString(val.Module.Val) > 1024 {
		return fmt.Errorf("'module': validation rule 'maxLength(1024)' violated")
	}
	for _, elem := range val.Stacktrace {
		if err := elem.validate(); err != nil {
			return errors.Wrapf(err, "stacktrace")
		}
	}
	if val.Type.IsSet() && utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("'type': validation rule 'maxLength(1024)' violated")
	}
	if !val.Message.IsSet() && !val.Type.IsSet() {
		return fmt.Errorf("requires at least one of the fields 'message;type'")
	}
	return nil
}

func (val *errorException) processNestedSource() error {
	return nil
}

func (val *stacktraceFrame) IsSet() bool {
	return val.AbsPath.IsSet() || val.Classname.IsSet() || val.ColumnNumber.IsSet() || val.ContextLine.IsSet() || val.Filename.IsSet() || val.Function.IsSet() || val.LibraryFrame.IsSet() || val.LineNumber.IsSet() || val.Module.IsSet() || (len(val.PostContext) > 0) || (len(val.PreContext) > 0) || (len(val.Vars) > 0)
}

func (val *stacktraceFrame) Reset() {
	val.AbsPath.Reset()
	val.Classname.Reset()
	val.ColumnNumber.Reset()
	val.ContextLine.Reset()
	val.Filename.Reset()
	val.Function.Reset()
	val.LibraryFrame.Reset()
	val.LineNumber.Reset()
	val.Module.Reset()
	val.PostContext = val.PostContext[:0]
	val.PreContext = val.PreContext[:0]
	for k := range val.Vars {
		delete(val.Vars, k)
	}
}

func (val *stacktraceFrame) validate() error {
	if !val.IsSet() {
		return nil
	}
	if !val.Classname.IsSet() && !val.Filename.IsSet() {
		return fmt.Errorf("requires at least one of the fields 'classname;filename'")
	}
	return nil
}

func (val *stacktraceFrame) processNestedSource() error {
	return nil
}

func (val *errorLog) IsSet() bool {
	return val.Level.IsSet() || val.LoggerName.IsSet() || val.Message.IsSet() || val.ParamMessage.IsSet() || (len(val.Stacktrace) > 0)
}

func (val *errorLog) Reset() {
	val.Level.Reset()
	val.LoggerName.Reset()
	val.Message.Reset()
	val.ParamMessage.Reset()
	for i := range val.Stacktrace {
		val.Stacktrace[i].Reset()
	}
	val.Stacktrace = val.Stacktrace[:0]
}

func (val *errorLog) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Level.IsSet() && utf8.RuneCountInString(val.Level.Val) > 1024 {
		return fmt.Errorf("'level': validation rule 'maxLength(1024)' violated")
	}
	if val.LoggerName.IsSet() && utf8.RuneCountInString(val.LoggerName.Val) > 1024 {
		return fmt.Errorf("'logger_name': validation rule 'maxLength(1024)' violated")
	}
	if !val.Message.IsSet() {
		return fmt.Errorf("'message' required")
	}
	if val.ParamMessage.IsSet() && utf8.RuneCountInString(val.ParamMessage.Val) > 1024 {
		return fmt.Errorf("'param_message': validation rule 'maxLength(1024)' violated")
	}
	for _, elem := range val.Stacktrace {
		if err := elem.validate(); err != nil {
			return errors.Wrapf(err, "stacktrace")
		}
	}
	return nil
}

func (val *errorLog) processNestedSource() error {
	return nil
}

func (val *errorTransactionRef) IsSet() bool {
	return val.Sampled.IsSet() || val.Name.IsSet() || val.Type.IsSet()
}

func (val *errorTransactionRef) Reset() {
	val.Sampled.Reset()
	val.Name.Reset()
	val.Type.Reset()
}

func (val *errorTransactionRef) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Type.IsSet() && utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("'type': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *errorTransactionRef) processNestedSource() error {
	return nil
}

func (val *metricsetRoot) IsSet() bool {
	return val.Metricset.IsSet()
}

func (val *metricsetRoot) Reset() {
	val.Metricset.Reset()
}

func (val *metricsetRoot) validate() error {
	if err := val.Metricset.validate(); err != nil {
		return errors.Wrapf(err, "metricset")
	}
	if !val.Metricset.IsSet() {
		return fmt.Errorf("'metricset' required")
	}
	return nil
}

func (val *metricsetRoot) processNestedSource() error {
	if err := val.Metricset.processNestedSource(); err != nil {
		return errors.Wrapf(err, "metricset")
	}
	return nil
}

func (val *metricset) IsSet() bool {
	return val.Timestamp.IsSet() || (len(val.Samples) > 0) || val.Span.IsSet() || (len(val.Tags) > 0) || val.Transaction.IsSet() || val.Service.IsSet() || val.FAAS.IsSet()
}

func (val *metricset) Reset() {
	val.Timestamp.Reset()
	for k := range val.Samples {
		delete(val.Samples, k)
	}
	val.Span.Reset()
	for k := range val.Tags {
		delete(val.Tags, k)
	}
	val.Transaction.Reset()
	val.Service.Reset()
	val.FAAS.Reset()
}

func (val *metricset) validate() error {
	if !val.IsSet() {
		return nil
	}
	if len(val.Samples) == 0 {
		return fmt.Errorf("'samples' required")
	}
	for k, v := range val.Samples {
		if err := v.validate(); err != nil {
			return errors.Wrapf(err, "samples")
		}
		if k != "" && !patternNoAsteriskQuoteRegexp.MatchString(k) {
			return fmt.Errorf("'samples': validation rule 'patternKeys(patternNoAsteriskQuote)' violated")
		}
	}
	if err := val.Span.validate(); err != nil {
		return errors.Wrapf(err, "span")
	}
	for k, v := range val.Tags {
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("'tags': validation rule 'maxLengthVals(1024)' violated")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("'tags': validation rule 'inputTypesVals(string;bool;number)' violated for key %s", k)
		}
	}
	if err := val.Transaction.validate(); err != nil {
		return errors.Wrapf(err, "transaction")
	}
	if err := val.Service.validate(); err != nil {
		return errors.Wrapf(err, "service")
	}
	if err := val.FAAS.validate(); err != nil {
		return errors.Wrapf(err, "faas")
	}
	return nil
}

func (val *metricset) processNestedSource() error {
	if err := val.Span.processNestedSource(); err != nil {
		return errors.Wrapf(err, "span")
	}
	if err := val.Transaction.processNestedSource(); err != nil {
		return errors.Wrapf(err, "transaction")
	}
	if err := val.Service.processNestedSource(); err != nil {
		return errors.Wrapf(err, "service")
	}
	if err := val.FAAS.processNestedSource(); err != nil {
		return errors.Wrapf(err, "faas")
	}
	return nil
}

func (val *metricsetSampleValue) IsSet() bool {
	return val.Type.IsSet() || val.Unit.IsSet() || val.Value.IsSet() || (len(val.Values) > 0) || (len(val.Counts) > 0)
}

func (val *metricsetSampleValue) Reset() {
	val.Type.Reset()
	val.Unit.Reset()
	val.Value.Reset()
	val.Values = val.Values[:0]
	val.Counts = val.Counts[:0]
}

func (val *metricsetSampleValue) validate() error {
	if !val.IsSet() {
		return nil
	}
	if !(len(val.Values) > 0) {
		if len(val.Counts) > 0 {
			return fmt.Errorf("'values' required when 'counts' is set")
		}
	}
	for _, elem := range val.Counts {
		if elem < 0 {
			return fmt.Errorf("'counts': validation rule 'minVals(0)' violated")
		}
	}
	if !(len(val.Counts) > 0) {
		if len(val.Values) > 0 {
			return fmt.Errorf("'counts' required when 'values' is set")
		}
	}
	if !val.Value.IsSet() && !(len(val.Values) > 0) {
		return fmt.Errorf("requires at least one of the fields 'value;values'")
	}
	return nil
}

func (val *metricsetSampleValue) processNestedSource() error {
	return nil
}

func (val *metricsetSpanRef) IsSet() bool {
	return val.Subtype.IsSet() || val.Type.IsSet()
}

func (val *metricsetSpanRef) Reset() {
	val.Subtype.Reset()
	val.Type.Reset()
}

func (val *metricsetSpanRef) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Subtype.IsSet() && utf8.RuneCountInString(val.Subtype.Val) > 1024 {
		return fmt.Errorf("'subtype': validation rule 'maxLength(1024)' violated")
	}
	if val.Type.IsSet() && utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("'type': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metricsetSpanRef) processNestedSource() error {
	return nil
}

func (val *metricsetTransactionRef) IsSet() bool {
	return val.Name.IsSet() || val.Type.IsSet()
}

func (val *metricsetTransactionRef) Reset() {
	val.Name.Reset()
	val.Type.Reset()
}

func (val *metricsetTransactionRef) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Type.IsSet() && utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("'type': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metricsetTransactionRef) processNestedSource() error {
	return nil
}

func (val *metricsetServiceRef) IsSet() bool {
	return val.Name.IsSet() || val.Version.IsSet()
}

func (val *metricsetServiceRef) Reset() {
	val.Name.Reset()
	val.Version.Reset()
}

func (val *metricsetServiceRef) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Version.IsSet() && utf8.RuneCountInString(val.Version.Val) > 1024 {
		return fmt.Errorf("'version': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *metricsetServiceRef) processNestedSource() error {
	return nil
}

func (val *faas) IsSet() bool {
	return val.ID.IsSet() || val.Coldstart.IsSet() || val.Execution.IsSet() || val.Trigger.IsSet() || val.Name.IsSet() || val.Version.IsSet()
}

func (val *faas) Reset() {
	val.ID.Reset()
	val.Coldstart.Reset()
	val.Execution.Reset()
	val.Trigger.Reset()
	val.Name.Reset()
	val.Version.Reset()
}

func (val *faas) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Trigger.validate(); err != nil {
		return errors.Wrapf(err, "trigger")
	}
	return nil
}

func (val *faas) processNestedSource() error {
	if err := val.Trigger.processNestedSource(); err != nil {
		return errors.Wrapf(err, "trigger")
	}
	return nil
}

func (val *trigger) IsSet() bool {
	return val.Type.IsSet() || val.RequestID.IsSet()
}

func (val *trigger) Reset() {
	val.Type.Reset()
	val.RequestID.Reset()
}

func (val *trigger) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *trigger) processNestedSource() error {
	return nil
}

func (val *spanRoot) IsSet() bool {
	return val.Span.IsSet()
}

func (val *spanRoot) Reset() {
	val.Span.Reset()
}

func (val *spanRoot) validate() error {
	if err := val.Span.validate(); err != nil {
		return errors.Wrapf(err, "span")
	}
	if !val.Span.IsSet() {
		return fmt.Errorf("'span' required")
	}
	return nil
}

func (val *spanRoot) processNestedSource() error {
	if err := val.Span.processNestedSource(); err != nil {
		return errors.Wrapf(err, "span")
	}
	return nil
}

func (val *span) IsSet() bool {
	return val.Action.IsSet() || (len(val.ChildIDs) > 0) || val.Composite.IsSet() || val.Context.IsSet() || val.Duration.IsSet() || val.ID.IsSet() || val.Name.IsSet() || val.Outcome.IsSet() || val.OTel.IsSet() || val.ParentID.IsSet() || val.SampleRate.IsSet() || (len(val.Stacktrace) > 0) || val.Start.IsSet() || val.Subtype.IsSet() || val.Sync.IsSet() || val.Timestamp.IsSet() || val.TraceID.IsSet() || val.TransactionID.IsSet() || val.Type.IsSet() || (len(val.Links) > 0)
}

func (val *span) Reset() {
	val.Action.Reset()
	val.ChildIDs = val.ChildIDs[:0]
	val.Composite.Reset()
	val.Context.Reset()
	val.Duration.Reset()
	val.ID.Reset()
	val.Name.Reset()
	val.Outcome.Reset()
	val.OTel.Reset()
	val.ParentID.Reset()
	val.SampleRate.Reset()
	for i := range val.Stacktrace {
		val.Stacktrace[i].Reset()
	}
	val.Stacktrace = val.Stacktrace[:0]
	val.Start.Reset()
	val.Subtype.Reset()
	val.Sync.Reset()
	val.Timestamp.Reset()
	val.TraceID.Reset()
	val.TransactionID.Reset()
	val.Type.Reset()
	for i := range val.Links {
		val.Links[i].Reset()
	}
	val.Links = val.Links[:0]
}

func (val *span) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Action.IsSet() && utf8.RuneCountInString(val.Action.Val) > 1024 {
		return fmt.Errorf("'action': validation rule 'maxLength(1024)' violated")
	}
	for _, elem := range val.ChildIDs {
		if utf8.RuneCountInString(elem) > 1024 {
			return fmt.Errorf("'child_ids': validation rule 'maxLength(1024)' violated")
		}
	}
	if err := val.Composite.validate(); err != nil {
		return errors.Wrapf(err, "composite")
	}
	if err := val.Context.validate(); err != nil {
		return errors.Wrapf(err, "context")
	}
	if val.Duration.IsSet() && val.Duration.Val < 0 {
		return fmt.Errorf("'duration': validation rule 'min(0)' violated")
	}
	if !val.Duration.IsSet() {
		return fmt.Errorf("'duration' required")
	}
	if val.ID.IsSet() && utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("'id': validation rule 'maxLength(1024)' violated")
	}
	if !val.ID.IsSet() {
		return fmt.Errorf("'id' required")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if !val.Name.IsSet() {
		return fmt.Errorf("'name' required")
	}
	if val.Outcome.Val != "" {
		var matchEnum bool
		for _, s := range enumOutcome {
			if val.Outcome.Val == s {
				matchEnum = true
				break
			}
		}
		if !matchEnum {
			return fmt.Errorf("'outcome': validation rule 'enum(enumOutcome)' violated")
		}
	}
	if err := val.OTel.validate(); err != nil {
		return errors.Wrapf(err, "otel")
	}
	if val.ParentID.IsSet() && utf8.RuneCountInString(val.ParentID.Val) > 1024 {
		return fmt.Errorf("'parent_id': validation rule 'maxLength(1024)' violated")
	}
	if !val.ParentID.IsSet() {
		return fmt.Errorf("'parent_id' required")
	}
	for _, elem := range val.Stacktrace {
		if err := elem.validate(); err != nil {
			return errors.Wrapf(err, "stacktrace")
		}
	}
	if val.Subtype.IsSet() && utf8.RuneCountInString(val.Subtype.Val) > 1024 {
		return fmt.Errorf("'subtype': validation rule 'maxLength(1024)' violated")
	}
	if val.TraceID.IsSet() && utf8.RuneCountInString(val.TraceID.Val) > 1024 {
		return fmt.Errorf("'trace_id': validation rule 'maxLength(1024)' violated")
	}
	if !val.TraceID.IsSet() {
		return fmt.Errorf("'trace_id' required")
	}
	if val.TransactionID.IsSet() && utf8.RuneCountInString(val.TransactionID.Val) > 1024 {
		return fmt.Errorf("'transaction_id': validation rule 'maxLength(1024)' violated")
	}
	if val.Type.IsSet() && utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("'type': validation rule 'maxLength(1024)' violated")
	}
	if !val.Type.IsSet() {
		return fmt.Errorf("'type' required")
	}
	for _, elem := range val.Links {
		if err := elem.validate(); err != nil {
			return errors.Wrapf(err, "links")
		}
	}
	if !val.Start.IsSet() && !val.Timestamp.IsSet() {
		return fmt.Errorf("requires at least one of the fields 'start;timestamp'")
	}
	return nil
}

func (val *span) processNestedSource() error {
	if err := val.Composite.processNestedSource(); err != nil {
		return errors.Wrapf(err, "composite")
	}
	if err := val.Context.processNestedSource(); err != nil {
		return errors.Wrapf(err, "context")
	}
	if err := val.OTel.processNestedSource(); err != nil {
		return errors.Wrapf(err, "otel")
	}
	return nil
}

func (val *spanComposite) IsSet() bool {
	return val.Count.IsSet() || val.Sum.IsSet() || val.CompressionStrategy.IsSet()
}

func (val *spanComposite) Reset() {
	val.Count.Reset()
	val.Sum.Reset()
	val.CompressionStrategy.Reset()
}

func (val *spanComposite) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Count.IsSet() && val.Count.Val < 2 {
		return fmt.Errorf("'count': validation rule 'min(2)' violated")
	}
	if !val.Count.IsSet() {
		return fmt.Errorf("'count' required")
	}
	if val.Sum.IsSet() && val.Sum.Val < 0 {
		return fmt.Errorf("'sum': validation rule 'min(0)' violated")
	}
	if !val.Sum.IsSet() {
		return fmt.Errorf("'sum' required")
	}
	if !val.CompressionStrategy.IsSet() {
		return fmt.Errorf("'compression_strategy' required")
	}
	return nil
}

func (val *spanComposite) processNestedSource() error {
	return nil
}

func (val *spanContext) IsSet() bool {
	return val.Database.IsSet() || val.Destination.IsSet() || val.HTTP.IsSet() || val.Message.IsSet() || val.Service.IsSet() || (len(val.Tags) > 0)
}

func (val *spanContext) Reset() {
	val.Database.Reset()
	val.Destination.Reset()
	val.HTTP.Reset()
	val.Message.Reset()
	val.Service.Reset()
	for k := range val.Tags {
		delete(val.Tags, k)
	}
}

func (val *spanContext) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Database.validate(); err != nil {
		return errors.Wrapf(err, "db")
	}
	if err := val.Destination.validate(); err != nil {
		return errors.Wrapf(err, "destination")
	}
	if err := val.HTTP.validate(); err != nil {
		return errors.Wrapf(err, "http")
	}
	if err := val.Message.validate(); err != nil {
		return errors.Wrapf(err, "message")
	}
	if err := val.Service.validate(); err != nil {
		return errors.Wrapf(err, "service")
	}
	for k, v := range val.Tags {
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("'tags': validation rule 'maxLengthVals(1024)' violated")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("'tags': validation rule 'inputTypesVals(string;bool;number)' violated for key %s", k)
		}
	}
	return nil
}

func (val *spanContext) processNestedSource() error {
	if err := val.Database.processNestedSource(); err != nil {
		return errors.Wrapf(err, "db")
	}
	if err := val.Destination.processNestedSource(); err != nil {
		return errors.Wrapf(err, "destination")
	}
	if err := val.HTTP.processNestedSource(); err != nil {
		return errors.Wrapf(err, "http")
	}
	if err := val.Message.processNestedSource(); err != nil {
		return errors.Wrapf(err, "message")
	}
	if err := val.Service.processNestedSource(); err != nil {
		return errors.Wrapf(err, "service")
	}
	return nil
}

func (val *spanContextDatabase) IsSet() bool {
	return val.Instance.IsSet() || val.Link.IsSet() || val.RowsAffected.IsSet() || val.Statement.IsSet() || val.Type.IsSet() || val.User.IsSet()
}

func (val *spanContextDatabase) Reset() {
	val.Instance.Reset()
	val.Link.Reset()
	val.RowsAffected.Reset()
	val.Statement.Reset()
	val.Type.Reset()
	val.User.Reset()
}

func (val *spanContextDatabase) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Link.IsSet() && utf8.RuneCountInString(val.Link.Val) > 1024 {
		return fmt.Errorf("'link': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *spanContextDatabase) processNestedSource() error {
	return nil
}

func (val *spanContextDestination) IsSet() bool {
	return val.Address.IsSet() || val.Port.IsSet() || val.Service.IsSet()
}

func (val *spanContextDestination) Reset() {
	val.Address.Reset()
	val.Port.Reset()
	val.Service.Reset()
}

func (val *spanContextDestination) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Address.IsSet() && utf8.RuneCountInString(val.Address.Val) > 1024 {
		return fmt.Errorf("'address': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Service.validate(); err != nil {
		return errors.Wrapf(err, "service")
	}
	return nil
}

func (val *spanContextDestination) processNestedSource() error {
	if err := val.Service.processNestedSource(); err != nil {
		return errors.Wrapf(err, "service")
	}
	return nil
}

func (val *spanContextDestinationService) IsSet() bool {
	return val.Name.IsSet() || val.Resource.IsSet() || val.Type.IsSet()
}

func (val *spanContextDestinationService) Reset() {
	val.Name.Reset()
	val.Resource.Reset()
	val.Type.Reset()
}

func (val *spanContextDestinationService) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if val.Resource.IsSet() && utf8.RuneCountInString(val.Resource.Val) > 1024 {
		return fmt.Errorf("'resource': validation rule 'maxLength(1024)' violated")
	}
	if !val.Resource.IsSet() {
		return fmt.Errorf("'resource' required")
	}
	if val.Type.IsSet() && utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("'type': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *spanContextDestinationService) processNestedSource() error {
	return nil
}

func (val *spanContextHTTP) IsSet() bool {
	return val.Method.IsSet() || val.Request.IsSet() || val.Response.IsSet() || val.StatusCode.IsSet() || val.URL.IsSet()
}

func (val *spanContextHTTP) Reset() {
	val.Method.Reset()
	val.Request.Reset()
	val.Response.Reset()
	val.StatusCode.Reset()
	val.URL.Reset()
}

func (val *spanContextHTTP) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Method.IsSet() && utf8.RuneCountInString(val.Method.Val) > 1024 {
		return fmt.Errorf("'method': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Request.validate(); err != nil {
		return errors.Wrapf(err, "request")
	}
	if err := val.Response.validate(); err != nil {
		return errors.Wrapf(err, "response")
	}
	return nil
}

func (val *spanContextHTTP) processNestedSource() error {
	if err := val.Request.processNestedSource(); err != nil {
		return errors.Wrapf(err, "request")
	}
	if err := val.Response.processNestedSource(); err != nil {
		return errors.Wrapf(err, "response")
	}
	return nil
}

func (val *spanContextHTTPRequest) IsSet() bool {
	return val.ID.IsSet()
}

func (val *spanContextHTTPRequest) Reset() {
	val.ID.Reset()
}

func (val *spanContextHTTPRequest) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *spanContextHTTPRequest) processNestedSource() error {
	return nil
}

func (val *spanContextHTTPResponse) IsSet() bool {
	return val.DecodedBodySize.IsSet() || val.EncodedBodySize.IsSet() || val.Headers.IsSet() || val.StatusCode.IsSet() || val.TransferSize.IsSet()
}

func (val *spanContextHTTPResponse) Reset() {
	val.DecodedBodySize.Reset()
	val.EncodedBodySize.Reset()
	val.Headers.Reset()
	val.StatusCode.Reset()
	val.TransferSize.Reset()
}

func (val *spanContextHTTPResponse) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *spanContextHTTPResponse) processNestedSource() error {
	return nil
}

func (val *otel) IsSet() bool {
	return val.SpanKind.IsSet() || (len(val.Attributes) > 0)
}

func (val *otel) Reset() {
	val.SpanKind.Reset()
	for k := range val.Attributes {
		delete(val.Attributes, k)
	}
}

func (val *otel) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *otel) processNestedSource() error {
	return nil
}

func (val *spanLink) IsSet() bool {
	return val.SpanID.IsSet() || val.TraceID.IsSet()
}

func (val *spanLink) Reset() {
	val.SpanID.Reset()
	val.TraceID.Reset()
}

func (val *spanLink) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.SpanID.IsSet() && utf8.RuneCountInString(val.SpanID.Val) > 1024 {
		return fmt.Errorf("'span_id': validation rule 'maxLength(1024)' violated")
	}
	if !val.SpanID.IsSet() {
		return fmt.Errorf("'span_id' required")
	}
	if val.TraceID.IsSet() && utf8.RuneCountInString(val.TraceID.Val) > 1024 {
		return fmt.Errorf("'trace_id': validation rule 'maxLength(1024)' violated")
	}
	if !val.TraceID.IsSet() {
		return fmt.Errorf("'trace_id' required")
	}
	return nil
}

func (val *spanLink) processNestedSource() error {
	return nil
}

func (val *transactionRoot) IsSet() bool {
	return val.Transaction.IsSet()
}

func (val *transactionRoot) Reset() {
	val.Transaction.Reset()
}

func (val *transactionRoot) validate() error {
	if err := val.Transaction.validate(); err != nil {
		return errors.Wrapf(err, "transaction")
	}
	if !val.Transaction.IsSet() {
		return fmt.Errorf("'transaction' required")
	}
	return nil
}

func (val *transactionRoot) processNestedSource() error {
	if err := val.Transaction.processNestedSource(); err != nil {
		return errors.Wrapf(err, "transaction")
	}
	return nil
}

func (val *transaction) IsSet() bool {
	return val.Context.IsSet() || (len(val.DroppedSpanStats) > 0) || val.Duration.IsSet() || val.FAAS.IsSet() || val.ID.IsSet() || val.Marks.IsSet() || val.Name.IsSet() || val.OTel.IsSet() || val.Outcome.IsSet() || val.ParentID.IsSet() || val.Result.IsSet() || val.Sampled.IsSet() || val.SampleRate.IsSet() || val.Session.IsSet() || val.SpanCount.IsSet() || val.Timestamp.IsSet() || val.TraceID.IsSet() || val.Type.IsSet() || val.UserExperience.IsSet() || (len(val.Links) > 0)
}

func (val *transaction) Reset() {
	val.Context.Reset()
	for i := range val.DroppedSpanStats {
		val.DroppedSpanStats[i].Reset()
	}
	val.DroppedSpanStats = val.DroppedSpanStats[:0]
	val.Duration.Reset()
	val.FAAS.Reset()
	val.ID.Reset()
	val.Marks.Reset()
	val.Name.Reset()
	val.OTel.Reset()
	val.Outcome.Reset()
	val.ParentID.Reset()
	val.Result.Reset()
	val.Sampled.Reset()
	val.SampleRate.Reset()
	val.Session.Reset()
	val.SpanCount.Reset()
	val.Timestamp.Reset()
	val.TraceID.Reset()
	val.Type.Reset()
	val.UserExperience.Reset()
	for i := range val.Links {
		val.Links[i].Reset()
	}
	val.Links = val.Links[:0]
}

func (val *transaction) validate() error {
	if !val.IsSet() {
		return nil
	}
	if err := val.Context.validate(); err != nil {
		return errors.Wrapf(err, "context")
	}
	for _, elem := range val.DroppedSpanStats {
		if err := elem.validate(); err != nil {
			return errors.Wrapf(err, "dropped_spans_stats")
		}
	}
	if val.Duration.IsSet() && val.Duration.Val < 0 {
		return fmt.Errorf("'duration': validation rule 'min(0)' violated")
	}
	if !val.Duration.IsSet() {
		return fmt.Errorf("'duration' required")
	}
	if err := val.FAAS.validate(); err != nil {
		return errors.Wrapf(err, "faas")
	}
	if val.ID.IsSet() && utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("'id': validation rule 'maxLength(1024)' violated")
	}
	if !val.ID.IsSet() {
		return fmt.Errorf("'id' required")
	}
	if err := val.Marks.validate(); err != nil {
		return errors.Wrapf(err, "marks")
	}
	if val.Name.IsSet() && utf8.RuneCountInString(val.Name.Val) > 1024 {
		return fmt.Errorf("'name': validation rule 'maxLength(1024)' violated")
	}
	if err := val.OTel.validate(); err != nil {
		return errors.Wrapf(err, "otel")
	}
	if val.Outcome.Val != "" {
		var matchEnum bool
		for _, s := range enumOutcome {
			if val.Outcome.Val == s {
				matchEnum = true
				break
			}
		}
		if !matchEnum {
			return fmt.Errorf("'outcome': validation rule 'enum(enumOutcome)' violated")
		}
	}
	if val.ParentID.IsSet() && utf8.RuneCountInString(val.ParentID.Val) > 1024 {
		return fmt.Errorf("'parent_id': validation rule 'maxLength(1024)' violated")
	}
	if val.Result.IsSet() && utf8.RuneCountInString(val.Result.Val) > 1024 {
		return fmt.Errorf("'result': validation rule 'maxLength(1024)' violated")
	}
	if err := val.Session.validate(); err != nil {
		return errors.Wrapf(err, "session")
	}
	if err := val.SpanCount.validate(); err != nil {
		return errors.Wrapf(err, "span_count")
	}
	if !val.SpanCount.IsSet() {
		return fmt.Errorf("'span_count' required")
	}
	if val.TraceID.IsSet() && utf8.RuneCountInString(val.TraceID.Val) > 1024 {
		return fmt.Errorf("'trace_id': validation rule 'maxLength(1024)' violated")
	}
	if !val.TraceID.IsSet() {
		return fmt.Errorf("'trace_id' required")
	}
	if val.Type.IsSet() && utf8.RuneCountInString(val.Type.Val) > 1024 {
		return fmt.Errorf("'type': validation rule 'maxLength(1024)' violated")
	}
	if !val.Type.IsSet() {
		return fmt.Errorf("'type' required")
	}
	if err := val.UserExperience.validate(); err != nil {
		return errors.Wrapf(err, "experience")
	}
	for _, elem := range val.Links {
		if err := elem.validate(); err != nil {
			return errors.Wrapf(err, "links")
		}
	}
	return nil
}

func (val *transaction) processNestedSource() error {
	if err := val.Context.processNestedSource(); err != nil {
		return errors.Wrapf(err, "context")
	}
	if err := val.FAAS.processNestedSource(); err != nil {
		return errors.Wrapf(err, "faas")
	}
	if err := val.Marks.processNestedSource(); err != nil {
		return errors.Wrapf(err, "marks")
	}
	if err := val.OTel.processNestedSource(); err != nil {
		return errors.Wrapf(err, "otel")
	}
	if err := val.Session.processNestedSource(); err != nil {
		return errors.Wrapf(err, "session")
	}
	if err := val.SpanCount.processNestedSource(); err != nil {
		return errors.Wrapf(err, "span_count")
	}
	if err := val.UserExperience.processNestedSource(); err != nil {
		return errors.Wrapf(err, "experience")
	}
	return nil
}

func (val *transactionDroppedSpanStats) IsSet() bool {
	return val.DestinationServiceResource.IsSet() || val.ServiceTargetType.IsSet() || val.ServiceTargetName.IsSet() || val.Outcome.IsSet() || val.Duration.IsSet()
}

func (val *transactionDroppedSpanStats) Reset() {
	val.DestinationServiceResource.Reset()
	val.ServiceTargetType.Reset()
	val.ServiceTargetName.Reset()
	val.Outcome.Reset()
	val.Duration.Reset()
}

func (val *transactionDroppedSpanStats) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.DestinationServiceResource.IsSet() && utf8.RuneCountInString(val.DestinationServiceResource.Val) > 1024 {
		return fmt.Errorf("'destination_service_resource': validation rule 'maxLength(1024)' violated")
	}
	if val.ServiceTargetType.IsSet() && utf8.RuneCountInString(val.ServiceTargetType.Val) > 512 {
		return fmt.Errorf("'service_target_type': validation rule 'maxLength(512)' violated")
	}
	if val.ServiceTargetName.IsSet() && utf8.RuneCountInString(val.ServiceTargetName.Val) > 512 {
		return fmt.Errorf("'service_target_name': validation rule 'maxLength(512)' violated")
	}
	if val.Outcome.Val != "" {
		var matchEnum bool
		for _, s := range enumOutcome {
			if val.Outcome.Val == s {
				matchEnum = true
				break
			}
		}
		if !matchEnum {
			return fmt.Errorf("'outcome': validation rule 'enum(enumOutcome)' violated")
		}
	}
	if err := val.Duration.validate(); err != nil {
		return errors.Wrapf(err, "duration")
	}
	return nil
}

func (val *transactionDroppedSpanStats) processNestedSource() error {
	if err := val.Duration.processNestedSource(); err != nil {
		return errors.Wrapf(err, "duration")
	}
	return nil
}

func (val *transactionDroppedSpansDuration) IsSet() bool {
	return val.Count.IsSet() || val.Sum.IsSet()
}

func (val *transactionDroppedSpansDuration) Reset() {
	val.Count.Reset()
	val.Sum.Reset()
}

func (val *transactionDroppedSpansDuration) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Count.IsSet() && val.Count.Val < 1 {
		return fmt.Errorf("'count': validation rule 'min(1)' violated")
	}
	if err := val.Sum.validate(); err != nil {
		return errors.Wrapf(err, "sum")
	}
	return nil
}

func (val *transactionDroppedSpansDuration) processNestedSource() error {
	if err := val.Sum.processNestedSource(); err != nil {
		return errors.Wrapf(err, "sum")
	}
	return nil
}

func (val *transactionDroppedSpansDurationSum) IsSet() bool {
	return val.Us.IsSet()
}

func (val *transactionDroppedSpansDurationSum) Reset() {
	val.Us.Reset()
}

func (val *transactionDroppedSpansDurationSum) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Us.IsSet() && val.Us.Val < 0 {
		return fmt.Errorf("'us': validation rule 'min(0)' violated")
	}
	return nil
}

func (val *transactionDroppedSpansDurationSum) processNestedSource() error {
	return nil
}

func (val *transactionMarks) IsSet() bool {
	return (len(val.Events) > 0)
}

func (val *transactionMarks) Reset() {
	for k := range val.Events {
		delete(val.Events, k)
	}
}

func (val *transactionMarks) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *transactionMarks) processNestedSource() error {
	return nil
}

func (val *transactionMarkEvents) IsSet() bool {
	return (len(val.Measurements) > 0)
}

func (val *transactionMarkEvents) Reset() {
	for k := range val.Measurements {
		delete(val.Measurements, k)
	}
}

func (val *transactionMarkEvents) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *transactionMarkEvents) processNestedSource() error {
	return nil
}

func (val *transactionSession) IsSet() bool {
	return val.ID.IsSet() || val.Sequence.IsSet()
}

func (val *transactionSession) Reset() {
	val.ID.Reset()
	val.Sequence.Reset()
}

func (val *transactionSession) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.ID.IsSet() && utf8.RuneCountInString(val.ID.Val) > 1024 {
		return fmt.Errorf("'id': validation rule 'maxLength(1024)' violated")
	}
	if !val.ID.IsSet() {
		return fmt.Errorf("'id' required")
	}
	if val.Sequence.IsSet() && val.Sequence.Val < 1 {
		return fmt.Errorf("'sequence': validation rule 'min(1)' violated")
	}
	return nil
}

func (val *transactionSession) processNestedSource() error {
	return nil
}

func (val *transactionSpanCount) IsSet() bool {
	return val.Dropped.IsSet() || val.Started.IsSet()
}

func (val *transactionSpanCount) Reset() {
	val.Dropped.Reset()
	val.Started.Reset()
}

func (val *transactionSpanCount) validate() error {
	if !val.IsSet() {
		return nil
	}
	if !val.Started.IsSet() {
		return fmt.Errorf("'started' required")
	}
	return nil
}

func (val *transactionSpanCount) processNestedSource() error {
	return nil
}

func (val *transactionUserExperience) IsSet() bool {
	return val.CumulativeLayoutShift.IsSet() || val.FirstInputDelay.IsSet() || val.Longtask.IsSet() || val.TotalBlockingTime.IsSet()
}

func (val *transactionUserExperience) Reset() {
	val.CumulativeLayoutShift.Reset()
	val.FirstInputDelay.Reset()
	val.Longtask.Reset()
	val.TotalBlockingTime.Reset()
}

func (val *transactionUserExperience) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.CumulativeLayoutShift.IsSet() && val.CumulativeLayoutShift.Val < 0 {
		return fmt.Errorf("'cls': validation rule 'min(0)' violated")
	}
	if val.FirstInputDelay.IsSet() && val.FirstInputDelay.Val < 0 {
		return fmt.Errorf("'fid': validation rule 'min(0)' violated")
	}
	if err := val.Longtask.validate(); err != nil {
		return errors.Wrapf(err, "longtask")
	}
	if val.TotalBlockingTime.IsSet() && val.TotalBlockingTime.Val < 0 {
		return fmt.Errorf("'tbt': validation rule 'min(0)' violated")
	}
	return nil
}

func (val *transactionUserExperience) processNestedSource() error {
	if err := val.Longtask.processNestedSource(); err != nil {
		return errors.Wrapf(err, "longtask")
	}
	return nil
}

func (val *longtaskMetrics) IsSet() bool {
	return val.Count.IsSet() || val.Max.IsSet() || val.Sum.IsSet()
}

func (val *longtaskMetrics) Reset() {
	val.Count.Reset()
	val.Max.Reset()
	val.Sum.Reset()
}

func (val *longtaskMetrics) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Count.IsSet() && val.Count.Val < 0 {
		return fmt.Errorf("'count': validation rule 'min(0)' violated")
	}
	if !val.Count.IsSet() {
		return fmt.Errorf("'count' required")
	}
	if val.Max.IsSet() && val.Max.Val < 0 {
		return fmt.Errorf("'max': validation rule 'min(0)' violated")
	}
	if !val.Max.IsSet() {
		return fmt.Errorf("'max' required")
	}
	if val.Sum.IsSet() && val.Sum.Val < 0 {
		return fmt.Errorf("'sum': validation rule 'min(0)' violated")
	}
	if !val.Sum.IsSet() {
		return fmt.Errorf("'sum' required")
	}
	return nil
}

func (val *longtaskMetrics) processNestedSource() error {
	return nil
}

func (val *logRoot) IsSet() bool {
	return val.Log.IsSet()
}

func (val *logRoot) Reset() {
	val.Log.Reset()
}

func (val *logRoot) validate() error {
	if err := val.Log.validate(); err != nil {
		return errors.Wrapf(err, "log")
	}
	if !val.Log.IsSet() {
		return fmt.Errorf("'log' required")
	}
	return nil
}

func (val *logRoot) processNestedSource() error {
	if err := val.Log.processNestedSource(); err != nil {
		return errors.Wrapf(err, "log")
	}
	return nil
}

func (val *log) IsSet() bool {
	return val.Timestamp.IsSet() || val.TraceID.IsSet() || val.TransactionID.IsSet() || val.SpanID.IsSet() || val.Message.IsSet() || val.FAAS.IsSet() || (len(val.Labels) > 0) || val.EcsLogEventFields.IsSet() || val.EcsLogServiceFields.IsSet() || val.EcsLogLogFields.IsSet() || val.EcsLogErrorFields.IsSet() || val.EcsLogProcessFields.IsSet()
}

func (val *log) Reset() {
	val.Timestamp.Reset()
	val.TraceID.Reset()
	val.TransactionID.Reset()
	val.SpanID.Reset()
	val.Message.Reset()
	val.FAAS.Reset()
	for k := range val.Labels {
		delete(val.Labels, k)
	}
	val.EcsLogEventFields.Reset()
	val.EcsLogServiceFields.Reset()
	val.EcsLogLogFields.Reset()
	val.EcsLogErrorFields.Reset()
	val.EcsLogProcessFields.Reset()
}

func (val *log) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.TraceID.IsSet() && utf8.RuneCountInString(val.TraceID.Val) > 1024 {
		return fmt.Errorf("'trace.id': validation rule 'maxLength(1024)' violated")
	}
	if val.TransactionID.IsSet() && utf8.RuneCountInString(val.TransactionID.Val) > 1024 {
		return fmt.Errorf("'transaction.id': validation rule 'maxLength(1024)' violated")
	}
	if val.SpanID.IsSet() && utf8.RuneCountInString(val.SpanID.Val) > 1024 {
		return fmt.Errorf("'span.id': validation rule 'maxLength(1024)' violated")
	}
	if err := val.FAAS.validate(); err != nil {
		return errors.Wrapf(err, "faas")
	}
	for k, v := range val.Labels {
		switch t := v.(type) {
		case nil:
		case string:
			if utf8.RuneCountInString(t) > 1024 {
				return fmt.Errorf("'labels': validation rule 'maxLengthVals(1024)' violated")
			}
		case bool:
		case json.Number:
		default:
			return fmt.Errorf("'labels': validation rule 'inputTypesVals(string;bool;number)' violated for key %s", k)
		}
	}
	if err := val.EcsLogEventFields.validate(); err != nil {
		return errors.Wrapf(err, "ecslogeventfields")
	}
	if err := val.EcsLogServiceFields.validate(); err != nil {
		return errors.Wrapf(err, "ecslogservicefields")
	}
	if err := val.EcsLogLogFields.validate(); err != nil {
		return errors.Wrapf(err, "ecsloglogfields")
	}
	if err := val.EcsLogErrorFields.validate(); err != nil {
		return errors.Wrapf(err, "ecslogerrorfields")
	}
	if err := val.EcsLogProcessFields.validate(); err != nil {
		return errors.Wrapf(err, "ecslogprocessfields")
	}
	return nil
}

func (val *log) processNestedSource() error {
	if err := val.FAAS.processNestedSource(); err != nil {
		return errors.Wrapf(err, "faas")
	}
	if err := val.EcsLogEventFields.processNestedSource(); err != nil {
		return errors.Wrapf(err, "ecslogeventfields")
	}
	if err := val.EcsLogServiceFields.processNestedSource(); err != nil {
		return errors.Wrapf(err, "ecslogservicefields")
	}
	if err := val.EcsLogLogFields.processNestedSource(); err != nil {
		return errors.Wrapf(err, "ecsloglogfields")
	}
	if err := val.EcsLogErrorFields.processNestedSource(); err != nil {
		return errors.Wrapf(err, "ecslogerrorfields")
	}
	if err := val.EcsLogProcessFields.processNestedSource(); err != nil {
		return errors.Wrapf(err, "ecslogprocessfields")
	}
	return nil
}

func (val *EcsLogEventFields) IsSet() bool {
	return (len(val.NestedStruct) > 0) || val.EventDataset.IsSet()
}

func (val *EcsLogEventFields) Reset() {
	for k := range val.NestedStruct {
		delete(val.NestedStruct, k)
	}
	val.EventDataset.Reset()
}

func (val *EcsLogEventFields) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.EventDataset.IsSet() && utf8.RuneCountInString(val.EventDataset.Val) > 1024 {
		return fmt.Errorf("'event.dataset': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *EcsLogEventFields) processNestedSource() error {
	if len(val.NestedStruct) == 0 {
		return nil
	}
	if tmpVal, ok := val.NestedStruct["dataset"].(string); ok {
		val.EventDataset.Set(tmpVal)
	}
	return nil
}

func (val *EcsLogServiceFields) IsSet() bool {
	return (len(val.NestedStruct) > 0) || val.ServiceName.IsSet() || val.ServiceVersion.IsSet() || val.ServiceEnvironment.IsSet() || val.ServiceNodeName.IsSet()
}

func (val *EcsLogServiceFields) Reset() {
	for k := range val.NestedStruct {
		delete(val.NestedStruct, k)
	}
	val.ServiceName.Reset()
	val.ServiceVersion.Reset()
	val.ServiceEnvironment.Reset()
	val.ServiceNodeName.Reset()
}

func (val *EcsLogServiceFields) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.ServiceName.IsSet() && utf8.RuneCountInString(val.ServiceName.Val) > 1024 {
		return fmt.Errorf("'service.name': validation rule 'maxLength(1024)' violated")
	}
	if val.ServiceVersion.IsSet() && utf8.RuneCountInString(val.ServiceVersion.Val) > 1024 {
		return fmt.Errorf("'service.version': validation rule 'maxLength(1024)' violated")
	}
	if val.ServiceEnvironment.IsSet() && utf8.RuneCountInString(val.ServiceEnvironment.Val) > 1024 {
		return fmt.Errorf("'service.environment': validation rule 'maxLength(1024)' violated")
	}
	if val.ServiceNodeName.IsSet() && utf8.RuneCountInString(val.ServiceNodeName.Val) > 1024 {
		return fmt.Errorf("'service.node.name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *EcsLogServiceFields) processNestedSource() error {
	if len(val.NestedStruct) == 0 {
		return nil
	}
	if tmpVal, ok := val.NestedStruct["name"].(string); ok {
		val.ServiceName.Set(tmpVal)
	}
	if tmpVal, ok := val.NestedStruct["version"].(string); ok {
		val.ServiceVersion.Set(tmpVal)
	}
	if tmpVal, ok := val.NestedStruct["environment"].(string); ok {
		val.ServiceEnvironment.Set(tmpVal)
	}
	if tmpVal, ok := val.NestedStruct["node"].(map[string]interface{}); ok {
		if tmpVal, ok := tmpVal["name"].(string); ok {
			val.ServiceNodeName.Set(tmpVal)
		}
	}
	return nil
}

func (val *EcsLogLogFields) IsSet() bool {
	return (len(val.NestedStruct) > 0) || val.Level.IsSet() || val.Logger.IsSet() || val.OriginFileName.IsSet() || val.OriginFileLine.IsSet() || val.OriginFunction.IsSet()
}

func (val *EcsLogLogFields) Reset() {
	for k := range val.NestedStruct {
		delete(val.NestedStruct, k)
	}
	val.Level.Reset()
	val.Logger.Reset()
	val.OriginFileName.Reset()
	val.OriginFileLine.Reset()
	val.OriginFunction.Reset()
}

func (val *EcsLogLogFields) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.Level.IsSet() && utf8.RuneCountInString(val.Level.Val) > 1024 {
		return fmt.Errorf("'log.level': validation rule 'maxLength(1024)' violated")
	}
	if val.Logger.IsSet() && utf8.RuneCountInString(val.Logger.Val) > 1024 {
		return fmt.Errorf("'log.logger': validation rule 'maxLength(1024)' violated")
	}
	if val.OriginFileName.IsSet() && utf8.RuneCountInString(val.OriginFileName.Val) > 1024 {
		return fmt.Errorf("'log.origin.file.name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *EcsLogLogFields) processNestedSource() error {
	if len(val.NestedStruct) == 0 {
		return nil
	}
	if tmpVal, ok := val.NestedStruct["level"].(string); ok {
		val.Level.Set(tmpVal)
	}
	if tmpVal, ok := val.NestedStruct["logger"].(string); ok {
		val.Logger.Set(tmpVal)
	}
	if tmpVal, ok := val.NestedStruct["origin"].(map[string]interface{}); ok {
		if tmpVal, ok := tmpVal["file"].(map[string]interface{}); ok {
			if tmpVal, ok := tmpVal["name"].(string); ok {
				val.OriginFileName.Set(tmpVal)
			}
		}
	}
	if tmpVal, ok := val.NestedStruct["origin"].(map[string]interface{}); ok {
		if tmpVal, ok := tmpVal["file"].(map[string]interface{}); ok {
			if tmpVal, ok := tmpVal["line"].(json.Number); ok {
				tmpVal, err := tmpVal.Int64()
				if err != nil {
					return err
				}
				newVal := int(tmpVal)
				val.OriginFileLine.Set(newVal)
			}
		}
	}
	if tmpVal, ok := val.NestedStruct["origin"].(map[string]interface{}); ok {
		if tmpVal, ok := tmpVal["function"].(string); ok {
			val.OriginFunction.Set(tmpVal)
		}
	}
	return nil
}

func (val *EcsLogErrorFields) IsSet() bool {
	return (len(val.NestedStruct) > 0) || val.ErrorType.IsSet() || val.ErrorMessage.IsSet() || val.ErrorStacktrace.IsSet()
}

func (val *EcsLogErrorFields) Reset() {
	for k := range val.NestedStruct {
		delete(val.NestedStruct, k)
	}
	val.ErrorType.Reset()
	val.ErrorMessage.Reset()
	val.ErrorStacktrace.Reset()
}

func (val *EcsLogErrorFields) validate() error {
	if !val.IsSet() {
		return nil
	}
	return nil
}

func (val *EcsLogErrorFields) processNestedSource() error {
	if len(val.NestedStruct) == 0 {
		return nil
	}
	if tmpVal, ok := val.NestedStruct["type"].(string); ok {
		val.ErrorType.Set(tmpVal)
	}
	if tmpVal, ok := val.NestedStruct["message"].(string); ok {
		val.ErrorMessage.Set(tmpVal)
	}
	if tmpVal, ok := val.NestedStruct["stack_trace"].(string); ok {
		val.ErrorStacktrace.Set(tmpVal)
	}
	return nil
}

func (val *EcsLogProcessFields) IsSet() bool {
	return (len(val.NestedStruct) > 0) || val.ProcessThreadName.IsSet()
}

func (val *EcsLogProcessFields) Reset() {
	for k := range val.NestedStruct {
		delete(val.NestedStruct, k)
	}
	val.ProcessThreadName.Reset()
}

func (val *EcsLogProcessFields) validate() error {
	if !val.IsSet() {
		return nil
	}
	if val.ProcessThreadName.IsSet() && utf8.RuneCountInString(val.ProcessThreadName.Val) > 1024 {
		return fmt.Errorf("'process.thread.name': validation rule 'maxLength(1024)' violated")
	}
	return nil
}

func (val *EcsLogProcessFields) processNestedSource() error {
	if len(val.NestedStruct) == 0 {
		return nil
	}
	if tmpVal, ok := val.NestedStruct["thread"].(map[string]interface{}); ok {
		if tmpVal, ok := tmpVal["name"].(string); ok {
			val.ProcessThreadName.Set(tmpVal)
		}
	}
	return nil
}
