// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: collection_agent.proto

package profiling

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HostKernelVersion
	HostKernelVersion string `protobuf:"bytes,1,opt,name=hostKernelVersion,proto3" json:"hostKernelVersion,omitempty"`
	// Hostname
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{0}
}

func (x *HostInfo) GetHostKernelVersion() string {
	if x != nil {
		return x.HostKernelVersion
	}
	return ""
}

func (x *HostInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type AddCountsForTracesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time at which this message was sent. Filled from libpf.UnixTime. Since
	// second resolution is sufficient, there is no need to incur the overhead of
	// google.protobuf.Timestamp.
	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Hash of the trace for which we are updating the count. Each hash is split into two
	// fields (hiTraceHashes[i] and loTraceHashes[i]). The count for the hash pairs is at
	// counts[i].
	// Most significant bits of the trace hash
	HiTraceHashes []uint64 `protobuf:"fixed64,2,rep,packed,name=hiTraceHashes,proto3" json:"hiTraceHashes,omitempty"`
	// Least significant bits of the trace hash
	LoTraceHashes []uint64 `protobuf:"fixed64,3,rep,packed,name=loTraceHashes,proto3" json:"loTraceHashes,omitempty"`
	// The amount by which to increment the trace's count
	Counts []uint32 `protobuf:"varint,4,rep,packed,name=counts,proto3" json:"counts,omitempty"`
	// The comm information that is associated with the process of the trace.
	// This is an array of indices to uniqueMetadata.
	CommsIdx []uint32 `protobuf:"varint,5,rep,packed,name=commsIdx,proto3" json:"commsIdx,omitempty"`
	// The following two fields represent associative arrays of trace indices to
	// corresponding unique metadata indices.
	PodNamesIdx       map[uint32]uint32 `protobuf:"bytes,6,rep,name=podNamesIdx,proto3" json:"podNamesIdx,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ContainerNamesIdx map[uint32]uint32 `protobuf:"bytes,7,rep,name=containerNamesIdx,proto3" json:"containerNamesIdx,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Unique comm, pod names, container names (no duplicates)
	UniqueMetadata []string `protobuf:"bytes,8,rep,name=uniqueMetadata,proto3" json:"uniqueMetadata,omitempty"`
}

func (x *AddCountsForTracesRequest) Reset() {
	*x = AddCountsForTracesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCountsForTracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCountsForTracesRequest) ProtoMessage() {}

func (x *AddCountsForTracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCountsForTracesRequest.ProtoReflect.Descriptor instead.
func (*AddCountsForTracesRequest) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{1}
}

func (x *AddCountsForTracesRequest) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AddCountsForTracesRequest) GetHiTraceHashes() []uint64 {
	if x != nil {
		return x.HiTraceHashes
	}
	return nil
}

func (x *AddCountsForTracesRequest) GetLoTraceHashes() []uint64 {
	if x != nil {
		return x.LoTraceHashes
	}
	return nil
}

func (x *AddCountsForTracesRequest) GetCounts() []uint32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *AddCountsForTracesRequest) GetCommsIdx() []uint32 {
	if x != nil {
		return x.CommsIdx
	}
	return nil
}

func (x *AddCountsForTracesRequest) GetPodNamesIdx() map[uint32]uint32 {
	if x != nil {
		return x.PodNamesIdx
	}
	return nil
}

func (x *AddCountsForTracesRequest) GetContainerNamesIdx() map[uint32]uint32 {
	if x != nil {
		return x.ContainerNamesIdx
	}
	return nil
}

func (x *AddCountsForTracesRequest) GetUniqueMetadata() []string {
	if x != nil {
		return x.UniqueMetadata
	}
	return nil
}

type SetFramesForTracesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trace hash to be associated with the frames.
	// For each trace i, the hash is split into two fields (hiTraceHashes[i]
	// and loTraceHashes[i]).
	// Most significant bits of the trace hash
	HiTraceHashes []uint64 `protobuf:"fixed64,1,rep,packed,name=hiTraceHashes,proto3" json:"hiTraceHashes,omitempty"`
	// Least significant bits of the trace hash
	LoTraceHashes []uint64 `protobuf:"fixed64,2,rep,packed,name=loTraceHashes,proto3" json:"loTraceHashes,omitempty"`
	// For each trace i, the number of frames will be frameCounts[i].
	FrameCounts []uint32 `protobuf:"varint,3,rep,packed,name=frameCounts,proto3" json:"frameCounts,omitempty"`
	// Whether this frame is Python, PHP, Native etc.
	Types []uint32 `protobuf:"varint,4,rep,packed,name=types,proto3" json:"types,omitempty"`
	// For native code this field is the text section ID of the frame. For interpreted
	// code it is the file ID of the frame. The container is split into two fields
	// (hiContainers and loContainers).
	// Most significant bits of the container
	HiContainers []uint64 `protobuf:"fixed64,5,rep,packed,name=hiContainers,proto3" json:"hiContainers,omitempty"`
	// Least significant bits of the container
	LoContainers []uint64 `protobuf:"fixed64,6,rep,packed,name=loContainers,proto3" json:"loContainers,omitempty"`
	// For native code this field is the offset of the frame in the text
	// section. For interpreted code it is the line number.
	Offsets []uint64 `protobuf:"fixed64,7,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
	// The comm information that is associated with the process of the trace.
	// This is an array of indices to uniqueMetadata. For each trace i, its
	// comm will be in uniqueMetadata[commsIdx[i]].
	CommsIdx []uint32 `protobuf:"varint,8,rep,packed,name=commsIdx,proto3" json:"commsIdx,omitempty"`
	// The following two fields represent associative arrays of trace indices i to
	// corresponding unique metadata indices.
	PodNamesIdx       map[uint32]uint32 `protobuf:"bytes,9,rep,name=podNamesIdx,proto3" json:"podNamesIdx,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ContainerNamesIdx map[uint32]uint32 `protobuf:"bytes,10,rep,name=containerNamesIdx,proto3" json:"containerNamesIdx,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Unique comm, pod names, container names (no duplicates)
	UniqueMetadata []string `protobuf:"bytes,11,rep,name=uniqueMetadata,proto3" json:"uniqueMetadata,omitempty"`
}

func (x *SetFramesForTracesRequest) Reset() {
	*x = SetFramesForTracesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFramesForTracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFramesForTracesRequest) ProtoMessage() {}

func (x *SetFramesForTracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFramesForTracesRequest.ProtoReflect.Descriptor instead.
func (*SetFramesForTracesRequest) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{2}
}

func (x *SetFramesForTracesRequest) GetHiTraceHashes() []uint64 {
	if x != nil {
		return x.HiTraceHashes
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetLoTraceHashes() []uint64 {
	if x != nil {
		return x.LoTraceHashes
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetFrameCounts() []uint32 {
	if x != nil {
		return x.FrameCounts
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetTypes() []uint32 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetHiContainers() []uint64 {
	if x != nil {
		return x.HiContainers
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetLoContainers() []uint64 {
	if x != nil {
		return x.LoContainers
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetOffsets() []uint64 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetCommsIdx() []uint32 {
	if x != nil {
		return x.CommsIdx
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetPodNamesIdx() map[uint32]uint32 {
	if x != nil {
		return x.PodNamesIdx
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetContainerNamesIdx() map[uint32]uint32 {
	if x != nil {
		return x.ContainerNamesIdx
	}
	return nil
}

func (x *SetFramesForTracesRequest) GetUniqueMetadata() []string {
	if x != nil {
		return x.UniqueMetadata
	}
	return nil
}

type AddFrameMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Most significant bits of the file ID for the stack frame
	HiFileIDs []uint64 `protobuf:"fixed64,1,rep,packed,name=hiFileIDs,proto3" json:"hiFileIDs,omitempty"`
	// Least significant bits of the file ID for the stack frame
	LoFileIDs []uint64 `protobuf:"fixed64,2,rep,packed,name=loFileIDs,proto3" json:"loFileIDs,omitempty"`
	// Address or Line for the stack frame
	AddressOrLines []uint64 `protobuf:"varint,3,rep,packed,name=addressOrLines,proto3" json:"addressOrLines,omitempty"`
	// Most significant bits of the source ID for the stack frame metadata
	HiSourceIDs []uint64 `protobuf:"fixed64,4,rep,packed,name=hiSourceIDs,proto3" json:"hiSourceIDs,omitempty"`
	// Least significant bits of the source ID for the stack frame metadata
	LoSourceIDs []uint64 `protobuf:"fixed64,5,rep,packed,name=loSourceIDs,proto3" json:"loSourceIDs,omitempty"`
	// Line number for the stack frame metadata
	LineNumbers []uint64 `protobuf:"varint,6,rep,packed,name=lineNumbers,proto3" json:"lineNumbers,omitempty"`
	// Function name for the stack frame metadata
	FunctionNames []string `protobuf:"bytes,7,rep,name=functionNames,proto3" json:"functionNames,omitempty"`
	// Function offset for the stack frame metadata
	FunctionOffsets []uint32 `protobuf:"varint,8,rep,packed,name=functionOffsets,proto3" json:"functionOffsets,omitempty"`
	// Whether this frame is Python, Java
	Types []uint32 `protobuf:"varint,9,rep,packed,name=types,proto3" json:"types,omitempty"`
	// The file name associate with this stack frame metadata
	Filenames []string `protobuf:"bytes,10,rep,name=filenames,proto3" json:"filenames,omitempty"`
}

func (x *AddFrameMetadataRequest) Reset() {
	*x = AddFrameMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFrameMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFrameMetadataRequest) ProtoMessage() {}

func (x *AddFrameMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFrameMetadataRequest.ProtoReflect.Descriptor instead.
func (*AddFrameMetadataRequest) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{3}
}

func (x *AddFrameMetadataRequest) GetHiFileIDs() []uint64 {
	if x != nil {
		return x.HiFileIDs
	}
	return nil
}

func (x *AddFrameMetadataRequest) GetLoFileIDs() []uint64 {
	if x != nil {
		return x.LoFileIDs
	}
	return nil
}

func (x *AddFrameMetadataRequest) GetAddressOrLines() []uint64 {
	if x != nil {
		return x.AddressOrLines
	}
	return nil
}

func (x *AddFrameMetadataRequest) GetHiSourceIDs() []uint64 {
	if x != nil {
		return x.HiSourceIDs
	}
	return nil
}

func (x *AddFrameMetadataRequest) GetLoSourceIDs() []uint64 {
	if x != nil {
		return x.LoSourceIDs
	}
	return nil
}

func (x *AddFrameMetadataRequest) GetLineNumbers() []uint64 {
	if x != nil {
		return x.LineNumbers
	}
	return nil
}

func (x *AddFrameMetadataRequest) GetFunctionNames() []string {
	if x != nil {
		return x.FunctionNames
	}
	return nil
}

func (x *AddFrameMetadataRequest) GetFunctionOffsets() []uint32 {
	if x != nil {
		return x.FunctionOffsets
	}
	return nil
}

func (x *AddFrameMetadataRequest) GetTypes() []uint32 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *AddFrameMetadataRequest) GetFilenames() []string {
	if x != nil {
		return x.Filenames
	}
	return nil
}

type AddExecutableMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File ID for the file being updated
	HiFileIDs []uint64 `protobuf:"fixed64,1,rep,packed,name=hiFileIDs,proto3" json:"hiFileIDs,omitempty"`
	LoFileIDs []uint64 `protobuf:"fixed64,2,rep,packed,name=loFileIDs,proto3" json:"loFileIDs,omitempty"`
	// A file name associated to the file referred to by fileID
	Filenames []string `protobuf:"bytes,3,rep,name=filenames,proto3" json:"filenames,omitempty"`
	// The BuildID associated to the file referred to by fileID
	BuildIDs []string `protobuf:"bytes,4,rep,name=buildIDs,proto3" json:"buildIDs,omitempty"`
}

func (x *AddExecutableMetadataRequest) Reset() {
	*x = AddExecutableMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExecutableMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExecutableMetadataRequest) ProtoMessage() {}

func (x *AddExecutableMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExecutableMetadataRequest.ProtoReflect.Descriptor instead.
func (*AddExecutableMetadataRequest) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{4}
}

func (x *AddExecutableMetadataRequest) GetHiFileIDs() []uint64 {
	if x != nil {
		return x.HiFileIDs
	}
	return nil
}

func (x *AddExecutableMetadataRequest) GetLoFileIDs() []uint64 {
	if x != nil {
		return x.LoFileIDs
	}
	return nil
}

func (x *AddExecutableMetadataRequest) GetFilenames() []string {
	if x != nil {
		return x.Filenames
	}
	return nil
}

func (x *AddExecutableMetadataRequest) GetBuildIDs() []string {
	if x != nil {
		return x.BuildIDs
	}
	return nil
}

type TsMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp is the Unix timestamp at which the host metrics were measured
	// (end time of the interval).
	// Filled from libpf.UnixTime. Since second resolution is sufficient,
	// there is no need to incur the overhead of google.protobuf.Timestamp.
	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// ID identifies the kind of value
	IDs []uint32 `protobuf:"varint,2,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	// value is the metric value corresponding to the ID
	Values []int64 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *TsMetric) Reset() {
	*x = TsMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsMetric) ProtoMessage() {}

func (x *TsMetric) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsMetric.ProtoReflect.Descriptor instead.
func (*TsMetric) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{5}
}

func (x *TsMetric) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TsMetric) GetIDs() []uint32 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *TsMetric) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of timestamped host metrics to be processed
	TsMetrics []*TsMetric `protobuf:"bytes,1,rep,name=tsMetrics,proto3" json:"tsMetrics,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{6}
}

func (x *Metrics) GetTsMetrics() []*TsMetric {
	if x != nil {
		return x.TsMetrics
	}
	return nil
}

type HostMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata key/value pairs
	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HostMetadata) Reset() {
	*x = HostMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetadata) ProtoMessage() {}

func (x *HostMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetadata.ProtoReflect.Descriptor instead.
func (*HostMetadata) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{7}
}

func (x *HostMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AddFallbackSymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File ID for the stack frame
	HiFileIDs []uint64 `protobuf:"fixed64,1,rep,packed,name=hiFileIDs,proto3" json:"hiFileIDs,omitempty"`
	LoFileIDs []uint64 `protobuf:"fixed64,2,rep,packed,name=loFileIDs,proto3" json:"loFileIDs,omitempty"`
	// Address or line number for the stack frame
	AddressOrLines []uint64 `protobuf:"varint,3,rep,packed,name=addressOrLines,proto3" json:"addressOrLines,omitempty"`
	// Symbol to be associated with the frame
	Symbols []string `protobuf:"bytes,4,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *AddFallbackSymbolsRequest) Reset() {
	*x = AddFallbackSymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFallbackSymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFallbackSymbolsRequest) ProtoMessage() {}

func (x *AddFallbackSymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFallbackSymbolsRequest.ProtoReflect.Descriptor instead.
func (*AddFallbackSymbolsRequest) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{8}
}

func (x *AddFallbackSymbolsRequest) GetHiFileIDs() []uint64 {
	if x != nil {
		return x.HiFileIDs
	}
	return nil
}

func (x *AddFallbackSymbolsRequest) GetLoFileIDs() []uint64 {
	if x != nil {
		return x.LoFileIDs
	}
	return nil
}

func (x *AddFallbackSymbolsRequest) GetAddressOrLines() []uint64 {
	if x != nil {
		return x.AddressOrLines
	}
	return nil
}

func (x *AddFallbackSymbolsRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type GetSymbolsPackageUploadURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Most significant bits of the file ID.
	HiFileID uint64 `protobuf:"fixed64,1,opt,name=hiFileID,proto3" json:"hiFileID,omitempty"`
	// Least significant bits of the file ID.
	LoFileID uint64 `protobuf:"fixed64,2,opt,name=loFileID,proto3" json:"loFileID,omitempty"`
	// Name of the file to be uploaded
	FileName string `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *GetSymbolsPackageUploadURLRequest) Reset() {
	*x = GetSymbolsPackageUploadURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolsPackageUploadURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolsPackageUploadURLRequest) ProtoMessage() {}

func (x *GetSymbolsPackageUploadURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolsPackageUploadURLRequest.ProtoReflect.Descriptor instead.
func (*GetSymbolsPackageUploadURLRequest) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{9}
}

func (x *GetSymbolsPackageUploadURLRequest) GetHiFileID() uint64 {
	if x != nil {
		return x.HiFileID
	}
	return 0
}

func (x *GetSymbolsPackageUploadURLRequest) GetLoFileID() uint64 {
	if x != nil {
		return x.LoFileID
	}
	return 0
}

func (x *GetSymbolsPackageUploadURLRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type GetSymbolsPackageUploadURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL for the upload (empty if no upload needed)
	PackageURL string `protobuf:"bytes,1,opt,name=packageURL,proto3" json:"packageURL,omitempty"`
}

func (x *GetSymbolsPackageUploadURLResponse) Reset() {
	*x = GetSymbolsPackageUploadURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolsPackageUploadURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolsPackageUploadURLResponse) ProtoMessage() {}

func (x *GetSymbolsPackageUploadURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolsPackageUploadURLResponse.ProtoReflect.Descriptor instead.
func (*GetSymbolsPackageUploadURLResponse) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{10}
}

func (x *GetSymbolsPackageUploadURLResponse) GetPackageURL() string {
	if x != nil {
		return x.PackageURL
	}
	return ""
}

// `PackageUploadComplete` takes an URL as parameter (the URL is a unique identifier for an upload).
// The URL should come from a `GetSymbolsPackageUploadURL` response.
type PackageUploadCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of the package that was successfully uploaded.
	PackageURL string `protobuf:"bytes,1,opt,name=packageURL,proto3" json:"packageURL,omitempty"`
}

func (x *PackageUploadCompleteRequest) Reset() {
	*x = PackageUploadCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collection_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUploadCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUploadCompleteRequest) ProtoMessage() {}

func (x *PackageUploadCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collection_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUploadCompleteRequest.ProtoReflect.Descriptor instead.
func (*PackageUploadCompleteRequest) Descriptor() ([]byte, []int) {
	return file_collection_agent_proto_rawDescGZIP(), []int{11}
}

func (x *PackageUploadCompleteRequest) GetPackageURL() string {
	if x != nil {
		return x.PackageURL
	}
	return ""
}

var file_collection_agent_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         65001,
		Name:          "collectionagent.version",
		Tag:           "varint,65001,opt,name=version",
		Filename:      "collection_agent.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional uint32 version = 65001;
	E_Version = &file_collection_agent_proto_extTypes[0]
)

var File_collection_agent_proto protoreflect.FileDescriptor

var file_collection_agent_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x68, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb7,
	0x04, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x69,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x06, 0x52, 0x0d, 0x68, 0x69, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x49, 0x64, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x49, 0x64, 0x78, 0x12, 0x5d, 0x0a, 0x0b, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x12, 0x6f, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49,
	0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64,
	0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x05, 0x0a, 0x19, 0x53, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x69, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0d, 0x68,
	0x69, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x06,
	0x52, 0x0c, 0x68, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x06, 0x52, 0x0c, 0x6c, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x06, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x49, 0x64, 0x78, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x49, 0x64, 0x78, 0x12, 0x5d, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x49, 0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x12, 0x6f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x44, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x49, 0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x02, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x09, 0x68, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x06, 0x52, 0x09, 0x6c, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x69, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0b, 0x68, 0x69, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0b, 0x6c,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x94, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x06, 0x52, 0x09, 0x68, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x09, 0x6c, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x73, 0x22, 0x52, 0x0a, 0x08, 0x54, 0x73, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03,
	0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x07, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x73, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0x94, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x09, 0x68, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x09, 0x6c, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x22, 0x77, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x69, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x68, 0x69, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x6c, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x52,
	0x4c, 0x22, 0x3e, 0x0a, 0x1c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x52,
	0x4c, 0x32, 0xe0, 0x07, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x41, 0x64,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x3a, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0xfb,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x47, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x79, 0x7a, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2f, 0x70, 0x66, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xc8, 0xde, 0x1f, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_collection_agent_proto_rawDescOnce sync.Once
	file_collection_agent_proto_rawDescData = file_collection_agent_proto_rawDesc
)

func file_collection_agent_proto_rawDescGZIP() []byte {
	file_collection_agent_proto_rawDescOnce.Do(func() {
		file_collection_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_collection_agent_proto_rawDescData)
	})
	return file_collection_agent_proto_rawDescData
}

var file_collection_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_collection_agent_proto_goTypes = []interface{}{
	(*HostInfo)(nil),                           // 0: collectionagent.HostInfo
	(*AddCountsForTracesRequest)(nil),          // 1: collectionagent.AddCountsForTracesRequest
	(*SetFramesForTracesRequest)(nil),          // 2: collectionagent.SetFramesForTracesRequest
	(*AddFrameMetadataRequest)(nil),            // 3: collectionagent.AddFrameMetadataRequest
	(*AddExecutableMetadataRequest)(nil),       // 4: collectionagent.AddExecutableMetadataRequest
	(*TsMetric)(nil),                           // 5: collectionagent.TsMetric
	(*Metrics)(nil),                            // 6: collectionagent.Metrics
	(*HostMetadata)(nil),                       // 7: collectionagent.HostMetadata
	(*AddFallbackSymbolsRequest)(nil),          // 8: collectionagent.AddFallbackSymbolsRequest
	(*GetSymbolsPackageUploadURLRequest)(nil),  // 9: collectionagent.GetSymbolsPackageUploadURLRequest
	(*GetSymbolsPackageUploadURLResponse)(nil), // 10: collectionagent.GetSymbolsPackageUploadURLResponse
	(*PackageUploadCompleteRequest)(nil),       // 11: collectionagent.PackageUploadCompleteRequest
	nil,                                        // 12: collectionagent.AddCountsForTracesRequest.PodNamesIdxEntry
	nil,                                        // 13: collectionagent.AddCountsForTracesRequest.ContainerNamesIdxEntry
	nil,                                        // 14: collectionagent.SetFramesForTracesRequest.PodNamesIdxEntry
	nil,                                        // 15: collectionagent.SetFramesForTracesRequest.ContainerNamesIdxEntry
	nil,                                        // 16: collectionagent.HostMetadata.MetadataEntry
	(*descriptorpb.FileOptions)(nil),           // 17: google.protobuf.FileOptions
	(*emptypb.Empty)(nil),                      // 18: google.protobuf.Empty
}
var file_collection_agent_proto_depIdxs = []int32{
	12, // 0: collectionagent.AddCountsForTracesRequest.podNamesIdx:type_name -> collectionagent.AddCountsForTracesRequest.PodNamesIdxEntry
	13, // 1: collectionagent.AddCountsForTracesRequest.containerNamesIdx:type_name -> collectionagent.AddCountsForTracesRequest.ContainerNamesIdxEntry
	14, // 2: collectionagent.SetFramesForTracesRequest.podNamesIdx:type_name -> collectionagent.SetFramesForTracesRequest.PodNamesIdxEntry
	15, // 3: collectionagent.SetFramesForTracesRequest.containerNamesIdx:type_name -> collectionagent.SetFramesForTracesRequest.ContainerNamesIdxEntry
	5,  // 4: collectionagent.Metrics.tsMetrics:type_name -> collectionagent.TsMetric
	16, // 5: collectionagent.HostMetadata.metadata:type_name -> collectionagent.HostMetadata.MetadataEntry
	17, // 6: collectionagent.version:extendee -> google.protobuf.FileOptions
	0,  // 7: collectionagent.CollectionAgent.SaveHostInfo:input_type -> collectionagent.HostInfo
	1,  // 8: collectionagent.CollectionAgent.AddCountsForTraces:input_type -> collectionagent.AddCountsForTracesRequest
	2,  // 9: collectionagent.CollectionAgent.SetFramesForTraces:input_type -> collectionagent.SetFramesForTracesRequest
	3,  // 10: collectionagent.CollectionAgent.AddFrameMetadata:input_type -> collectionagent.AddFrameMetadataRequest
	4,  // 11: collectionagent.CollectionAgent.AddExecutableMetadata:input_type -> collectionagent.AddExecutableMetadataRequest
	6,  // 12: collectionagent.CollectionAgent.AddMetrics:input_type -> collectionagent.Metrics
	7,  // 13: collectionagent.CollectionAgent.ReportHostMetadata:input_type -> collectionagent.HostMetadata
	8,  // 14: collectionagent.CollectionAgent.AddFallbackSymbols:input_type -> collectionagent.AddFallbackSymbolsRequest
	18, // 15: collectionagent.CollectionAgent.Heartbeat:input_type -> google.protobuf.Empty
	9,  // 16: collectionagent.CollectionAgent.GetSymbolsPackageUploadURL:input_type -> collectionagent.GetSymbolsPackageUploadURLRequest
	11, // 17: collectionagent.CollectionAgent.PackageUploadComplete:input_type -> collectionagent.PackageUploadCompleteRequest
	18, // 18: collectionagent.CollectionAgent.SaveHostInfo:output_type -> google.protobuf.Empty
	18, // 19: collectionagent.CollectionAgent.AddCountsForTraces:output_type -> google.protobuf.Empty
	18, // 20: collectionagent.CollectionAgent.SetFramesForTraces:output_type -> google.protobuf.Empty
	18, // 21: collectionagent.CollectionAgent.AddFrameMetadata:output_type -> google.protobuf.Empty
	18, // 22: collectionagent.CollectionAgent.AddExecutableMetadata:output_type -> google.protobuf.Empty
	18, // 23: collectionagent.CollectionAgent.AddMetrics:output_type -> google.protobuf.Empty
	18, // 24: collectionagent.CollectionAgent.ReportHostMetadata:output_type -> google.protobuf.Empty
	18, // 25: collectionagent.CollectionAgent.AddFallbackSymbols:output_type -> google.protobuf.Empty
	18, // 26: collectionagent.CollectionAgent.Heartbeat:output_type -> google.protobuf.Empty
	10, // 27: collectionagent.CollectionAgent.GetSymbolsPackageUploadURL:output_type -> collectionagent.GetSymbolsPackageUploadURLResponse
	18, // 28: collectionagent.CollectionAgent.PackageUploadComplete:output_type -> google.protobuf.Empty
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	6,  // [6:7] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_collection_agent_proto_init() }
func file_collection_agent_proto_init() {
	if File_collection_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_collection_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCountsForTracesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFramesForTracesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFrameMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExecutableMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFallbackSymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSymbolsPackageUploadURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSymbolsPackageUploadURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collection_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUploadCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_collection_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 1,
			NumServices:   1,
		},
		GoTypes:           file_collection_agent_proto_goTypes,
		DependencyIndexes: file_collection_agent_proto_depIdxs,
		MessageInfos:      file_collection_agent_proto_msgTypes,
		ExtensionInfos:    file_collection_agent_proto_extTypes,
	}.Build()
	File_collection_agent_proto = out.File
	file_collection_agent_proto_rawDesc = nil
	file_collection_agent_proto_goTypes = nil
	file_collection_agent_proto_depIdxs = nil
}
